<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EQProtocol</name>
    </assembly>
    <members>
        <member name="P:OpenEQ.Netcode.GameClient.EQGameClient.Character">
            <summary>
            Gets the current character information once logged in
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GameClient.EQGameClient.CurrentZone">
            <summary>
            Gets the current zone the character is in
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GameClient.EQGameClient.State">
            <summary>
            Gets the current connection state of the game client
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GameClient.EQGameClient.Navigation">
            <summary>
            Gets the navigation manager for pathfinding and nav mesh operations
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GameClient.EQGameClient.Movement">
            <summary>
            Gets the movement manager for controlling character movement
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GameClient.EQGameClient.LoginServer">
            <summary>
            Gets or sets the login server hostname or IP address
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GameClient.EQGameClient.LoginServerPort">
            <summary>
            Gets or sets the login server port (default: 5999)
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GameClient.EQGameClient.Username">
            <summary>
            Gets or sets the account username
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GameClient.EQGameClient.Password">
            <summary>
            Gets or sets the account password
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GameClient.EQGameClient.WorldName">
            <summary>
            Gets or sets the target world/server name
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GameClient.EQGameClient.CharacterName">
            <summary>
            Gets or sets the character name to play
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GameClient.EQGameClient.PacketRecordingMode">
            <summary>
            Gets or sets the packet recording mode for narration engine
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GameClient.EQGameClient.PacketCaptureDirectory">
            <summary>
            Gets or sets the base directory for packet capture files
            </summary>
        </member>
        <member name="E:OpenEQ.Netcode.GameClient.EQGameClient.ConnectionStateChanged">
            <summary>
            Raised when the connection state changes
            </summary>
        </member>
        <member name="E:OpenEQ.Netcode.GameClient.EQGameClient.CharacterLoaded">
            <summary>
            Raised when the character has been loaded into the game
            </summary>
        </member>
        <member name="E:OpenEQ.Netcode.GameClient.EQGameClient.ZoneChanged">
            <summary>
            Raised when the character changes zones
            </summary>
        </member>
        <member name="E:OpenEQ.Netcode.GameClient.EQGameClient.NPCSpawned">
            <summary>
            Raised when an NPC spawns in the zone
            </summary>
        </member>
        <member name="E:OpenEQ.Netcode.GameClient.EQGameClient.NPCDespawned">
            <summary>
            Raised when an NPC despawns from the zone (provides SpawnID)
            </summary>
        </member>
        <member name="E:OpenEQ.Netcode.GameClient.EQGameClient.PlayerSpawned">
            <summary>
            Raised when another player spawns in the zone
            </summary>
        </member>
        <member name="E:OpenEQ.Netcode.GameClient.EQGameClient.PlayerDespawned">
            <summary>
            Raised when another player despawns from the zone (provides SpawnID)
            </summary>
        </member>
        <member name="E:OpenEQ.Netcode.GameClient.EQGameClient.ChatMessageReceived">
            <summary>
            Raised when a chat message is received
            </summary>
        </member>
        <member name="E:OpenEQ.Netcode.GameClient.EQGameClient.LoginFailed">
            <summary>
            Raised when login fails with an error message
            </summary>
        </member>
        <member name="E:OpenEQ.Netcode.GameClient.EQGameClient.Disconnected">
            <summary>
            Raised when the client is disconnected from the server
            </summary>
        </member>
        <member name="E:OpenEQ.Netcode.GameClient.EQGameClient.ClientUpdated">
            <summary>
            Raised when a player position update is received
            </summary>
        </member>
        <member name="E:OpenEQ.Netcode.GameClient.EQGameClient.MobUpdated">
            <summary>
            Raised when a mob position update is received
            </summary>
        </member>
        <member name="E:OpenEQ.Netcode.GameClient.EQGameClient.NPCMoveUpdated">
            <summary>
            Raised when a NPC position update is received
            </summary>
        </member>
        <member name="E:OpenEQ.Netcode.GameClient.EQGameClient.DeathReceived">
            <summary>
            Raised when a death event occurs
            </summary>
        </member>
        <member name="E:OpenEQ.Netcode.GameClient.EQGameClient.EntityDeleted">
            <summary>
            Raised when an entity is deleted from the zone
            </summary>
        </member>
        <member name="E:OpenEQ.Netcode.GameClient.EQGameClient.ConsiderReceived">
            <summary>
            Raised when a consider response is received
            </summary>
        </member>
        <member name="E:OpenEQ.Netcode.GameClient.EQGameClient.MobHealthReceived">
            <summary>
            Raised when mob health information is received
            </summary>
        </member>
        <member name="E:OpenEQ.Netcode.GameClient.EQGameClient.DamageReceived">
            <summary>
            Raised when damage is dealt or received
            </summary>
        </member>
        <member name="E:OpenEQ.Netcode.GameClient.EQGameClient.SpellCast">
            <summary>
            Raised when a spell is cast
            </summary>
        </member>
        <member name="E:OpenEQ.Netcode.GameClient.EQGameClient.SpellInterrupted">
            <summary>
            Raised when a spell cast is interrupted
            </summary>
        </member>
        <member name="E:OpenEQ.Netcode.GameClient.EQGameClient.AnimationReceived">
            <summary>
            Raised when an animation is played
            </summary>
        </member>
        <member name="E:OpenEQ.Netcode.GameClient.EQGameClient.BuffReceived">
            <summary>
            Raised when a buff is applied or updated
            </summary>
        </member>
        <member name="E:OpenEQ.Netcode.GameClient.EQGameClient.GroundSpawnReceived">
            <summary>
            Raised when a ground spawn is detected
            </summary>
        </member>
        <member name="E:OpenEQ.Netcode.GameClient.EQGameClient.TrackingReceived">
            <summary>
            Raised when tracking information is received
            </summary>
        </member>
        <member name="E:OpenEQ.Netcode.GameClient.EQGameClient.EmoteReceived">
            <summary>
            Raised when an emote is received
            </summary>
        </member>
        <member name="E:OpenEQ.Netcode.GameClient.EQGameClient.ExperienceUpdated">
            <summary>
            Raised when experience points are gained or lost
            </summary>
        </member>
        <member name="E:OpenEQ.Netcode.GameClient.EQGameClient.LevelChanged">
            <summary>
            Raised when the character's level changes
            </summary>
        </member>
        <member name="E:OpenEQ.Netcode.GameClient.EQGameClient.SkillUpdated">
            <summary>
            Raised when a skill is updated
            </summary>
        </member>
        <member name="E:OpenEQ.Netcode.GameClient.EQGameClient.WearChanged">
            <summary>
            Raised when equipment is changed
            </summary>
        </member>
        <member name="E:OpenEQ.Netcode.GameClient.EQGameClient.ItemMoved">
            <summary>
            Raised when an item is moved in inventory
            </summary>
        </member>
        <member name="E:OpenEQ.Netcode.GameClient.EQGameClient.TargetAssisted">
            <summary>
            Raised when the assist target changes
            </summary>
        </member>
        <member name="E:OpenEQ.Netcode.GameClient.EQGameClient.AutoAttackToggled">
            <summary>
            Raised when auto-attack is toggled on or off
            </summary>
        </member>
        <member name="E:OpenEQ.Netcode.GameClient.EQGameClient.CharmReceived">
            <summary>
            Raised when a charm effect is applied
            </summary>
        </member>
        <member name="E:OpenEQ.Netcode.GameClient.EQGameClient.StunReceived">
            <summary>
            Raised when a stun effect is applied
            </summary>
        </member>
        <member name="E:OpenEQ.Netcode.GameClient.EQGameClient.IllusionReceived">
            <summary>
            Raised when an illusion is applied
            </summary>
        </member>
        <member name="E:OpenEQ.Netcode.GameClient.EQGameClient.SoundReceived">
            <summary>
            Raised when a sound effect is played
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GameClient.EQGameClient.LoginAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Complete login sequence - connects to login server, selects world, selects character
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GameClient.EQGameClient.SendChat(System.String,OpenEQ.Netcode.ChatChannel)">
            <summary>
            Send a chat message
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GameClient.EQGameClient.MoveTo(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Move character to a specific location
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GameClient.EQGameClient.GetNearbyNPCs(System.Single)">
            <summary>
            Get all NPCs within a certain radius of the character
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GameClient.EQGameClient.InitializePacketCapture">
            <summary>
            Initialize packet capture system
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GameClient.EQGameClient.GetPacketEventEmitter">
            <summary>
            Get the current packet event emitter (for stream integration)
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GameClient.EQGameClient.Disconnect">
            <summary>
            Disconnect from the game
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GameClient.EQGameClient.MoveTo(System.Single,System.Single,System.Single)">
            <summary>
            Moves the character to the specified coordinates using pathfinding
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GameClient.EQGameClient.StopMovement">
            <summary>
            Stops any current movement
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GameClient.EQGameClient.MovementSpeedMultiplier">
            <summary>
            Gets or sets the movement speed multiplier (for buffs, debuffs, etc.)
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GameClient.EQGameClient.IsMoving">
            <summary>
            Gets whether the character is currently moving
            </summary>
        </member>
        <member name="T:OpenEQ.Netcode.ApproveName">
            <summary>
            Represents the ApproveName packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ApproveName.Class">
            <summary>
            Gets or sets the class value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ApproveName.Haircolor">
            <summary>
            Gets or sets the haircolor value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ApproveName.Beard">
            <summary>
            Gets or sets the beard value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ApproveName.Beardcolor">
            <summary>
            Gets or sets the beardcolor value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ApproveName.Gender">
            <summary>
            Gets or sets the gender value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ApproveName.Race">
            <summary>
            Gets or sets the race value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ApproveName.StartZone">
            <summary>
            Gets or sets the startzone value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ApproveName.Hairstyle">
            <summary>
            Gets or sets the hairstyle value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ApproveName.Deity">
            <summary>
            Gets or sets the deity value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ApproveName.STR">
            <summary>
            Gets or sets the str value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ApproveName.STA">
            <summary>
            Gets or sets the sta value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ApproveName.AGI">
            <summary>
            Gets or sets the agi value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ApproveName.DEX">
            <summary>
            Gets or sets the dex value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ApproveName.WIS">
            <summary>
            Gets or sets the wis value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ApproveName.INT">
            <summary>
            Gets or sets the int value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ApproveName.CHA">
            <summary>
            Gets or sets the cha value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ApproveName.Face">
            <summary>
            Gets or sets the face value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ApproveName.Eyecolor1">
            <summary>
            Gets or sets the eyecolor1 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ApproveName.Eyecolor2">
            <summary>
            Gets or sets the eyecolor2 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ApproveName.Tutorial">
            <summary>
            Gets or sets the tutorial value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ApproveName.DrakkinHeritage">
            <summary>
            Gets or sets the drakkinheritage value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ApproveName.DrakkinTattoo">
            <summary>
            Gets or sets the drakkintattoo value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ApproveName.DrakkinDetails">
            <summary>
            Gets or sets the drakkindetails value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.ApproveName.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the ApproveName struct with specified field values.
            </summary>
            <param name="class_">The class value.</param>
            <param name="haircolor">The haircolor value.</param>
            <param name="beard">The beard value.</param>
            <param name="beardcolor">The beardcolor value.</param>
            <param name="gender">The gender value.</param>
            <param name="race">The race value.</param>
            <param name="start_zone">The startzone value.</param>
            <param name="hairstyle">The hairstyle value.</param>
            <param name="deity">The deity value.</param>
            <param name="STR">The str value.</param>
            <param name="STA">The sta value.</param>
            <param name="AGI">The agi value.</param>
            <param name="DEX">The dex value.</param>
            <param name="WIS">The wis value.</param>
            <param name="INT">The int value.</param>
            <param name="CHA">The cha value.</param>
            <param name="face">The face value.</param>
            <param name="eyecolor1">The eyecolor1 value.</param>
            <param name="eyecolor2">The eyecolor2 value.</param>
            <param name="tutorial">The tutorial value.</param>
            <param name="drakkin_heritage">The drakkinheritage value.</param>
            <param name="drakkin_tattoo">The drakkintattoo value.</param>
            <param name="drakkin_details">The drakkindetails value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ApproveName.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the ApproveName struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ApproveName.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the ApproveName struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ApproveName.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ApproveName.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ApproveName.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.ApproveName.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ApproveName.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.ApproveWorld">
            <summary>
            Represents the ApproveWorld packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ApproveWorld.Unknown544">
            <summary>
            Gets or sets the unknown544 value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.ApproveWorld.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the ApproveWorld struct with specified field values.
            </summary>
            <param name="unknown544">The unknown544 value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ApproveWorld.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the ApproveWorld struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ApproveWorld.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the ApproveWorld struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ApproveWorld.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ApproveWorld.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ApproveWorld.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.ApproveWorld.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ApproveWorld.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.CharacterCreate">
            <summary>
            Represents the CharacterCreate packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.CharacterCreate.Class">
            <summary>
            Gets or sets the class value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.CharacterCreate.Haircolor">
            <summary>
            Gets or sets the haircolor value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.CharacterCreate.Beard">
            <summary>
            Gets or sets the beard value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.CharacterCreate.Beardcolor">
            <summary>
            Gets or sets the beardcolor value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.CharacterCreate.Gender">
            <summary>
            Gets or sets the gender value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.CharacterCreate.Race">
            <summary>
            Gets or sets the race value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.CharacterCreate.StartZone">
            <summary>
            Gets or sets the startzone value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.CharacterCreate.Hairstyle">
            <summary>
            Gets or sets the hairstyle value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.CharacterCreate.Deity">
            <summary>
            Gets or sets the deity value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.CharacterCreate.STR">
            <summary>
            Gets or sets the str value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.CharacterCreate.STA">
            <summary>
            Gets or sets the sta value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.CharacterCreate.AGI">
            <summary>
            Gets or sets the agi value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.CharacterCreate.DEX">
            <summary>
            Gets or sets the dex value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.CharacterCreate.WIS">
            <summary>
            Gets or sets the wis value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.CharacterCreate.INT">
            <summary>
            Gets or sets the int value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.CharacterCreate.CHA">
            <summary>
            Gets or sets the cha value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.CharacterCreate.Face">
            <summary>
            Gets or sets the face value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.CharacterCreate.Eyecolor1">
            <summary>
            Gets or sets the eyecolor1 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.CharacterCreate.Eyecolor2">
            <summary>
            Gets or sets the eyecolor2 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.CharacterCreate.Tutorial">
            <summary>
            Gets or sets the tutorial value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.CharacterCreate.DrakkinHeritage">
            <summary>
            Gets or sets the drakkinheritage value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.CharacterCreate.DrakkinTattoo">
            <summary>
            Gets or sets the drakkintattoo value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.CharacterCreate.DrakkinDetails">
            <summary>
            Gets or sets the drakkindetails value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.CharacterCreate.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the CharacterCreate struct with specified field values.
            </summary>
            <param name="class_">The class value.</param>
            <param name="haircolor">The haircolor value.</param>
            <param name="beard">The beard value.</param>
            <param name="beardcolor">The beardcolor value.</param>
            <param name="gender">The gender value.</param>
            <param name="race">The race value.</param>
            <param name="start_zone">The startzone value.</param>
            <param name="hairstyle">The hairstyle value.</param>
            <param name="deity">The deity value.</param>
            <param name="STR">The str value.</param>
            <param name="STA">The sta value.</param>
            <param name="AGI">The agi value.</param>
            <param name="DEX">The dex value.</param>
            <param name="WIS">The wis value.</param>
            <param name="INT">The int value.</param>
            <param name="CHA">The cha value.</param>
            <param name="face">The face value.</param>
            <param name="eyecolor1">The eyecolor1 value.</param>
            <param name="eyecolor2">The eyecolor2 value.</param>
            <param name="tutorial">The tutorial value.</param>
            <param name="drakkin_heritage">The drakkinheritage value.</param>
            <param name="drakkin_tattoo">The drakkintattoo value.</param>
            <param name="drakkin_details">The drakkindetails value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CharacterCreate.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the CharacterCreate struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CharacterCreate.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the CharacterCreate struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CharacterCreate.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CharacterCreate.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CharacterCreate.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.CharacterCreate.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CharacterCreate.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.ExpansionInfo">
            <summary>
            Represents the ExpansionInfo packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ExpansionInfo.Unknown000">
            <summary>
            Gets or sets the unknown000 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ExpansionInfo.Expansions">
            <summary>
            Gets or sets the expansions value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.ExpansionInfo.#ctor(System.Byte[],System.UInt32)">
            <summary>
            Initializes a new instance of the ExpansionInfo struct with specified field values.
            </summary>
            <param name="Unknown000">The unknown000 value.</param>
            <param name="Expansions">The expansions value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ExpansionInfo.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the ExpansionInfo struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ExpansionInfo.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the ExpansionInfo struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ExpansionInfo.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ExpansionInfo.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ExpansionInfo.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.ExpansionInfo.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ExpansionInfo.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GuildsList">
            <summary>
            Represents the GuildsList packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GuildsList.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GuildsList struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildsList.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GuildsList struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildsList.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildsList.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildsList.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GuildsList.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildsList.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.LogServer">
            <summary>
            Represents the LogServer packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LogServer.Unknown000">
            <summary>
            Gets or sets the unknown000 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LogServer.EnablePvp">
            <summary>
            Gets or sets the enablepvp value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LogServer.Unknown005">
            <summary>
            Gets or sets the unknown005 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LogServer.Unknown006">
            <summary>
            Gets or sets the unknown006 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LogServer.Unknown007">
            <summary>
            Gets or sets the unknown007 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LogServer.EnableFV">
            <summary>
            Gets or sets the enablefv value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LogServer.Unknown009">
            <summary>
            Gets or sets the unknown009 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LogServer.Unknown010">
            <summary>
            Gets or sets the unknown010 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LogServer.Unknown011">
            <summary>
            Gets or sets the unknown011 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LogServer.Unknown012">
            <summary>
            Gets or sets the unknown012 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LogServer.Unknown016">
            <summary>
            Gets or sets the unknown016 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LogServer.Unknown020">
            <summary>
            Gets or sets the unknown020 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LogServer.Unknown032">
            <summary>
            Gets or sets the unknown032 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LogServer.Worldshortname">
            <summary>
            Gets or sets the worldshortname value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LogServer.Unknown064">
            <summary>
            Gets or sets the unknown064 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LogServer.Unknown096">
            <summary>
            Gets or sets the unknown096 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LogServer.Unknown112">
            <summary>
            Gets or sets the unknown112 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LogServer.Unknown128">
            <summary>
            Gets or sets the unknown128 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LogServer.Unknown176">
            <summary>
            Gets or sets the unknown176 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LogServer.Unknown180">
            <summary>
            Gets or sets the unknown180 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LogServer.Unknown260">
            <summary>
            Gets or sets the unknown260 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LogServer.Enablevoicemacros">
            <summary>
            Gets or sets the enablevoicemacros value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LogServer.Enablemail">
            <summary>
            Gets or sets the enablemail value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LogServer.Unknown263">
            <summary>
            Gets or sets the unknown263 value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.LogServer.#ctor(System.UInt32,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.UInt32,System.UInt32,System.Byte[],System.UInt32,System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.UInt32,System.Byte[],System.Byte,System.Byte,System.Byte,System.Byte[])">
            <summary>
            Initializes a new instance of the LogServer struct with specified field values.
            </summary>
            <param name="unknown000">The unknown000 value.</param>
            <param name="enable_pvp">The enablepvp value.</param>
            <param name="unknown005">The unknown005 value.</param>
            <param name="unknown006">The unknown006 value.</param>
            <param name="unknown007">The unknown007 value.</param>
            <param name="enable_FV">The enablefv value.</param>
            <param name="unknown009">The unknown009 value.</param>
            <param name="unknown010">The unknown010 value.</param>
            <param name="unknown011">The unknown011 value.</param>
            <param name="unknown012">The unknown012 value.</param>
            <param name="unknown016">The unknown016 value.</param>
            <param name="unknown020">The unknown020 value.</param>
            <param name="unknown032">The unknown032 value.</param>
            <param name="worldshortname">The worldshortname value.</param>
            <param name="unknown064">The unknown064 value.</param>
            <param name="unknown096">The unknown096 value.</param>
            <param name="unknown112">The unknown112 value.</param>
            <param name="unknown128">The unknown128 value.</param>
            <param name="unknown176">The unknown176 value.</param>
            <param name="unknown180">The unknown180 value.</param>
            <param name="unknown260">The unknown260 value.</param>
            <param name="enablevoicemacros">The enablevoicemacros value.</param>
            <param name="enablemail">The enablemail value.</param>
            <param name="unknown263">The unknown263 value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LogServer.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the LogServer struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LogServer.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the LogServer struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LogServer.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LogServer.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LogServer.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.LogServer.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LogServer.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.SendCharInfo">
            <summary>
            Represents the SendCharInfo packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.SendCharInfo.charCount">
            <summary>
            The number of characters in this packet.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.SendCharInfo.totalChars">
            <summary>
            The total number of characters allowed.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.SendCharInfo.Characters">
            <summary>
            The list of character entries included in this packet.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.SendCharInfo.#ctor(System.Collections.Generic.List{EQProtocol.Streams.World.CharacterSelectEntry})">
            <summary>
            Initializes a new instance of the <see cref="!:CharacterSelect"/> struct with the specified character entries.
            </summary>
            <param name="Characters">The list of character entries.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SendCharInfo.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="!:CharacterSelect"/> struct from a byte array.
            </summary>
            <param name="data">The byte array containing the packet data.</param>
            <param name="offset">The offset in the array to start reading from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SendCharInfo.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the <see cref="!:CharacterSelect"/> struct from a <see cref="T:System.IO.BinaryReader"/>.
            </summary>
            <param name="br">The binary reader containing the packet data.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SendCharInfo.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the packet data from a byte array.
            </summary>
            <param name="data">The byte array containing the packet data.</param>
            <param name="offset">The offset in the array to start reading from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SendCharInfo.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the packet data from a <see cref="T:System.IO.BinaryReader"/>.
            </summary>
            <param name="br">The binary reader containing the packet data.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SendCharInfo.Pack">
            <summary>
            Packs the packet data into a byte array.
            </summary>
            <returns>A byte array containing the packed data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.SendCharInfo.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the packet data into a <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="bw">The binary writer to write the packet data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SendCharInfo.ToString">
            <summary>
            Returns a string representation of the <see cref="!:CharacterSelect"/> struct.
            </summary>
            <returns>A string describing the contents of the struct.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.SendLoginInfo">
            <summary>
            Represents the SendLoginInfo packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.SendLoginInfo.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the SendLoginInfo struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SendLoginInfo.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the SendLoginInfo struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SendLoginInfo.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SendLoginInfo.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SendLoginInfo.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.SendLoginInfo.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SendLoginInfo.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.ZoneServerInfo">
            <summary>
            Represents the ZoneServerInfo packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.ZoneServerInfo.Host">
            <summary>
            The IP address or hostname of the zone server.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.ZoneServerInfo.Port">
            <summary>
            The port number of the zone server.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.ZoneServerInfo.#ctor(System.String,System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenEQ.Netcode.ZoneServerInfo"/> struct with the specified host and port.
            </summary>
            <param name="Host">The IP address or hostname.</param>
            <param name="Port">The port number.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ZoneServerInfo.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenEQ.Netcode.ZoneServerInfo"/> struct from a byte array.
            </summary>
            <param name="data">The byte array containing the packed data.</param>
            <param name="offset">The offset in the array to start reading from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ZoneServerInfo.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenEQ.Netcode.ZoneServerInfo"/> struct from a <see cref="T:System.IO.BinaryReader"/>.
            </summary>
            <param name="br">The binary reader containing the packed data.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ZoneServerInfo.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the structure from a byte array.
            </summary>
            <param name="data">The byte array containing the packed data.</param>
            <param name="offset">The offset in the array to start reading from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ZoneServerInfo.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the structure from a <see cref="T:System.IO.BinaryReader"/>.
            </summary>
            <param name="br">The binary reader containing the packed data.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ZoneServerInfo.Pack">
            <summary>
            Packs the structure into a byte array.
            </summary>
            <returns>A byte array containing the packed data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.ZoneServerInfo.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the structure into a <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="bw">The binary writer to write the packed data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ZoneServerInfo.ToString">
            <summary>
            Returns a string representation of the <see cref="T:OpenEQ.Netcode.ZoneServerInfo"/> structure.
            </summary>
            <returns>A string describing the contents of the structure.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.AAAction">
            <summary>
            Represents the AAAction packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AAAction.Begin">
            <summary>
            Gets or sets the begin value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AAAction.Ability">
            <summary>
            Gets or sets the ability value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AAAction.End">
            <summary>
            Gets or sets the end value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.AAAction.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the AAAction struct with specified field values.
            </summary>
            <param name="begin">The begin value.</param>
            <param name="ability">The ability value.</param>
            <param name="end">The end value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AAAction.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the AAAction struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AAAction.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the AAAction struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AAAction.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AAAction.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AAAction.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.AAAction.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AAAction.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.AAExpUpdate">
            <summary>
            Represents the AAExpUpdate packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AAExpUpdate.Experience">
            <summary>
            Gets or sets the experience value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AAExpUpdate.Unspent">
            <summary>
            Gets or sets the unspent value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AAExpUpdate.Unknown006">
            <summary>
            Gets or sets the unknown006 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AAExpUpdate.Percentage">
            <summary>
            Gets or sets the percentage value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AAExpUpdate.Unknown009">
            <summary>
            Gets or sets the unknown009 value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.AAExpUpdate.#ctor(System.UInt32,System.UInt16,System.UInt16,System.Byte,System.Byte[])">
            <summary>
            Initializes a new instance of the AAExpUpdate struct with specified field values.
            </summary>
            <param name="experience">The experience value.</param>
            <param name="unspent">The unspent value.</param>
            <param name="unknown006">The unknown006 value.</param>
            <param name="percentage">The percentage value.</param>
            <param name="unknown009">The unknown009 value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AAExpUpdate.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the AAExpUpdate struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AAExpUpdate.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the AAExpUpdate struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AAExpUpdate.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AAExpUpdate.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AAExpUpdate.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.AAExpUpdate.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AAExpUpdate.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.AcceptNewTask">
            <summary>
            Represents the AcceptNewTask packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AcceptNewTask.Unknown00">
            <summary>
            Gets or sets the unknown00 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AcceptNewTask.TaskId">
            <summary>
            Gets or sets the taskid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AcceptNewTask.TaskMasterId">
            <summary>
            Gets or sets the taskmasterid value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.AcceptNewTask.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the AcceptNewTask struct with specified field values.
            </summary>
            <param name="unknown00">The unknown00 value.</param>
            <param name="task_id">The taskid value.</param>
            <param name="task_master_id">The taskmasterid value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AcceptNewTask.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the AcceptNewTask struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AcceptNewTask.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the AcceptNewTask struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AcceptNewTask.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AcceptNewTask.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AcceptNewTask.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.AcceptNewTask.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AcceptNewTask.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.Action">
            <summary>
            Represents the Action packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Action.Target">
            <summary>
            Gets or sets the target value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Action.Source">
            <summary>
            Gets or sets the source value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Action.Level">
            <summary>
            Gets or sets the level value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Action.Unknown06">
            <summary>
            Gets or sets the unknown06 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Action.InstrumentMod">
            <summary>
            Gets or sets the instrumentmod value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Action.Force">
            <summary>
            Gets or sets the force value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Action.HitHeading">
            <summary>
            Gets or sets the hitheading value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Action.HitPitch">
            <summary>
            Gets or sets the hitpitch value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Action.Type">
            <summary>
            Gets or sets the type value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Action.Damage">
            <summary>
            Gets or sets the damage value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Action.Unknown31">
            <summary>
            Gets or sets the unknown31 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Action.Spell">
            <summary>
            Gets or sets the spell value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Action.SpellLevel">
            <summary>
            Gets or sets the spelllevel value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Action.EffectFlag">
            <summary>
            Gets or sets the effectflag value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Action.SpellGem">
            <summary>
            Gets or sets the spellgem value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Action.Padding38">
            <summary>
            Gets or sets the padding38 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Action.Slot">
            <summary>
            Gets or sets the slot value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Action.ItemCastType">
            <summary>
            Gets or sets the itemcasttype value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.Action.#ctor(System.UInt16,System.UInt16,System.UInt16,System.UInt32,System.Single,System.Single,System.Single,System.Single,System.Byte,System.UInt32,System.UInt16,System.UInt16,System.Byte,System.Byte,System.Byte,System.Byte[],System.UInt32[],System.UInt32)">
            <summary>
            Initializes a new instance of the Action struct with specified field values.
            </summary>
            <param name="target">The target value.</param>
            <param name="source">The source value.</param>
            <param name="level">The level value.</param>
            <param name="unknown06">The unknown06 value.</param>
            <param name="instrument_mod">The instrumentmod value.</param>
            <param name="force">The force value.</param>
            <param name="hit_heading">The hitheading value.</param>
            <param name="hit_pitch">The hitpitch value.</param>
            <param name="type">The type value.</param>
            <param name="damage">The damage value.</param>
            <param name="unknown31">The unknown31 value.</param>
            <param name="spell">The spell value.</param>
            <param name="spell_level">The spelllevel value.</param>
            <param name="effect_flag">The effectflag value.</param>
            <param name="spell_gem">The spellgem value.</param>
            <param name="padding38">The padding38 value.</param>
            <param name="slot">The slot value.</param>
            <param name="item_cast_type">The itemcasttype value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Action.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the Action struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Action.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the Action struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Action.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Action.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Action.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.Action.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Action.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.AdventureData">
            <summary>
            Represents the AdventureData packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AdventureData.Unknown000">
            <summary>
            Gets or sets the unknown000 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AdventureData.Text">
            <summary>
            Gets or sets the text value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AdventureData.Timetoenter">
            <summary>
            Gets or sets the timetoenter value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AdventureData.Timeleft">
            <summary>
            Gets or sets the timeleft value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AdventureData.Risk">
            <summary>
            Gets or sets the risk value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AdventureData.X">
            <summary>
            Gets or sets the x value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AdventureData.Y">
            <summary>
            Gets or sets the y value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AdventureData.Z">
            <summary>
            Gets or sets the z value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AdventureData.Showcompass">
            <summary>
            Gets or sets the showcompass value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureData.#ctor(System.UInt32,System.Byte[],System.UInt32,System.UInt32,System.UInt32,System.Single,System.Single,System.Single,System.UInt32)">
            <summary>
            Initializes a new instance of the AdventureData struct with specified field values.
            </summary>
            <param name="unknown000">The unknown000 value.</param>
            <param name="text">The text value.</param>
            <param name="timetoenter">The timetoenter value.</param>
            <param name="timeleft">The timeleft value.</param>
            <param name="risk">The risk value.</param>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
            <param name="z">The z value.</param>
            <param name="showcompass">The showcompass value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureData.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the AdventureData struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureData.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the AdventureData struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureData.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureData.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureData.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureData.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureData.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.AdventureDetails">
            <summary>
            Represents the AdventureDetails packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AdventureDetails.Current">
            <summary>
            Gets or sets the current value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AdventureDetails.Total">
            <summary>
            Gets or sets the total value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureDetails.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the AdventureDetails struct with specified field values.
            </summary>
            <param name="current">The current value.</param>
            <param name="total">The total value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureDetails.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the AdventureDetails struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureDetails.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the AdventureDetails struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureDetails.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureDetails.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureDetails.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureDetails.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureDetails.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.AdventureFinish">
            <summary>
            Represents the AdventureFinish packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AdventureFinish.WinLose">
            <summary>
            Gets or sets the winlose value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AdventureFinish.Points">
            <summary>
            Gets or sets the points value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureFinish.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the AdventureFinish struct with specified field values.
            </summary>
            <param name="win_lose">The winlose value.</param>
            <param name="points">The points value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureFinish.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the AdventureFinish struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureFinish.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the AdventureFinish struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureFinish.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureFinish.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureFinish.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureFinish.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureFinish.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.AdventureInfo">
            <summary>
            Represents the AdventureInfo packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureInfo.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the AdventureInfo struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureInfo.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the AdventureInfo struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureInfo.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureInfo.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureInfo.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureInfo.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureInfo.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.AdventureInfoRequest">
            <summary>
            Represents the AdventureInfoRequest packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AdventureInfoRequest.EntityId">
            <summary>
            Gets or sets the entityid value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureInfoRequest.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the AdventureInfoRequest struct with specified field values.
            </summary>
            <param name="entity_id">The entityid value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureInfoRequest.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the AdventureInfoRequest struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureInfoRequest.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the AdventureInfoRequest struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureInfoRequest.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureInfoRequest.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureInfoRequest.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureInfoRequest.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureInfoRequest.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.AdventureLeaderboardReply">
            <summary>
            Represents the AdventureLeaderboardReply packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureLeaderboardReply.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the AdventureLeaderboardReply struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureLeaderboardReply.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the AdventureLeaderboardReply struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureLeaderboardReply.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureLeaderboardReply.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureLeaderboardReply.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureLeaderboardReply.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureLeaderboardReply.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.AdventureLeaderboardRequest">
            <summary>
            Represents the AdventureLeaderboardRequest packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureLeaderboardRequest.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the AdventureLeaderboardRequest struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureLeaderboardRequest.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the AdventureLeaderboardRequest struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureLeaderboardRequest.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureLeaderboardRequest.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureLeaderboardRequest.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureLeaderboardRequest.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureLeaderboardRequest.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.AdventureMerchantPurchase">
            <summary>
            Represents the AdventureMerchantPurchase packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureMerchantPurchase.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the AdventureMerchantPurchase struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureMerchantPurchase.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the AdventureMerchantPurchase struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureMerchantPurchase.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureMerchantPurchase.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureMerchantPurchase.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureMerchantPurchase.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureMerchantPurchase.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.AdventureMerchantRequest">
            <summary>
            Represents the AdventureMerchantRequest packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AdventureMerchantRequest.EntityId">
            <summary>
            Gets or sets the entityid value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureMerchantRequest.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the AdventureMerchantRequest struct with specified field values.
            </summary>
            <param name="entity_id">The entityid value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureMerchantRequest.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the AdventureMerchantRequest struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureMerchantRequest.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the AdventureMerchantRequest struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureMerchantRequest.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureMerchantRequest.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureMerchantRequest.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureMerchantRequest.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureMerchantRequest.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.AdventureMerchantResponse">
            <summary>
            Represents the AdventureMerchantResponse packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureMerchantResponse.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the AdventureMerchantResponse struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureMerchantResponse.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the AdventureMerchantResponse struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureMerchantResponse.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureMerchantResponse.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureMerchantResponse.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureMerchantResponse.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureMerchantResponse.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.AdventureMerchantSell">
            <summary>
            Represents the AdventureMerchantSell packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AdventureMerchantSell.Unknown000">
            <summary>
            Gets or sets the unknown000 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AdventureMerchantSell.Npcid">
            <summary>
            Gets or sets the npcid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AdventureMerchantSell.Slot">
            <summary>
            Gets or sets the slot value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AdventureMerchantSell.Charges">
            <summary>
            Gets or sets the charges value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AdventureMerchantSell.SellPrice">
            <summary>
            Gets or sets the sellprice value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureMerchantSell.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the AdventureMerchantSell struct with specified field values.
            </summary>
            <param name="unknown000">The unknown000 value.</param>
            <param name="npcid">The npcid value.</param>
            <param name="slot">The slot value.</param>
            <param name="charges">The charges value.</param>
            <param name="sell_price">The sellprice value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureMerchantSell.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the AdventureMerchantSell struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureMerchantSell.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the AdventureMerchantSell struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureMerchantSell.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureMerchantSell.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureMerchantSell.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureMerchantSell.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureMerchantSell.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.AdventurePointsUpdate">
            <summary>
            Represents the AdventurePointsUpdate packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AdventurePointsUpdate.LdonAvailablePoints">
            <summary>
            Gets or sets the ldonavailablepoints value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AdventurePointsUpdate.UnkownApu004">
            <summary>
            Gets or sets the unkownapu004 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AdventurePointsUpdate.LdonGukPoints">
            <summary>
            Gets or sets the ldongukpoints value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AdventurePointsUpdate.LdonMirugalPoints">
            <summary>
            Gets or sets the ldonmirugalpoints value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AdventurePointsUpdate.LdonMistmoorePoints">
            <summary>
            Gets or sets the ldonmistmoorepoints value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AdventurePointsUpdate.LdonRujarkianPoints">
            <summary>
            Gets or sets the ldonrujarkianpoints value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AdventurePointsUpdate.LdonTakishPoints">
            <summary>
            Gets or sets the ldontakishpoints value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.AdventurePointsUpdate.#ctor(System.UInt32,System.Byte[],System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the AdventurePointsUpdate struct with specified field values.
            </summary>
            <param name="ldon_available_points">The ldonavailablepoints value.</param>
            <param name="unkown_apu004">The unkownapu004 value.</param>
            <param name="ldon_guk_points">The ldongukpoints value.</param>
            <param name="ldon_mirugal_points">The ldonmirugalpoints value.</param>
            <param name="ldon_mistmoore_points">The ldonmistmoorepoints value.</param>
            <param name="ldon_rujarkian_points">The ldonrujarkianpoints value.</param>
            <param name="ldon_takish_points">The ldontakishpoints value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventurePointsUpdate.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the AdventurePointsUpdate struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventurePointsUpdate.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the AdventurePointsUpdate struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventurePointsUpdate.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventurePointsUpdate.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventurePointsUpdate.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.AdventurePointsUpdate.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventurePointsUpdate.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.AdventureRequest">
            <summary>
            Represents the AdventureRequest packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureRequest.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the AdventureRequest struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureRequest.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the AdventureRequest struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureRequest.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureRequest.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureRequest.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureRequest.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureRequest.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.AdventureStatsReply">
            <summary>
            Represents the AdventureStatsReply packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AdventureStatsReply.Success">
            <summary>
            Gets or sets the success value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AdventureStatsReply.Failure">
            <summary>
            Gets or sets the failure value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AdventureStatsReply.Rank">
            <summary>
            Gets or sets the rank value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AdventureStatsReply.Rank2">
            <summary>
            Gets or sets the rank2 value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureStatsReply.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the AdventureStatsReply struct with specified field values.
            </summary>
            <param name="success">The success value.</param>
            <param name="failure">The failure value.</param>
            <param name="rank">The rank value.</param>
            <param name="rank2">The rank2 value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureStatsReply.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the AdventureStatsReply struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureStatsReply.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the AdventureStatsReply struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureStatsReply.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureStatsReply.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureStatsReply.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureStatsReply.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureStatsReply.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.AdventureStatsRequest">
            <summary>
            Represents the AdventureStatsRequest packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AdventureStatsRequest.Success">
            <summary>
            Gets or sets the success value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AdventureStatsRequest.Failure">
            <summary>
            Gets or sets the failure value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AdventureStatsRequest.Rank">
            <summary>
            Gets or sets the rank value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AdventureStatsRequest.Rank2">
            <summary>
            Gets or sets the rank2 value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureStatsRequest.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the AdventureStatsRequest struct with specified field values.
            </summary>
            <param name="success">The success value.</param>
            <param name="failure">The failure value.</param>
            <param name="rank">The rank value.</param>
            <param name="rank2">The rank2 value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureStatsRequest.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the AdventureStatsRequest struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureStatsRequest.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the AdventureStatsRequest struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureStatsRequest.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureStatsRequest.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureStatsRequest.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureStatsRequest.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureStatsRequest.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.AdventureUpdate">
            <summary>
            Represents the AdventureUpdate packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AdventureUpdate.Current">
            <summary>
            Gets or sets the current value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AdventureUpdate.Total">
            <summary>
            Gets or sets the total value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureUpdate.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the AdventureUpdate struct with specified field values.
            </summary>
            <param name="current">The current value.</param>
            <param name="total">The total value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureUpdate.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the AdventureUpdate struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureUpdate.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the AdventureUpdate struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureUpdate.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureUpdate.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureUpdate.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureUpdate.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AdventureUpdate.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.AltCurrency">
            <summary>
            Represents the AltCurrency packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AltCurrency.Opcode">
            <summary>
            Gets or sets the opcode value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AltCurrency.Count">
            <summary>
            Gets or sets the count value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AltCurrency.Entries">
            <summary>
            Gets or sets the entries value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.AltCurrency.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the AltCurrency struct with specified field values.
            </summary>
            <param name="opcode">The opcode value.</param>
            <param name="count">The count value.</param>
            <param name="entries">The entries value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AltCurrency.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the AltCurrency struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AltCurrency.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the AltCurrency struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AltCurrency.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AltCurrency.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AltCurrency.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.AltCurrency.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AltCurrency.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.AltCurrencyMerchantReply">
            <summary>
            Represents the AltCurrencyMerchantReply packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AltCurrencyMerchantReply.MerchantEntityId">
            <summary>
            Gets or sets the merchantentityid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AltCurrencyMerchantReply.ItemId">
            <summary>
            Gets or sets the itemid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AltCurrencyMerchantReply.Unknown008">
            <summary>
            Gets or sets the unknown008 value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.AltCurrencyMerchantReply.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the AltCurrencyMerchantReply struct with specified field values.
            </summary>
            <param name="merchant_entity_id">The merchantentityid value.</param>
            <param name="item_id">The itemid value.</param>
            <param name="unknown008">The unknown008 value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AltCurrencyMerchantReply.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the AltCurrencyMerchantReply struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AltCurrencyMerchantReply.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the AltCurrencyMerchantReply struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AltCurrencyMerchantReply.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AltCurrencyMerchantReply.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AltCurrencyMerchantReply.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.AltCurrencyMerchantReply.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AltCurrencyMerchantReply.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.AltCurrencyMerchantRequest">
            <summary>
            Represents the AltCurrencyMerchantRequest packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.AltCurrencyMerchantRequest.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the AltCurrencyMerchantRequest struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AltCurrencyMerchantRequest.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the AltCurrencyMerchantRequest struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AltCurrencyMerchantRequest.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AltCurrencyMerchantRequest.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AltCurrencyMerchantRequest.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.AltCurrencyMerchantRequest.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AltCurrencyMerchantRequest.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.AltCurrencyPurchase">
            <summary>
            Represents the AltCurrencyPurchase packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AltCurrencyPurchase.MerchantEntityId">
            <summary>
            Gets or sets the merchantentityid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AltCurrencyPurchase.ItemId">
            <summary>
            Gets or sets the itemid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AltCurrencyPurchase.Unknown008">
            <summary>
            Gets or sets the unknown008 value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.AltCurrencyPurchase.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the AltCurrencyPurchase struct with specified field values.
            </summary>
            <param name="merchant_entity_id">The merchantentityid value.</param>
            <param name="item_id">The itemid value.</param>
            <param name="unknown008">The unknown008 value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AltCurrencyPurchase.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the AltCurrencyPurchase struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AltCurrencyPurchase.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the AltCurrencyPurchase struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AltCurrencyPurchase.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AltCurrencyPurchase.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AltCurrencyPurchase.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.AltCurrencyPurchase.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AltCurrencyPurchase.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.AltCurrencyReclaim">
            <summary>
            Represents the AltCurrencyReclaim packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AltCurrencyReclaim.CurrencyId">
            <summary>
            Gets or sets the currencyid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AltCurrencyReclaim.Unknown004">
            <summary>
            Gets or sets the unknown004 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AltCurrencyReclaim.Count">
            <summary>
            Gets or sets the count value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AltCurrencyReclaim.ReclaimFlag">
            <summary>
            Gets or sets the reclaimflag value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.AltCurrencyReclaim.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the AltCurrencyReclaim struct with specified field values.
            </summary>
            <param name="currency_id">The currencyid value.</param>
            <param name="unknown004">The unknown004 value.</param>
            <param name="count">The count value.</param>
            <param name="reclaim_flag">The reclaimflag value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AltCurrencyReclaim.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the AltCurrencyReclaim struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AltCurrencyReclaim.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the AltCurrencyReclaim struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AltCurrencyReclaim.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AltCurrencyReclaim.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AltCurrencyReclaim.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.AltCurrencyReclaim.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AltCurrencyReclaim.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.AltCurrencySell">
            <summary>
            Represents the AltCurrencySell packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AltCurrencySell.MerchantEntityId">
            <summary>
            Gets or sets the merchantentityid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AltCurrencySell.SlotId">
            <summary>
            Gets or sets the slotid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AltCurrencySell.Charges">
            <summary>
            Gets or sets the charges value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AltCurrencySell.Cost">
            <summary>
            Gets or sets the cost value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.AltCurrencySell.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the AltCurrencySell struct with specified field values.
            </summary>
            <param name="merchant_entity_id">The merchantentityid value.</param>
            <param name="slot_id">The slotid value.</param>
            <param name="charges">The charges value.</param>
            <param name="cost">The cost value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AltCurrencySell.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the AltCurrencySell struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AltCurrencySell.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the AltCurrencySell struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AltCurrencySell.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AltCurrencySell.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AltCurrencySell.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.AltCurrencySell.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AltCurrencySell.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.AltCurrencySellSelection">
            <summary>
            Represents the AltCurrencySellSelection packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AltCurrencySellSelection.MerchantEntityId">
            <summary>
            Gets or sets the merchantentityid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AltCurrencySellSelection.SlotId">
            <summary>
            Gets or sets the slotid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AltCurrencySellSelection.Unknown008">
            <summary>
            Gets or sets the unknown008 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AltCurrencySellSelection.Unknown012">
            <summary>
            Gets or sets the unknown012 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AltCurrencySellSelection.Unknown016">
            <summary>
            Gets or sets the unknown016 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AltCurrencySellSelection.Unknown020">
            <summary>
            Gets or sets the unknown020 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AltCurrencySellSelection.Unknown024">
            <summary>
            Gets or sets the unknown024 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AltCurrencySellSelection.Unknown028">
            <summary>
            Gets or sets the unknown028 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AltCurrencySellSelection.Unknown032">
            <summary>
            Gets or sets the unknown032 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AltCurrencySellSelection.Unknown036">
            <summary>
            Gets or sets the unknown036 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AltCurrencySellSelection.Unknown040">
            <summary>
            Gets or sets the unknown040 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AltCurrencySellSelection.Unknown044">
            <summary>
            Gets or sets the unknown044 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AltCurrencySellSelection.Unknown048">
            <summary>
            Gets or sets the unknown048 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AltCurrencySellSelection.Unknown052">
            <summary>
            Gets or sets the unknown052 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AltCurrencySellSelection.Unknown056">
            <summary>
            Gets or sets the unknown056 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AltCurrencySellSelection.Unknown060">
            <summary>
            Gets or sets the unknown060 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AltCurrencySellSelection.Unknown064">
            <summary>
            Gets or sets the unknown064 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AltCurrencySellSelection.Unknown068">
            <summary>
            Gets or sets the unknown068 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AltCurrencySellSelection.Unknown072">
            <summary>
            Gets or sets the unknown072 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AltCurrencySellSelection.Unknown076">
            <summary>
            Gets or sets the unknown076 value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.AltCurrencySellSelection.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the AltCurrencySellSelection struct with specified field values.
            </summary>
            <param name="merchant_entity_id">The merchantentityid value.</param>
            <param name="slot_id">The slotid value.</param>
            <param name="unknown008">The unknown008 value.</param>
            <param name="unknown012">The unknown012 value.</param>
            <param name="unknown016">The unknown016 value.</param>
            <param name="unknown020">The unknown020 value.</param>
            <param name="unknown024">The unknown024 value.</param>
            <param name="unknown028">The unknown028 value.</param>
            <param name="unknown032">The unknown032 value.</param>
            <param name="unknown036">The unknown036 value.</param>
            <param name="unknown040">The unknown040 value.</param>
            <param name="unknown044">The unknown044 value.</param>
            <param name="unknown048">The unknown048 value.</param>
            <param name="unknown052">The unknown052 value.</param>
            <param name="unknown056">The unknown056 value.</param>
            <param name="unknown060">The unknown060 value.</param>
            <param name="unknown064">The unknown064 value.</param>
            <param name="unknown068">The unknown068 value.</param>
            <param name="unknown072">The unknown072 value.</param>
            <param name="unknown076">The unknown076 value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AltCurrencySellSelection.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the AltCurrencySellSelection struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AltCurrencySellSelection.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the AltCurrencySellSelection struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AltCurrencySellSelection.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AltCurrencySellSelection.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AltCurrencySellSelection.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.AltCurrencySellSelection.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AltCurrencySellSelection.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.Animation">
            <summary>
            Represents the Animation packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.Animation.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.ApplyPoison">
            <summary>
            Represents the ApplyPoison packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ApplyPoison.Inventoryslot">
            <summary>
            Gets or sets the inventoryslot value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ApplyPoison.Success">
            <summary>
            Gets or sets the success value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.ApplyPoison.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the ApplyPoison struct with specified field values.
            </summary>
            <param name="inventorySlot">The inventoryslot value.</param>
            <param name="success">The success value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ApplyPoison.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the ApplyPoison struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ApplyPoison.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the ApplyPoison struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ApplyPoison.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ApplyPoison.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ApplyPoison.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.ApplyPoison.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ApplyPoison.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.Assist">
            <summary>
            Represents the Assist packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Assist.EntityId">
            <summary>
            Gets or sets the entityid value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.Assist.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the Assist struct with specified field values.
            </summary>
            <param name="entity_id">The entityid value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Assist.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the Assist struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Assist.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the Assist struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Assist.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Assist.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Assist.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.Assist.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Assist.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.AssistGroup">
            <summary>
            Represents the AssistGroup packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AssistGroup.EntityId">
            <summary>
            Gets or sets the entityid value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.AssistGroup.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the AssistGroup struct with specified field values.
            </summary>
            <param name="entity_id">The entityid value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AssistGroup.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the AssistGroup struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AssistGroup.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the AssistGroup struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AssistGroup.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AssistGroup.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AssistGroup.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.AssistGroup.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AssistGroup.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.AugmentInfo">
            <summary>
            Represents the AugmentInfo packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AugmentInfo.Itemid">
            <summary>
            Gets or sets the itemid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AugmentInfo.Window">
            <summary>
            Gets or sets the window value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AugmentInfo.AugmentInfoValue">
            <summary>
            Gets or sets the augmentinfovalue value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AugmentInfo.Unknown072">
            <summary>
            Gets or sets the unknown072 value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.AugmentInfo.#ctor(System.UInt32,System.UInt32,System.Byte[],System.UInt32)">
            <summary>
            Initializes a new instance of the AugmentInfo struct with specified field values.
            </summary>
            <param name="itemid">The itemid value.</param>
            <param name="window">The window value.</param>
            <param name="augment_info">The augmentinfovalue value.</param>
            <param name="unknown072">The unknown072 value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AugmentInfo.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the AugmentInfo struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AugmentInfo.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the AugmentInfo struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AugmentInfo.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AugmentInfo.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AugmentInfo.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.AugmentInfo.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AugmentInfo.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.AugmentItem">
            <summary>
            Represents the AugmentItem packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AugmentItem.ContainerSlot">
            <summary>
            Gets or sets the containerslot value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AugmentItem.Unknown02">
            <summary>
            Gets or sets the unknown02 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.AugmentItem.AugmentSlot">
            <summary>
            Gets or sets the augmentslot value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.AugmentItem.#ctor(System.Int16,System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the AugmentItem struct with specified field values.
            </summary>
            <param name="container_slot">The containerslot value.</param>
            <param name="unknown02">The unknown02 value.</param>
            <param name="augment_slot">The augmentslot value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AugmentItem.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the AugmentItem struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AugmentItem.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the AugmentItem struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AugmentItem.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AugmentItem.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AugmentItem.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.AugmentItem.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AugmentItem.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.AutoAttack">
            <summary>
            Represents the AutoAttack packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.AutoAttack.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the AutoAttack struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AutoAttack.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the AutoAttack struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AutoAttack.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AutoAttack.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AutoAttack.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.AutoAttack.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AutoAttack.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.AutoAttack2">
            <summary>
            Represents the AutoAttack2 packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.AutoAttack2.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the AutoAttack2 struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AutoAttack2.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the AutoAttack2 struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AutoAttack2.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AutoAttack2.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AutoAttack2.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.AutoAttack2.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AutoAttack2.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.AutoFire">
            <summary>
            Represents the AutoFire packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.AutoFire.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the AutoFire struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AutoFire.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the AutoFire struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AutoFire.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AutoFire.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AutoFire.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.AutoFire.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.AutoFire.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.Bandolier">
            <summary>
            Represents the Bandolier packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="T:OpenEQ.Netcode.BankerChange">
            <summary>
            Represents the BankerChange packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.BankerChange.Platinum">
            <summary>
            Gets or sets the platinum value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.BankerChange.Gold">
            <summary>
            Gets or sets the gold value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.BankerChange.Silver">
            <summary>
            Gets or sets the silver value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.BankerChange.Copper">
            <summary>
            Gets or sets the copper value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.BankerChange.PlatinumBank">
            <summary>
            Gets or sets the platinumbank value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.BankerChange.GoldBank">
            <summary>
            Gets or sets the goldbank value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.BankerChange.SilverBank">
            <summary>
            Gets or sets the silverbank value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.BankerChange.CopperBank">
            <summary>
            Gets or sets the copperbank value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.BankerChange.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the BankerChange struct with specified field values.
            </summary>
            <param name="platinum">The platinum value.</param>
            <param name="gold">The gold value.</param>
            <param name="silver">The silver value.</param>
            <param name="copper">The copper value.</param>
            <param name="platinum_bank">The platinumbank value.</param>
            <param name="gold_bank">The goldbank value.</param>
            <param name="silver_bank">The silverbank value.</param>
            <param name="copper_bank">The copperbank value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.BankerChange.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the BankerChange struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.BankerChange.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the BankerChange struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.BankerChange.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.BankerChange.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.BankerChange.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.BankerChange.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.BankerChange.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.Barter">
            <summary>
            Represents the Barter packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.Barter.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the Barter struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Barter.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the Barter struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Barter.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Barter.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Barter.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.Barter.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Barter.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.BazaarSearch">
            <summary>
            Represents the BazaarSearch packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.BazaarSearch.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the BazaarSearch struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.BazaarSearch.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the BazaarSearch struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.BazaarSearch.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.BazaarSearch.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.BazaarSearch.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.BazaarSearch.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.BazaarSearch.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.BecomeTrader">
            <summary>
            Represents the BecomeTrader packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.BecomeTrader.EntityId">
            <summary>
            Gets or sets the entityid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.BecomeTrader.Action">
            <summary>
            Gets or sets the action value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.BecomeTrader.TraderName">
            <summary>
            Gets or sets the tradername value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.BecomeTrader.#ctor(System.UInt32,System.UInt32,System.Byte[])">
            <summary>
            Initializes a new instance of the BecomeTrader struct with specified field values.
            </summary>
            <param name="entity_id">The entityid value.</param>
            <param name="action">The action value.</param>
            <param name="trader_name">The tradername value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.BecomeTrader.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the BecomeTrader struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.BecomeTrader.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the BecomeTrader struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.BecomeTrader.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.BecomeTrader.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.BecomeTrader.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.BecomeTrader.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.BecomeTrader.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.Begging">
            <summary>
            Represents the Begging packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Begging.Unknown00">
            <summary>
            Gets or sets the unknown00 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Begging.Unknown04">
            <summary>
            Gets or sets the unknown04 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Begging.Unknown08">
            <summary>
            Gets or sets the unknown08 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Begging.Result">
            <summary>
            Gets or sets the result value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Begging.Amount">
            <summary>
            Gets or sets the amount value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.Begging.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the Begging struct with specified field values.
            </summary>
            <param name="Unknown00">The unknown00 value.</param>
            <param name="Unknown04">The unknown04 value.</param>
            <param name="Unknown08">The unknown08 value.</param>
            <param name="Result">The result value.</param>
            <param name="Amount">The amount value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Begging.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the Begging struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Begging.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the Begging struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Begging.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Begging.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Begging.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.Begging.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Begging.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.BeginCast">
            <summary>
            Represents the BeginCast packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.BeginCast.CasterId">
            <summary>
            Gets or sets the casterid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.BeginCast.SpellId">
            <summary>
            Gets or sets the spellid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.BeginCast.CastTime">
            <summary>
            Gets or sets the casttime value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.BeginCast.#ctor(System.UInt16,System.UInt16,System.UInt32)">
            <summary>
            Initializes a new instance of the BeginCast struct with specified field values.
            </summary>
            <param name="caster_id">The casterid value.</param>
            <param name="spell_id">The spellid value.</param>
            <param name="cast_time">The casttime value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.BeginCast.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the BeginCast struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.BeginCast.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the BeginCast struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.BeginCast.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.BeginCast.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.BeginCast.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.BeginCast.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.BeginCast.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.BindWound">
            <summary>
            Represents the BindWound packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.BindWound.To">
            <summary>
            Gets or sets the to value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.BindWound.Unknown2">
            <summary>
            Gets or sets the unknown2 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.BindWound.Type">
            <summary>
            Gets or sets the type value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.BindWound.Unknown6">
            <summary>
            Gets or sets the unknown6 value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.BindWound.#ctor(System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Initializes a new instance of the BindWound struct with specified field values.
            </summary>
            <param name="to">The to value.</param>
            <param name="unknown2">The unknown2 value.</param>
            <param name="type">The type value.</param>
            <param name="unknown6">The unknown6 value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.BindWound.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the BindWound struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.BindWound.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the BindWound struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.BindWound.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.BindWound.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.BindWound.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.BindWound.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.BindWound.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.BlockedBuffs">
            <summary>
            Represents the BlockedBuffs packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.BlockedBuffs.Unknown000">
            <summary>
            Gets or sets the unknown000 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.BlockedBuffs.Unknown081">
            <summary>
            Gets or sets the unknown081 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.BlockedBuffs.Unknown082">
            <summary>
            Gets or sets the unknown082 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.BlockedBuffs.Unknown083">
            <summary>
            Gets or sets the unknown083 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.BlockedBuffs.Unknown084">
            <summary>
            Gets or sets the unknown084 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.BlockedBuffs.Unknown085">
            <summary>
            Gets or sets the unknown085 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.BlockedBuffs.Unknown086">
            <summary>
            Gets or sets the unknown086 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.BlockedBuffs.Unknown087">
            <summary>
            Gets or sets the unknown087 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.BlockedBuffs.Unknown088">
            <summary>
            Gets or sets the unknown088 value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.BlockedBuffs.#ctor(System.Byte[],System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the BlockedBuffs struct with specified field values.
            </summary>
            <param name="unknown000">The unknown000 value.</param>
            <param name="unknown081">The unknown081 value.</param>
            <param name="unknown082">The unknown082 value.</param>
            <param name="unknown083">The unknown083 value.</param>
            <param name="unknown084">The unknown084 value.</param>
            <param name="unknown085">The unknown085 value.</param>
            <param name="unknown086">The unknown086 value.</param>
            <param name="unknown087">The unknown087 value.</param>
            <param name="unknown088">The unknown088 value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.BlockedBuffs.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the BlockedBuffs struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.BlockedBuffs.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the BlockedBuffs struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.BlockedBuffs.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.BlockedBuffs.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.BlockedBuffs.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.BlockedBuffs.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.BlockedBuffs.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.BoardBoat">
            <summary>
            Represents the BoardBoat packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.BoardBoat.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the BoardBoat struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.BoardBoat.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the BoardBoat struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.BoardBoat.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.BoardBoat.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.BoardBoat.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.BoardBoat.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.BoardBoat.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.Buff">
            <summary>
            Represents the Buff packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.Buff.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.BuffCreate">
            <summary>
            Represents the BuffCreate packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.BuffCreate.EntityId">
            <summary>
            Gets or sets the entityid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.BuffCreate.Unknown004">
            <summary>
            Gets or sets the unknown004 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.BuffCreate.AllBuffs">
            <summary>
            Gets or sets the allbuffs value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.BuffCreate.Count">
            <summary>
            Gets or sets the count value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.BuffCreate.Entires">
            <summary>
            Gets or sets the entires value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.BuffCreate.#ctor(System.UInt32,System.UInt32,System.Byte,System.UInt16,System.UInt32)">
            <summary>
            Initializes a new instance of the BuffCreate struct with specified field values.
            </summary>
            <param name="entity_id">The entityid value.</param>
            <param name="unknown004">The unknown004 value.</param>
            <param name="all_buffs">The allbuffs value.</param>
            <param name="count">The count value.</param>
            <param name="entires">The entires value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.BuffCreate.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the BuffCreate struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.BuffCreate.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the BuffCreate struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.BuffCreate.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.BuffCreate.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.BuffCreate.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.BuffCreate.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.BuffCreate.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.BuffRemoveRequest">
            <summary>
            Represents the BuffRemoveRequest packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.BuffRemoveRequest.Slotid">
            <summary>
            Gets or sets the slotid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.BuffRemoveRequest.Entityid">
            <summary>
            Gets or sets the entityid value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.BuffRemoveRequest.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the BuffRemoveRequest struct with specified field values.
            </summary>
            <param name="SlotID">The slotid value.</param>
            <param name="EntityID">The entityid value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.BuffRemoveRequest.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the BuffRemoveRequest struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.BuffRemoveRequest.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the BuffRemoveRequest struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.BuffRemoveRequest.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.BuffRemoveRequest.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.BuffRemoveRequest.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.BuffRemoveRequest.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.BuffRemoveRequest.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.Bug">
            <summary>
            Represents the Bug packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.Bug.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the Bug struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Bug.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the Bug struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Bug.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Bug.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Bug.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.Bug.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Bug.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.CameraEffect">
            <summary>
            Represents the CameraEffect packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.CameraEffect.Duration">
            <summary>
            Gets or sets the duration value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.CameraEffect.Intensity">
            <summary>
            Gets or sets the intensity value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.CameraEffect.#ctor(System.UInt32,System.Single)">
            <summary>
            Initializes a new instance of the CameraEffect struct with specified field values.
            </summary>
            <param name="duration">The duration value.</param>
            <param name="intensity">The intensity value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CameraEffect.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the CameraEffect struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CameraEffect.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the CameraEffect struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CameraEffect.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CameraEffect.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CameraEffect.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.CameraEffect.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CameraEffect.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.Camp">
            <summary>
            Represents the Camp packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Camp.CategoryId">
            <summary>
            Gets or sets the categoryid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Camp.CategoryName">
            <summary>
            Gets or sets the categoryname value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Camp.ReporterName">
            <summary>
            Gets or sets the reportername value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Camp.Unused0132">
            <summary>
            Gets or sets the unused0132 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Camp.UiPath">
            <summary>
            Gets or sets the uipath value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Camp.PosX">
            <summary>
            Gets or sets the posx value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Camp.PosY">
            <summary>
            Gets or sets the posy value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Camp.PosZ">
            <summary>
            Gets or sets the posz value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Camp.Heading">
            <summary>
            Gets or sets the heading value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Camp.Unused0308">
            <summary>
            Gets or sets the unused0308 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Camp.TimePlayed">
            <summary>
            Gets or sets the timeplayed value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Camp.TargetId">
            <summary>
            Gets or sets the targetid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Camp.TargetName">
            <summary>
            Gets or sets the targetname value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Camp.OptionalInfoMask">
            <summary>
            Gets or sets the optionalinfomask value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Camp.Unused0540">
            <summary>
            Gets or sets the unused0540 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Camp.BugReport">
            <summary>
            Gets or sets the bugreport value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Camp.SystemInfo">
            <summary>
            Gets or sets the systeminfo value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.Camp.#ctor(System.UInt32,System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Single,System.Single,System.Single,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Byte[],System.UInt32,System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the Camp struct with specified field values.
            </summary>
            <param name="category_id">The categoryid value.</param>
            <param name="category_name">The categoryname value.</param>
            <param name="reporter_name">The reportername value.</param>
            <param name="unused_0132">The unused0132 value.</param>
            <param name="ui_path">The uipath value.</param>
            <param name="pos_x">The posx value.</param>
            <param name="pos_y">The posy value.</param>
            <param name="pos_z">The posz value.</param>
            <param name="heading">The heading value.</param>
            <param name="unused_0308">The unused0308 value.</param>
            <param name="time_played">The timeplayed value.</param>
            <param name="target_id">The targetid value.</param>
            <param name="target_name">The targetname value.</param>
            <param name="optional_info_mask">The optionalinfomask value.</param>
            <param name="unused_0540">The unused0540 value.</param>
            <param name="bug_report">The bugreport value.</param>
            <param name="system_info">The systeminfo value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Camp.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the Camp struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Camp.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the Camp struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Camp.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Camp.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Camp.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.Camp.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Camp.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.CancelSneakHide">
            <summary>
            Represents the CancelSneakHide packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.CancelSneakHide.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the CancelSneakHide struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CancelSneakHide.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the CancelSneakHide struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CancelSneakHide.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CancelSneakHide.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CancelSneakHide.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.CancelSneakHide.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CancelSneakHide.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.CancelTask">
            <summary>
            Represents the CancelTask packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.CancelTask.Sequencenumber">
            <summary>
            Gets or sets the sequencenumber value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.CancelTask.Unknown4">
            <summary>
            Gets or sets the unknown4 value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.CancelTask.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the CancelTask struct with specified field values.
            </summary>
            <param name="SequenceNumber">The sequencenumber value.</param>
            <param name="unknown4">The unknown4 value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CancelTask.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the CancelTask struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CancelTask.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the CancelTask struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CancelTask.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CancelTask.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CancelTask.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.CancelTask.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CancelTask.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.CancelTrade">
            <summary>
            Represents the CancelTrade packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.CancelTrade.Fromid">
            <summary>
            Gets or sets the fromid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.CancelTrade.Action">
            <summary>
            Gets or sets the action value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.CancelTrade.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the CancelTrade struct with specified field values.
            </summary>
            <param name="fromid">The fromid value.</param>
            <param name="action">The action value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CancelTrade.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the CancelTrade struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CancelTrade.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the CancelTrade struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CancelTrade.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CancelTrade.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CancelTrade.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.CancelTrade.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CancelTrade.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.CashReward">
            <summary>
            Represents the CashReward packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.CashReward.Copper">
            <summary>
            Gets or sets the copper value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.CashReward.Silver">
            <summary>
            Gets or sets the silver value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.CashReward.Gold">
            <summary>
            Gets or sets the gold value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.CashReward.Platinum">
            <summary>
            Gets or sets the platinum value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.CashReward.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the CashReward struct with specified field values.
            </summary>
            <param name="copper">The copper value.</param>
            <param name="silver">The silver value.</param>
            <param name="gold">The gold value.</param>
            <param name="platinum">The platinum value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CashReward.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the CashReward struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CashReward.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the CashReward struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CashReward.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CashReward.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CashReward.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.CashReward.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CashReward.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.CastSpell">
            <summary>
            Represents the CastSpell packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.CastSpell.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.ChangeSize">
            <summary>
            Represents the ChangeSize packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ChangeSize.Entityid">
            <summary>
            Gets or sets the entityid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ChangeSize.Size">
            <summary>
            Gets or sets the size value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ChangeSize.Unknown08">
            <summary>
            Gets or sets the unknown08 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ChangeSize.Unknown12">
            <summary>
            Gets or sets the unknown12 value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.ChangeSize.#ctor(System.UInt32,System.Single,System.UInt32,System.Single)">
            <summary>
            Initializes a new instance of the ChangeSize struct with specified field values.
            </summary>
            <param name="EntityID">The entityid value.</param>
            <param name="Size">The size value.</param>
            <param name="Unknown08">The unknown08 value.</param>
            <param name="Unknown12">The unknown12 value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ChangeSize.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the ChangeSize struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ChangeSize.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the ChangeSize struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ChangeSize.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ChangeSize.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ChangeSize.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.ChangeSize.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ChangeSize.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.ChannelMessage">
            <summary>
            Represents the ChannelMessage packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="T:OpenEQ.Netcode.CharInventory">
            <summary>
            Represents the CharInventory packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.CharInventory.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the CharInventory struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CharInventory.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the CharInventory struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CharInventory.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CharInventory.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CharInventory.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.CharInventory.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CharInventory.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.Charm">
            <summary>
            Represents the Charm packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Charm.OwnerId">
            <summary>
            Gets or sets the ownerid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Charm.PetId">
            <summary>
            Gets or sets the petid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Charm.Command">
            <summary>
            Gets or sets the command value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.Charm.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the Charm struct with specified field values.
            </summary>
            <param name="owner_id">The ownerid value.</param>
            <param name="pet_id">The petid value.</param>
            <param name="command">The command value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Charm.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the Charm struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Charm.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the Charm struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Charm.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Charm.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Charm.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.Charm.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Charm.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.ClearAA">
            <summary>
            Represents the ClearAA packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.ClearAA.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the ClearAA struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ClearAA.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the ClearAA struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ClearAA.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ClearAA.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ClearAA.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.ClearAA.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ClearAA.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.ClearBlockedBuffs">
            <summary>
            Represents the ClearBlockedBuffs packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.ClearBlockedBuffs.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the ClearBlockedBuffs struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ClearBlockedBuffs.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the ClearBlockedBuffs struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ClearBlockedBuffs.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ClearBlockedBuffs.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ClearBlockedBuffs.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.ClearBlockedBuffs.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ClearBlockedBuffs.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.ClearLeadershipAbilities">
            <summary>
            Represents the ClearLeadershipAbilities packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.ClearLeadershipAbilities.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the ClearLeadershipAbilities struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ClearLeadershipAbilities.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the ClearLeadershipAbilities struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ClearLeadershipAbilities.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ClearLeadershipAbilities.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ClearLeadershipAbilities.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.ClearLeadershipAbilities.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ClearLeadershipAbilities.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.ClearNPCMarks">
            <summary>
            Represents the ClearNPCMarks packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.ClearNPCMarks.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the ClearNPCMarks struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ClearNPCMarks.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the ClearNPCMarks struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ClearNPCMarks.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ClearNPCMarks.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ClearNPCMarks.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.ClearNPCMarks.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ClearNPCMarks.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.ClearObject">
            <summary>
            Represents the ClearObject packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ClearObject.Clear">
            <summary>
            Gets or sets the clear value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ClearObject.Unknown001">
            <summary>
            Gets or sets the unknown001 value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.ClearObject.#ctor(System.Byte,System.Byte[])">
            <summary>
            Initializes a new instance of the ClearObject struct with specified field values.
            </summary>
            <param name="Clear">The clear value.</param>
            <param name="Unknown001">The unknown001 value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ClearObject.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the ClearObject struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ClearObject.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the ClearObject struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ClearObject.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ClearObject.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ClearObject.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.ClearObject.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ClearObject.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.ClearRaidNPCMarks">
            <summary>
            Represents the ClearRaidNPCMarks packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.ClearRaidNPCMarks.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the ClearRaidNPCMarks struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ClearRaidNPCMarks.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the ClearRaidNPCMarks struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ClearRaidNPCMarks.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ClearRaidNPCMarks.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ClearRaidNPCMarks.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.ClearRaidNPCMarks.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ClearRaidNPCMarks.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.ClearSurname">
            <summary>
            Represents the ClearSurname packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.ClearSurname.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the ClearSurname struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ClearSurname.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the ClearSurname struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ClearSurname.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ClearSurname.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ClearSurname.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.ClearSurname.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ClearSurname.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.ClickDoor">
            <summary>
            Represents the ClickDoor packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ClickDoor.Doorid">
            <summary>
            Gets or sets the doorid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ClickDoor.Unknown001">
            <summary>
            Gets or sets the unknown001 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ClickDoor.Unknown002">
            <summary>
            Gets or sets the unknown002 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ClickDoor.Unknown003">
            <summary>
            Gets or sets the unknown003 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ClickDoor.Picklockskill">
            <summary>
            Gets or sets the picklockskill value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ClickDoor.Unknown005">
            <summary>
            Gets or sets the unknown005 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ClickDoor.ItemId">
            <summary>
            Gets or sets the itemid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ClickDoor.PlayerId">
            <summary>
            Gets or sets the playerid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ClickDoor.Unknown014">
            <summary>
            Gets or sets the unknown014 value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.ClickDoor.#ctor(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte[],System.UInt32,System.UInt16,System.Byte[])">
            <summary>
            Initializes a new instance of the ClickDoor struct with specified field values.
            </summary>
            <param name="doorid">The doorid value.</param>
            <param name="unknown001">The unknown001 value.</param>
            <param name="unknown002">The unknown002 value.</param>
            <param name="unknown003">The unknown003 value.</param>
            <param name="picklockskill">The picklockskill value.</param>
            <param name="unknown005">The unknown005 value.</param>
            <param name="item_id">The itemid value.</param>
            <param name="player_id">The playerid value.</param>
            <param name="unknown014">The unknown014 value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ClickDoor.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the ClickDoor struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ClickDoor.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the ClickDoor struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ClickDoor.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ClickDoor.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ClickDoor.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.ClickDoor.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ClickDoor.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.ClickObject">
            <summary>
            Represents the ClickObject packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ClickObject.DropId">
            <summary>
            Gets or sets the dropid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ClickObject.PlayerId">
            <summary>
            Gets or sets the playerid value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.ClickObject.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the ClickObject struct with specified field values.
            </summary>
            <param name="drop_id">The dropid value.</param>
            <param name="player_id">The playerid value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ClickObject.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the ClickObject struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ClickObject.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the ClickObject struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ClickObject.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ClickObject.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ClickObject.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.ClickObject.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ClickObject.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.ClickObjectAction">
            <summary>
            Represents the ClickObjectAction packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ClickObjectAction.PlayerId">
            <summary>
            Gets or sets the playerid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ClickObjectAction.DropId">
            <summary>
            Gets or sets the dropid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ClickObjectAction.Open">
            <summary>
            Gets or sets the open value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ClickObjectAction.Type">
            <summary>
            Gets or sets the type value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ClickObjectAction.Unknown16">
            <summary>
            Gets or sets the unknown16 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ClickObjectAction.Icon">
            <summary>
            Gets or sets the icon value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ClickObjectAction.Unknown24">
            <summary>
            Gets or sets the unknown24 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ClickObjectAction.ObjectName">
            <summary>
            Gets or sets the objectname value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.ClickObjectAction.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Byte[])">
            <summary>
            Initializes a new instance of the ClickObjectAction struct with specified field values.
            </summary>
            <param name="player_id">The playerid value.</param>
            <param name="drop_id">The dropid value.</param>
            <param name="open">The open value.</param>
            <param name="type">The type value.</param>
            <param name="unknown16">The unknown16 value.</param>
            <param name="icon">The icon value.</param>
            <param name="unknown24">The unknown24 value.</param>
            <param name="object_name">The objectname value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ClickObjectAction.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the ClickObjectAction struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ClickObjectAction.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the ClickObjectAction struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ClickObjectAction.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ClickObjectAction.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ClickObjectAction.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.ClickObjectAction.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ClickObjectAction.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.ClientReady">
            <summary>
            Represents the ClientReady packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ClientReady.Type">
            <summary>
            Gets or sets the type value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ClientReady.CharacterName">
            <summary>
            Gets or sets the charactername value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ClientReady.Unknown134">
            <summary>
            Gets or sets the unknown134 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ClientReady.Message">
            <summary>
            Gets or sets the message value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.ClientReady.#ctor(System.Byte,System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the ClientReady struct with specified field values.
            </summary>
            <param name="type">The type value.</param>
            <param name="character_name">The charactername value.</param>
            <param name="unknown134">The unknown134 value.</param>
            <param name="message">The message value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ClientReady.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the ClientReady struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ClientReady.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the ClientReady struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ClientReady.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ClientReady.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ClientReady.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.ClientReady.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ClientReady.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.ClientUpdateFromServer">
            <summary>
            Represents the ClientUpdate packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="T:OpenEQ.Netcode.ClientUpdateToServer">
            <summary>
            Represents the ClientUpdate packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="T:OpenEQ.Netcode.ColoredText">
            <summary>
            Represents the ColoredText packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ColoredText.Color">
            <summary>
            Gets or sets the color value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ColoredText.Msg">
            <summary>
            Gets or sets the msg value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ColoredText.Paddingxxx">
            <summary>
            Gets or sets the paddingxxx value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.ColoredText.#ctor(System.UInt32,System.Byte,System.Byte[])">
            <summary>
            Initializes a new instance of the ColoredText struct with specified field values.
            </summary>
            <param name="color">The color value.</param>
            <param name="msg">The msg value.</param>
            <param name="paddingXXX">The paddingxxx value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ColoredText.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the ColoredText struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ColoredText.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the ColoredText struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ColoredText.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ColoredText.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ColoredText.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.ColoredText.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ColoredText.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.CombatAbility">
            <summary>
            Represents the CombatAbility packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.CombatAbility.MTarget">
            <summary>
            Gets or sets the mtarget value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.CombatAbility.MAtk">
            <summary>
            Gets or sets the matk value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.CombatAbility.MSkill">
            <summary>
            Gets or sets the mskill value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.CombatAbility.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the CombatAbility struct with specified field values.
            </summary>
            <param name="m_target">The mtarget value.</param>
            <param name="m_atk">The matk value.</param>
            <param name="m_skill">The mskill value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CombatAbility.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the CombatAbility struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CombatAbility.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the CombatAbility struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CombatAbility.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CombatAbility.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CombatAbility.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.CombatAbility.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CombatAbility.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.CompletedTasks">
            <summary>
            Represents the CompletedTasks packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.CompletedTasks.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the CompletedTasks struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CompletedTasks.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the CompletedTasks struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CompletedTasks.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CompletedTasks.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CompletedTasks.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.CompletedTasks.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CompletedTasks.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.ConfirmDelete">
            <summary>
            Represents the ConfirmDelete packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ConfirmDelete.MTarget">
            <summary>
            Gets or sets the mtarget value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ConfirmDelete.MAtk">
            <summary>
            Gets or sets the matk value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ConfirmDelete.MSkill">
            <summary>
            Gets or sets the mskill value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.ConfirmDelete.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the ConfirmDelete struct with specified field values.
            </summary>
            <param name="m_target">The mtarget value.</param>
            <param name="m_atk">The matk value.</param>
            <param name="m_skill">The mskill value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ConfirmDelete.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the ConfirmDelete struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ConfirmDelete.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the ConfirmDelete struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ConfirmDelete.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ConfirmDelete.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ConfirmDelete.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.ConfirmDelete.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ConfirmDelete.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.Consent">
            <summary>
            Represents the Consent packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.Consent.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the Consent struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Consent.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the Consent struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Consent.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Consent.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Consent.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.Consent.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Consent.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.ConsentDeny">
            <summary>
            Represents the ConsentDeny packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ConsentDeny.Name">
            <summary>
            Gets or sets the name value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.ConsentDeny.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the ConsentDeny struct with specified field values.
            </summary>
            <param name="name">The name value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ConsentDeny.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the ConsentDeny struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ConsentDeny.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the ConsentDeny struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ConsentDeny.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ConsentDeny.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ConsentDeny.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.ConsentDeny.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ConsentDeny.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.ConsentResponse">
            <summary>
            Represents the ConsentResponse packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ConsentResponse.Grantname">
            <summary>
            Gets or sets the grantname value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ConsentResponse.Ownername">
            <summary>
            Gets or sets the ownername value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ConsentResponse.Permission">
            <summary>
            Gets or sets the permission value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ConsentResponse.Zonename">
            <summary>
            Gets or sets the zonename value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.ConsentResponse.#ctor(System.Byte[],System.Byte[],System.Byte,System.Byte[])">
            <summary>
            Initializes a new instance of the ConsentResponse struct with specified field values.
            </summary>
            <param name="grantname">The grantname value.</param>
            <param name="ownername">The ownername value.</param>
            <param name="permission">The permission value.</param>
            <param name="zonename">The zonename value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ConsentResponse.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the ConsentResponse struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ConsentResponse.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the ConsentResponse struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ConsentResponse.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ConsentResponse.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ConsentResponse.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.ConsentResponse.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ConsentResponse.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.Consider">
            <summary>
            Represents the Consider packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="T:OpenEQ.Netcode.ConsiderCorpse">
            <summary>
            Represents the ConsiderCorpse packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.ConsiderCorpse.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the ConsiderCorpse struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ConsiderCorpse.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the ConsiderCorpse struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ConsiderCorpse.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ConsiderCorpse.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ConsiderCorpse.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.ConsiderCorpse.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ConsiderCorpse.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.Consume">
            <summary>
            Represents the Consume packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Consume.Slot">
            <summary>
            Gets or sets the slot value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Consume.AutoConsumed">
            <summary>
            Gets or sets the autoconsumed value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Consume.CUnknown1">
            <summary>
            Gets or sets the cunknown1 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Consume.Type">
            <summary>
            Gets or sets the type value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Consume.Unknown13">
            <summary>
            Gets or sets the unknown13 value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.Consume.#ctor(System.UInt32,System.UInt32,System.Byte[],System.Byte,System.Byte[])">
            <summary>
            Initializes a new instance of the Consume struct with specified field values.
            </summary>
            <param name="slot">The slot value.</param>
            <param name="auto_consumed">The autoconsumed value.</param>
            <param name="c_unknown1">The cunknown1 value.</param>
            <param name="type">The type value.</param>
            <param name="unknown13">The unknown13 value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Consume.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the Consume struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Consume.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the Consume struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Consume.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Consume.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Consume.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.Consume.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Consume.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.ControlBoat">
            <summary>
            Represents the ControlBoat packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ControlBoat.Food">
            <summary>
            Gets or sets the food value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ControlBoat.Water">
            <summary>
            Gets or sets the water value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.ControlBoat.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the ControlBoat struct with specified field values.
            </summary>
            <param name="food">The food value.</param>
            <param name="water">The water value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ControlBoat.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the ControlBoat struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ControlBoat.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the ControlBoat struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ControlBoat.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ControlBoat.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ControlBoat.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.ControlBoat.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ControlBoat.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.CorpseDrag">
            <summary>
            Represents the CorpseDrag packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.CorpseDrag.Corpsename">
            <summary>
            Gets or sets the corpsename value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.CorpseDrag.Draggername">
            <summary>
            Gets or sets the draggername value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.CorpseDrag.Unknown128">
            <summary>
            Gets or sets the unknown128 value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.CorpseDrag.#ctor(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the CorpseDrag struct with specified field values.
            </summary>
            <param name="CorpseName">The corpsename value.</param>
            <param name="DraggerName">The draggername value.</param>
            <param name="Unknown128">The unknown128 value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CorpseDrag.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the CorpseDrag struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CorpseDrag.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the CorpseDrag struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CorpseDrag.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CorpseDrag.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CorpseDrag.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.CorpseDrag.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CorpseDrag.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.CorpseDrop">
            <summary>
            Represents the CorpseDrop packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.CorpseDrop.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the CorpseDrop struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CorpseDrop.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the CorpseDrop struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CorpseDrop.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CorpseDrop.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CorpseDrop.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.CorpseDrop.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CorpseDrop.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.CrystalCountUpdate">
            <summary>
            Represents the CrystalCountUpdate packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.CrystalCountUpdate.Currentradiantcrystals">
            <summary>
            Gets or sets the currentradiantcrystals value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.CrystalCountUpdate.Currenteboncrystals">
            <summary>
            Gets or sets the currenteboncrystals value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.CrystalCountUpdate.Careerradiantcrystals">
            <summary>
            Gets or sets the careerradiantcrystals value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.CrystalCountUpdate.Careereboncrystals">
            <summary>
            Gets or sets the careereboncrystals value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.CrystalCountUpdate.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the CrystalCountUpdate struct with specified field values.
            </summary>
            <param name="CurrentRadiantCrystals">The currentradiantcrystals value.</param>
            <param name="CurrentEbonCrystals">The currenteboncrystals value.</param>
            <param name="CareerRadiantCrystals">The careerradiantcrystals value.</param>
            <param name="CareerEbonCrystals">The careereboncrystals value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CrystalCountUpdate.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the CrystalCountUpdate struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CrystalCountUpdate.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the CrystalCountUpdate struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CrystalCountUpdate.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CrystalCountUpdate.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CrystalCountUpdate.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.CrystalCountUpdate.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CrystalCountUpdate.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.CrystalCreate">
            <summary>
            Represents the CrystalCreate packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.CrystalCreate.Type">
            <summary>
            Gets or sets the type value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.CrystalCreate.Amount">
            <summary>
            Gets or sets the amount value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.CrystalCreate.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the CrystalCreate struct with specified field values.
            </summary>
            <param name="type">The type value.</param>
            <param name="amount">The amount value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CrystalCreate.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the CrystalCreate struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CrystalCreate.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the CrystalCreate struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CrystalCreate.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CrystalCreate.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CrystalCreate.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.CrystalCreate.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CrystalCreate.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.CrystalReclaim">
            <summary>
            Represents the CrystalReclaim packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.CrystalReclaim.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the CrystalReclaim struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CrystalReclaim.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the CrystalReclaim struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CrystalReclaim.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CrystalReclaim.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CrystalReclaim.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.CrystalReclaim.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CrystalReclaim.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.CustomTitles">
            <summary>
            Represents the CustomTitles packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.CustomTitles.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the CustomTitles struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CustomTitles.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the CustomTitles struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CustomTitles.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CustomTitles.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CustomTitles.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.CustomTitles.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.CustomTitles.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.Damage">
            <summary>
            Represents the Damage packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.Damage.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.Death">
            <summary>
            Represents the Death packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="T:OpenEQ.Netcode.DelegateAbility">
            <summary>
            Represents the DelegateAbility packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DelegateAbility.DelegateabilityValue">
            <summary>
            Gets or sets the delegateabilityvalue value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DelegateAbility.Membernumber">
            <summary>
            Gets or sets the membernumber value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DelegateAbility.Action">
            <summary>
            Gets or sets the action value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DelegateAbility.Unknown012">
            <summary>
            Gets or sets the unknown012 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DelegateAbility.Unknown016">
            <summary>
            Gets or sets the unknown016 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DelegateAbility.Entityid">
            <summary>
            Gets or sets the entityid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DelegateAbility.Unknown024">
            <summary>
            Gets or sets the unknown024 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DelegateAbility.Name">
            <summary>
            Gets or sets the name value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.DelegateAbility.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Byte[])">
            <summary>
            Initializes a new instance of the DelegateAbility struct with specified field values.
            </summary>
            <param name="DelegateAbility">The delegateabilityvalue value.</param>
            <param name="MemberNumber">The membernumber value.</param>
            <param name="Action">The action value.</param>
            <param name="Unknown012">The unknown012 value.</param>
            <param name="Unknown016">The unknown016 value.</param>
            <param name="EntityID">The entityid value.</param>
            <param name="Unknown024">The unknown024 value.</param>
            <param name="Name">The name value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DelegateAbility.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the DelegateAbility struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DelegateAbility.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the DelegateAbility struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DelegateAbility.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DelegateAbility.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DelegateAbility.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.DelegateAbility.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DelegateAbility.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.DeleteCharge">
            <summary>
            Represents the DeleteCharge packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.DeleteCharge.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the DeleteCharge struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DeleteCharge.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the DeleteCharge struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DeleteCharge.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DeleteCharge.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DeleteCharge.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.DeleteCharge.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DeleteCharge.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.DeleteItem">
            <summary>
            Represents the DeleteItem packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DeleteItem.FromSlot">
            <summary>
            Gets or sets the fromslot value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DeleteItem.ToSlot">
            <summary>
            Gets or sets the toslot value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DeleteItem.NumberInStack">
            <summary>
            Gets or sets the numberinstack value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.DeleteItem.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the DeleteItem struct with specified field values.
            </summary>
            <param name="from_slot">The fromslot value.</param>
            <param name="to_slot">The toslot value.</param>
            <param name="number_in_stack">The numberinstack value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DeleteItem.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the DeleteItem struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DeleteItem.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the DeleteItem struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DeleteItem.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DeleteItem.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DeleteItem.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.DeleteItem.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DeleteItem.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.DeleteSpawn">
            <summary>
            Represents the DeleteSpawn packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.DeleteSpawn.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.DeleteSpell">
            <summary>
            Represents the DeleteSpell packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DeleteSpell.SpellSlot">
            <summary>
            Gets or sets the spellslot value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DeleteSpell.Success">
            <summary>
            Gets or sets the success value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.DeleteSpell.#ctor(System.Int16,System.Byte)">
            <summary>
            Initializes a new instance of the DeleteSpell struct with specified field values.
            </summary>
            <param name="spell_slot">The spellslot value.</param>
            <param name="success">The success value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DeleteSpell.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the DeleteSpell struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DeleteSpell.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the DeleteSpell struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DeleteSpell.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DeleteSpell.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DeleteSpell.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.DeleteSpell.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DeleteSpell.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.DenyResponse">
            <summary>
            Represents the DenyResponse packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.DenyResponse.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the DenyResponse struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DenyResponse.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the DenyResponse struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DenyResponse.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DenyResponse.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DenyResponse.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.DenyResponse.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DenyResponse.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.Disarm">
            <summary>
            Represents the Disarm packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.Disarm.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the Disarm struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Disarm.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the Disarm struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Disarm.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Disarm.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Disarm.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.Disarm.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Disarm.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.DisciplineTimer">
            <summary>
            Represents the DisciplineTimer packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DisciplineTimer.Timerid">
            <summary>
            Gets or sets the timerid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DisciplineTimer.Duration">
            <summary>
            Gets or sets the duration value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DisciplineTimer.Unknown08">
            <summary>
            Gets or sets the unknown08 value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.DisciplineTimer.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the DisciplineTimer struct with specified field values.
            </summary>
            <param name="TimerID">The timerid value.</param>
            <param name="Duration">The duration value.</param>
            <param name="Unknown08">The unknown08 value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DisciplineTimer.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the DisciplineTimer struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DisciplineTimer.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the DisciplineTimer struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DisciplineTimer.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DisciplineTimer.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DisciplineTimer.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.DisciplineTimer.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DisciplineTimer.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.DisciplineUpdate">
            <summary>
            Represents the DisciplineUpdate packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DisciplineUpdate.Values">
            <summary>
            Gets or sets the values value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.DisciplineUpdate.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the DisciplineUpdate struct with specified field values.
            </summary>
            <param name="values">The values value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DisciplineUpdate.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the DisciplineUpdate struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DisciplineUpdate.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the DisciplineUpdate struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DisciplineUpdate.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DisciplineUpdate.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DisciplineUpdate.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.DisciplineUpdate.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DisciplineUpdate.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.DoGroupLeadershipAbility">
            <summary>
            Represents the DoGroupLeadershipAbility packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DoGroupLeadershipAbility.Ability">
            <summary>
            Gets or sets the ability value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DoGroupLeadershipAbility.Parameter">
            <summary>
            Gets or sets the parameter value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.DoGroupLeadershipAbility.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the DoGroupLeadershipAbility struct with specified field values.
            </summary>
            <param name="Ability">The ability value.</param>
            <param name="Parameter">The parameter value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DoGroupLeadershipAbility.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the DoGroupLeadershipAbility struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DoGroupLeadershipAbility.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the DoGroupLeadershipAbility struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DoGroupLeadershipAbility.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DoGroupLeadershipAbility.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DoGroupLeadershipAbility.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.DoGroupLeadershipAbility.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DoGroupLeadershipAbility.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.DuelAccept">
            <summary>
            Represents the DuelAccept packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DuelAccept.DuelInitiator">
            <summary>
            Gets or sets the duelinitiator value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DuelAccept.DuelTarget">
            <summary>
            Gets or sets the dueltarget value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.DuelAccept.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the DuelAccept struct with specified field values.
            </summary>
            <param name="duel_initiator">The duelinitiator value.</param>
            <param name="duel_target">The dueltarget value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DuelAccept.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the DuelAccept struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DuelAccept.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the DuelAccept struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DuelAccept.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DuelAccept.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DuelAccept.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.DuelAccept.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DuelAccept.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.DuelDecline">
            <summary>
            Represents the DuelDecline packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DuelDecline.TargetId">
            <summary>
            Gets or sets the targetid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DuelDecline.EntityId">
            <summary>
            Gets or sets the entityid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DuelDecline.Unknown">
            <summary>
            Gets or sets the unknown value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.DuelDecline.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the DuelDecline struct with specified field values.
            </summary>
            <param name="target_id">The targetid value.</param>
            <param name="entity_id">The entityid value.</param>
            <param name="unknown">The unknown value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DuelDecline.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the DuelDecline struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DuelDecline.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the DuelDecline struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DuelDecline.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DuelDecline.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DuelDecline.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.DuelDecline.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DuelDecline.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.Dye">
            <summary>
            Represents the Dye packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.Dye.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the Dye struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Dye.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the Dye struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Dye.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Dye.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Dye.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.Dye.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Dye.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.DzAddPlayer">
            <summary>
            Represents the DzAddPlayer packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzAddPlayer.Unknown000">
            <summary>
            Gets or sets the unknown000 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzAddPlayer.Unknown004">
            <summary>
            Gets or sets the unknown004 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzAddPlayer.Name">
            <summary>
            Gets or sets the name value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.DzAddPlayer.#ctor(System.UInt32,System.UInt32,System.Byte[])">
            <summary>
            Initializes a new instance of the DzAddPlayer struct with specified field values.
            </summary>
            <param name="unknown000">The unknown000 value.</param>
            <param name="unknown004">The unknown004 value.</param>
            <param name="name">The name value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzAddPlayer.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the DzAddPlayer struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzAddPlayer.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the DzAddPlayer struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzAddPlayer.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzAddPlayer.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzAddPlayer.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.DzAddPlayer.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzAddPlayer.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.DzChooseZone">
            <summary>
            Represents the DzChooseZone packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzChooseZone.ClientId">
            <summary>
            Gets or sets the clientid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzChooseZone.Count">
            <summary>
            Gets or sets the count value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzChooseZone.Choices">
            <summary>
            Gets or sets the choices value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.DzChooseZone.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the DzChooseZone struct with specified field values.
            </summary>
            <param name="client_id">The clientid value.</param>
            <param name="count">The count value.</param>
            <param name="choices">The choices value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzChooseZone.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the DzChooseZone struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzChooseZone.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the DzChooseZone struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzChooseZone.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzChooseZone.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzChooseZone.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.DzChooseZone.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzChooseZone.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.DzChooseZoneReply">
            <summary>
            Represents the DzChooseZoneReply packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzChooseZoneReply.Unknown000">
            <summary>
            Gets or sets the unknown000 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzChooseZoneReply.Unknown004">
            <summary>
            Gets or sets the unknown004 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzChooseZoneReply.Unknown008">
            <summary>
            Gets or sets the unknown008 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzChooseZoneReply.DzZoneId">
            <summary>
            Gets or sets the dzzoneid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzChooseZoneReply.DzInstanceId">
            <summary>
            Gets or sets the dzinstanceid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzChooseZoneReply.DzType">
            <summary>
            Gets or sets the dztype value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzChooseZoneReply.Unknown028">
            <summary>
            Gets or sets the unknown028 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzChooseZoneReply.Unknown032">
            <summary>
            Gets or sets the unknown032 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzChooseZoneReply.Unknown036">
            <summary>
            Gets or sets the unknown036 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzChooseZoneReply.Unknown040">
            <summary>
            Gets or sets the unknown040 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzChooseZoneReply.Unknown044">
            <summary>
            Gets or sets the unknown044 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzChooseZoneReply.Unknown048">
            <summary>
            Gets or sets the unknown048 value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.DzChooseZoneReply.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt16,System.UInt16,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the DzChooseZoneReply struct with specified field values.
            </summary>
            <param name="unknown000">The unknown000 value.</param>
            <param name="unknown004">The unknown004 value.</param>
            <param name="unknown008">The unknown008 value.</param>
            <param name="dz_zone_id">The dzzoneid value.</param>
            <param name="dz_instance_id">The dzinstanceid value.</param>
            <param name="dz_type">The dztype value.</param>
            <param name="unknown028">The unknown028 value.</param>
            <param name="unknown032">The unknown032 value.</param>
            <param name="unknown036">The unknown036 value.</param>
            <param name="unknown040">The unknown040 value.</param>
            <param name="unknown044">The unknown044 value.</param>
            <param name="unknown048">The unknown048 value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzChooseZoneReply.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the DzChooseZoneReply struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzChooseZoneReply.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the DzChooseZoneReply struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzChooseZoneReply.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzChooseZoneReply.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzChooseZoneReply.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.DzChooseZoneReply.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzChooseZoneReply.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.DzCompass">
            <summary>
            Represents the DzCompass packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzCompass.DzZoneId">
            <summary>
            Gets or sets the dzzoneid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzCompass.DzInstanceId">
            <summary>
            Gets or sets the dzinstanceid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzCompass.DzType">
            <summary>
            Gets or sets the dztype value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzCompass.DzSwitchId">
            <summary>
            Gets or sets the dzswitchid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzCompass.Y">
            <summary>
            Gets or sets the y value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzCompass.X">
            <summary>
            Gets or sets the x value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzCompass.Z">
            <summary>
            Gets or sets the z value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.DzCompass.#ctor(System.UInt16,System.UInt16,System.UInt32,System.UInt32,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the DzCompass struct with specified field values.
            </summary>
            <param name="dz_zone_id">The dzzoneid value.</param>
            <param name="dz_instance_id">The dzinstanceid value.</param>
            <param name="dz_type">The dztype value.</param>
            <param name="dz_switch_id">The dzswitchid value.</param>
            <param name="y">The y value.</param>
            <param name="x">The x value.</param>
            <param name="z">The z value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzCompass.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the DzCompass struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzCompass.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the DzCompass struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzCompass.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzCompass.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzCompass.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.DzCompass.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzCompass.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.DzExpeditionEndsWarning">
            <summary>
            Represents the DzExpeditionEndsWarning packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzExpeditionEndsWarning.ClientId">
            <summary>
            Gets or sets the clientid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzExpeditionEndsWarning.Unknown004">
            <summary>
            Gets or sets the unknown004 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzExpeditionEndsWarning.MinutesRemaining">
            <summary>
            Gets or sets the minutesremaining value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.DzExpeditionEndsWarning.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the DzExpeditionEndsWarning struct with specified field values.
            </summary>
            <param name="client_id">The clientid value.</param>
            <param name="unknown004">The unknown004 value.</param>
            <param name="minutes_remaining">The minutesremaining value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzExpeditionEndsWarning.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the DzExpeditionEndsWarning struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzExpeditionEndsWarning.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the DzExpeditionEndsWarning struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzExpeditionEndsWarning.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzExpeditionEndsWarning.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzExpeditionEndsWarning.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.DzExpeditionEndsWarning.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzExpeditionEndsWarning.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.DzExpeditionInfo">
            <summary>
            Represents the DzExpeditionInfo packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzExpeditionInfo.ClientId">
            <summary>
            Gets or sets the clientid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzExpeditionInfo.Unknown004">
            <summary>
            Gets or sets the unknown004 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzExpeditionInfo.Assigned">
            <summary>
            Gets or sets the assigned value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzExpeditionInfo.MaxPlayers">
            <summary>
            Gets or sets the maxplayers value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzExpeditionInfo.DzName">
            <summary>
            Gets or sets the dzname value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzExpeditionInfo.LeaderName">
            <summary>
            Gets or sets the leadername value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.DzExpeditionInfo.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the DzExpeditionInfo struct with specified field values.
            </summary>
            <param name="client_id">The clientid value.</param>
            <param name="unknown004">The unknown004 value.</param>
            <param name="assigned">The assigned value.</param>
            <param name="max_players">The maxplayers value.</param>
            <param name="dz_name">The dzname value.</param>
            <param name="leader_name">The leadername value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzExpeditionInfo.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the DzExpeditionInfo struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzExpeditionInfo.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the DzExpeditionInfo struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzExpeditionInfo.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzExpeditionInfo.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzExpeditionInfo.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.DzExpeditionInfo.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzExpeditionInfo.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.DzExpeditionInvite">
            <summary>
            Represents the DzExpeditionInvite packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzExpeditionInvite.ClientId">
            <summary>
            Gets or sets the clientid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzExpeditionInvite.Unknown004">
            <summary>
            Gets or sets the unknown004 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzExpeditionInvite.InviterName">
            <summary>
            Gets or sets the invitername value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzExpeditionInvite.ExpeditionName">
            <summary>
            Gets or sets the expeditionname value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzExpeditionInvite.Swapping">
            <summary>
            Gets or sets the swapping value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzExpeditionInvite.SwapName">
            <summary>
            Gets or sets the swapname value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzExpeditionInvite.Padding">
            <summary>
            Gets or sets the padding value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzExpeditionInvite.DzZoneId">
            <summary>
            Gets or sets the dzzoneid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzExpeditionInvite.DzInstanceId">
            <summary>
            Gets or sets the dzinstanceid value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.DzExpeditionInvite.#ctor(System.UInt32,System.UInt32,System.Byte[],System.Byte[],System.Byte,System.Byte[],System.Byte[],System.UInt16,System.UInt16)">
            <summary>
            Initializes a new instance of the DzExpeditionInvite struct with specified field values.
            </summary>
            <param name="client_id">The clientid value.</param>
            <param name="unknown004">The unknown004 value.</param>
            <param name="inviter_name">The invitername value.</param>
            <param name="expedition_name">The expeditionname value.</param>
            <param name="swapping">The swapping value.</param>
            <param name="swap_name">The swapname value.</param>
            <param name="padding">The padding value.</param>
            <param name="dz_zone_id">The dzzoneid value.</param>
            <param name="dz_instance_id">The dzinstanceid value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzExpeditionInvite.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the DzExpeditionInvite struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzExpeditionInvite.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the DzExpeditionInvite struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzExpeditionInvite.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzExpeditionInvite.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzExpeditionInvite.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.DzExpeditionInvite.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzExpeditionInvite.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.DzExpeditionLockoutTimers">
            <summary>
            Represents the DzExpeditionLockoutTimers packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzExpeditionLockoutTimers.ClientId">
            <summary>
            Gets or sets the clientid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzExpeditionLockoutTimers.Count">
            <summary>
            Gets or sets the count value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzExpeditionLockoutTimers.Timers">
            <summary>
            Gets or sets the timers value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.DzExpeditionLockoutTimers.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the DzExpeditionLockoutTimers struct with specified field values.
            </summary>
            <param name="client_id">The clientid value.</param>
            <param name="count">The count value.</param>
            <param name="timers">The timers value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzExpeditionLockoutTimers.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the DzExpeditionLockoutTimers struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzExpeditionLockoutTimers.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the DzExpeditionLockoutTimers struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzExpeditionLockoutTimers.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzExpeditionLockoutTimers.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzExpeditionLockoutTimers.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.DzExpeditionLockoutTimers.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzExpeditionLockoutTimers.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.DzListTimers">
            <summary>
            Represents the DzListTimers packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.DzListTimers.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the DzListTimers struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzListTimers.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the DzListTimers struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzListTimers.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzListTimers.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzListTimers.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.DzListTimers.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzListTimers.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.DzMakeLeader">
            <summary>
            Represents the DzMakeLeader packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzMakeLeader.Unknown000">
            <summary>
            Gets or sets the unknown000 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzMakeLeader.Unknown004">
            <summary>
            Gets or sets the unknown004 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzMakeLeader.Name">
            <summary>
            Gets or sets the name value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.DzMakeLeader.#ctor(System.UInt32,System.UInt32,System.Byte[])">
            <summary>
            Initializes a new instance of the DzMakeLeader struct with specified field values.
            </summary>
            <param name="unknown000">The unknown000 value.</param>
            <param name="unknown004">The unknown004 value.</param>
            <param name="name">The name value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzMakeLeader.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the DzMakeLeader struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzMakeLeader.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the DzMakeLeader struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzMakeLeader.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzMakeLeader.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzMakeLeader.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.DzMakeLeader.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzMakeLeader.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.DzMemberList">
            <summary>
            Represents the DzMemberList packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzMemberList.ClientId">
            <summary>
            Gets or sets the clientid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzMemberList.MemberCount">
            <summary>
            Gets or sets the membercount value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzMemberList.Members">
            <summary>
            Gets or sets the members value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.DzMemberList.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the DzMemberList struct with specified field values.
            </summary>
            <param name="client_id">The clientid value.</param>
            <param name="member_count">The membercount value.</param>
            <param name="members">The members value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzMemberList.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the DzMemberList struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzMemberList.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the DzMemberList struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzMemberList.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzMemberList.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzMemberList.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.DzMemberList.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzMemberList.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.DzMemberListName">
            <summary>
            Represents the DzMemberListName packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzMemberListName.ClientId">
            <summary>
            Gets or sets the clientid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzMemberListName.Unknown004">
            <summary>
            Gets or sets the unknown004 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzMemberListName.AddName">
            <summary>
            Gets or sets the addname value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzMemberListName.Name">
            <summary>
            Gets or sets the name value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.DzMemberListName.#ctor(System.UInt32,System.UInt32,System.UInt32,System.Byte[])">
            <summary>
            Initializes a new instance of the DzMemberListName struct with specified field values.
            </summary>
            <param name="client_id">The clientid value.</param>
            <param name="unknown004">The unknown004 value.</param>
            <param name="add_name">The addname value.</param>
            <param name="name">The name value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzMemberListName.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the DzMemberListName struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzMemberListName.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the DzMemberListName struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzMemberListName.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzMemberListName.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzMemberListName.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.DzMemberListName.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzMemberListName.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.DzMemberListStatus">
            <summary>
            Represents the DzMemberListStatus packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzMemberListStatus.ClientId">
            <summary>
            Gets or sets the clientid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzMemberListStatus.MemberCount">
            <summary>
            Gets or sets the membercount value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzMemberListStatus.Members">
            <summary>
            Gets or sets the members value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.DzMemberListStatus.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the DzMemberListStatus struct with specified field values.
            </summary>
            <param name="client_id">The clientid value.</param>
            <param name="member_count">The membercount value.</param>
            <param name="members">The members value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzMemberListStatus.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the DzMemberListStatus struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzMemberListStatus.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the DzMemberListStatus struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzMemberListStatus.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzMemberListStatus.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzMemberListStatus.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.DzMemberListStatus.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzMemberListStatus.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.DzPlayerList">
            <summary>
            Represents the DzPlayerList packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.DzPlayerList.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the DzPlayerList struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzPlayerList.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the DzPlayerList struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzPlayerList.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzPlayerList.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzPlayerList.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.DzPlayerList.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzPlayerList.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.DzQuit">
            <summary>
            Represents the DzQuit packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.DzQuit.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the DzQuit struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzQuit.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the DzQuit struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzQuit.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzQuit.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzQuit.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.DzQuit.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzQuit.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.DzRemovePlayer">
            <summary>
            Represents the DzRemovePlayer packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzRemovePlayer.Unknown000">
            <summary>
            Gets or sets the unknown000 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzRemovePlayer.Unknown004">
            <summary>
            Gets or sets the unknown004 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzRemovePlayer.Name">
            <summary>
            Gets or sets the name value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.DzRemovePlayer.#ctor(System.UInt32,System.UInt32,System.Byte[])">
            <summary>
            Initializes a new instance of the DzRemovePlayer struct with specified field values.
            </summary>
            <param name="unknown000">The unknown000 value.</param>
            <param name="unknown004">The unknown004 value.</param>
            <param name="name">The name value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzRemovePlayer.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the DzRemovePlayer struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzRemovePlayer.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the DzRemovePlayer struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzRemovePlayer.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzRemovePlayer.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzRemovePlayer.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.DzRemovePlayer.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzRemovePlayer.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.DzSetLeaderName">
            <summary>
            Represents the DzSetLeaderName packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzSetLeaderName.ClientId">
            <summary>
            Gets or sets the clientid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzSetLeaderName.Unknown004">
            <summary>
            Gets or sets the unknown004 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzSetLeaderName.LeaderName">
            <summary>
            Gets or sets the leadername value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.DzSetLeaderName.#ctor(System.UInt32,System.UInt32,System.Byte[])">
            <summary>
            Initializes a new instance of the DzSetLeaderName struct with specified field values.
            </summary>
            <param name="client_id">The clientid value.</param>
            <param name="unknown004">The unknown004 value.</param>
            <param name="leader_name">The leadername value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzSetLeaderName.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the DzSetLeaderName struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzSetLeaderName.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the DzSetLeaderName struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzSetLeaderName.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzSetLeaderName.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzSetLeaderName.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.DzSetLeaderName.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzSetLeaderName.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.DzSwapPlayer">
            <summary>
            Represents the DzSwapPlayer packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzSwapPlayer.Unknown000">
            <summary>
            Gets or sets the unknown000 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzSwapPlayer.Unknown004">
            <summary>
            Gets or sets the unknown004 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzSwapPlayer.AddPlayerName">
            <summary>
            Gets or sets the addplayername value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.DzSwapPlayer.RemPlayerName">
            <summary>
            Gets or sets the remplayername value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.DzSwapPlayer.#ctor(System.UInt32,System.UInt32,System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the DzSwapPlayer struct with specified field values.
            </summary>
            <param name="unknown000">The unknown000 value.</param>
            <param name="unknown004">The unknown004 value.</param>
            <param name="add_player_name">The addplayername value.</param>
            <param name="rem_player_name">The remplayername value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzSwapPlayer.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the DzSwapPlayer struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzSwapPlayer.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the DzSwapPlayer struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzSwapPlayer.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzSwapPlayer.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzSwapPlayer.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.DzSwapPlayer.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.DzSwapPlayer.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.Emote">
            <summary>
            Represents the Emote packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Emote.Unknown01">
            <summary>
            Gets or sets the unknown01 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Emote.Message">
            <summary>
            Gets or sets the message value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.Emote.#ctor(System.UInt32,System.Byte[])">
            <summary>
            Initializes a new instance of the Emote struct with specified field values.
            </summary>
            <param name="unknown01">The unknown01 value.</param>
            <param name="message">The message value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Emote.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the Emote struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Emote.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the Emote struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Emote.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Emote.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Emote.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.Emote.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Emote.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.EndLootRequest">
            <summary>
            Represents the EndLootRequest packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.EndLootRequest.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the EndLootRequest struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.EndLootRequest.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the EndLootRequest struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.EndLootRequest.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.EndLootRequest.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.EndLootRequest.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.EndLootRequest.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.EndLootRequest.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.EnduranceUpdate">
            <summary>
            Represents the EnduranceUpdate packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.EnduranceUpdate.CurEnd">
            <summary>
            Gets or sets the curend value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.EnduranceUpdate.MaxEnd">
            <summary>
            Gets or sets the maxend value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.EnduranceUpdate.SpawnId">
            <summary>
            Gets or sets the spawnid value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.EnduranceUpdate.#ctor(System.UInt32,System.UInt32,System.UInt16)">
            <summary>
            Initializes a new instance of the EnduranceUpdate struct with specified field values.
            </summary>
            <param name="cur_end">The curend value.</param>
            <param name="max_end">The maxend value.</param>
            <param name="spawn_id">The spawnid value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.EnduranceUpdate.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the EnduranceUpdate struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.EnduranceUpdate.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the EnduranceUpdate struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.EnduranceUpdate.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.EnduranceUpdate.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.EnduranceUpdate.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.EnduranceUpdate.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.EnduranceUpdate.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.EnvDamage">
            <summary>
            Represents the EnvDamage packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.EnvDamage.Id">
            <summary>
            Gets or sets the id value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.EnvDamage.Unknown4">
            <summary>
            Gets or sets the unknown4 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.EnvDamage.Damage">
            <summary>
            Gets or sets the damage value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.EnvDamage.Unknown10">
            <summary>
            Gets or sets the unknown10 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.EnvDamage.Unknown14">
            <summary>
            Gets or sets the unknown14 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.EnvDamage.Dmgtype">
            <summary>
            Gets or sets the dmgtype value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.EnvDamage.Unknown27">
            <summary>
            Gets or sets the unknown27 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.EnvDamage.Unknown31">
            <summary>
            Gets or sets the unknown31 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.EnvDamage.Constant">
            <summary>
            Gets or sets the constant value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.EnvDamage.Unknown35">
            <summary>
            Gets or sets the unknown35 value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.EnvDamage.#ctor(System.UInt32,System.UInt16,System.UInt32,System.Single,System.Byte[],System.Byte,System.Byte[],System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Initializes a new instance of the EnvDamage struct with specified field values.
            </summary>
            <param name="id">The id value.</param>
            <param name="unknown4">The unknown4 value.</param>
            <param name="damage">The damage value.</param>
            <param name="unknown10">The unknown10 value.</param>
            <param name="unknown14">The unknown14 value.</param>
            <param name="dmgtype">The dmgtype value.</param>
            <param name="unknown27">The unknown27 value.</param>
            <param name="unknown31">The unknown31 value.</param>
            <param name="constant">The constant value.</param>
            <param name="unknown35">The unknown35 value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.EnvDamage.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the EnvDamage struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.EnvDamage.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the EnvDamage struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.EnvDamage.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.EnvDamage.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.EnvDamage.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.EnvDamage.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.EnvDamage.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.ExpUpdate">
            <summary>
            Represents the ExpUpdate packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.ExpUpdate.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.FaceChange">
            <summary>
            Represents the FaceChange packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.FaceChange.Haircolor">
            <summary>
            Gets or sets the haircolor value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.FaceChange.Beardcolor">
            <summary>
            Gets or sets the beardcolor value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.FaceChange.Eyecolor1">
            <summary>
            Gets or sets the eyecolor1 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.FaceChange.Eyecolor2">
            <summary>
            Gets or sets the eyecolor2 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.FaceChange.Hairstyle">
            <summary>
            Gets or sets the hairstyle value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.FaceChange.Beard">
            <summary>
            Gets or sets the beard value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.FaceChange.Face">
            <summary>
            Gets or sets the face value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.FaceChange.UnusedPadding">
            <summary>
            Gets or sets the unusedpadding value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.FaceChange.DrakkinHeritage">
            <summary>
            Gets or sets the drakkinheritage value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.FaceChange.DrakkinTattoo">
            <summary>
            Gets or sets the drakkintattoo value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.FaceChange.DrakkinDetails">
            <summary>
            Gets or sets the drakkindetails value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.FaceChange.EntityId">
            <summary>
            Gets or sets the entityid value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.FaceChange.#ctor(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the FaceChange struct with specified field values.
            </summary>
            <param name="haircolor">The haircolor value.</param>
            <param name="beardcolor">The beardcolor value.</param>
            <param name="eyecolor1">The eyecolor1 value.</param>
            <param name="eyecolor2">The eyecolor2 value.</param>
            <param name="hairstyle">The hairstyle value.</param>
            <param name="beard">The beard value.</param>
            <param name="face">The face value.</param>
            <param name="unused_padding">The unusedpadding value.</param>
            <param name="drakkin_heritage">The drakkinheritage value.</param>
            <param name="drakkin_tattoo">The drakkintattoo value.</param>
            <param name="drakkin_details">The drakkindetails value.</param>
            <param name="entity_id">The entityid value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.FaceChange.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the FaceChange struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.FaceChange.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the FaceChange struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.FaceChange.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.FaceChange.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.FaceChange.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.FaceChange.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.FaceChange.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.Feedback">
            <summary>
            Represents the Feedback packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.Feedback.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the Feedback struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Feedback.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the Feedback struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Feedback.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Feedback.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Feedback.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.Feedback.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Feedback.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.FeignDeath">
            <summary>
            Represents the FeignDeath packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.FeignDeath.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the FeignDeath struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.FeignDeath.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the FeignDeath struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.FeignDeath.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.FeignDeath.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.FeignDeath.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.FeignDeath.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.FeignDeath.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.FindPersonReply">
            <summary>
            Represents the FindPersonReply packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.FindPersonReply.Dest">
            <summary>
            Gets or sets the dest value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.FindPersonReply.Path">
            <summary>
            Gets or sets the path value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.FindPersonReply.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the FindPersonReply struct with specified field values.
            </summary>
            <param name="dest">The dest value.</param>
            <param name="path">The path value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.FindPersonReply.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the FindPersonReply struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.FindPersonReply.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the FindPersonReply struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.FindPersonReply.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.FindPersonReply.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.FindPersonReply.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.FindPersonReply.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.FindPersonReply.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.FindPersonRequest">
            <summary>
            Represents the FindPersonRequest packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.FindPersonRequest.Unknown000">
            <summary>
            Gets or sets the unknown000 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.FindPersonRequest.NpcId">
            <summary>
            Gets or sets the npcid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.FindPersonRequest.ClientPos">
            <summary>
            Gets or sets the clientpos value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.FindPersonRequest.Unknown020">
            <summary>
            Gets or sets the unknown020 value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.FindPersonRequest.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the FindPersonRequest struct with specified field values.
            </summary>
            <param name="unknown000">The unknown000 value.</param>
            <param name="npc_id">The npcid value.</param>
            <param name="client_pos">The clientpos value.</param>
            <param name="unknown020">The unknown020 value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.FindPersonRequest.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the FindPersonRequest struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.FindPersonRequest.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the FindPersonRequest struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.FindPersonRequest.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.FindPersonRequest.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.FindPersonRequest.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.FindPersonRequest.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.FindPersonRequest.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.FinishTrade">
            <summary>
            Represents the FinishTrade packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.FinishTrade.NpcId">
            <summary>
            Gets or sets the npcid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.FinishTrade.ItemSlot">
            <summary>
            Gets or sets the itemslot value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.FinishTrade.Quantity">
            <summary>
            Gets or sets the quantity value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.FinishTrade.MoneyFlag">
            <summary>
            Gets or sets the moneyflag value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.FinishTrade.SendTo">
            <summary>
            Gets or sets the sendto value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.FinishTrade.Note">
            <summary>
            Gets or sets the note value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.FinishTrade.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the FinishTrade struct with specified field values.
            </summary>
            <param name="npc_id">The npcid value.</param>
            <param name="item_slot">The itemslot value.</param>
            <param name="quantity">The quantity value.</param>
            <param name="money_flag">The moneyflag value.</param>
            <param name="send_to">The sendto value.</param>
            <param name="note">The note value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.FinishTrade.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the FinishTrade struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.FinishTrade.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the FinishTrade struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.FinishTrade.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.FinishTrade.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.FinishTrade.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.FinishTrade.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.FinishTrade.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.FinishWindow">
            <summary>
            Represents the FinishWindow packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.FinishWindow.Type">
            <summary>
            Gets or sets the type value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.FinishWindow.CharacterName">
            <summary>
            Gets or sets the charactername value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.FinishWindow.Unknown134">
            <summary>
            Gets or sets the unknown134 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.FinishWindow.Message">
            <summary>
            Gets or sets the message value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.FinishWindow.#ctor(System.Byte,System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the FinishWindow struct with specified field values.
            </summary>
            <param name="type">The type value.</param>
            <param name="character_name">The charactername value.</param>
            <param name="unknown134">The unknown134 value.</param>
            <param name="message">The message value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.FinishWindow.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the FinishWindow struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.FinishWindow.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the FinishWindow struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.FinishWindow.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.FinishWindow.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.FinishWindow.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.FinishWindow.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.FinishWindow.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.FinishWindow2">
            <summary>
            Represents the FinishWindow2 packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.FinishWindow2.Type">
            <summary>
            Gets or sets the type value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.FinishWindow2.CharacterName">
            <summary>
            Gets or sets the charactername value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.FinishWindow2.Unknown134">
            <summary>
            Gets or sets the unknown134 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.FinishWindow2.Message">
            <summary>
            Gets or sets the message value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.FinishWindow2.#ctor(System.Byte,System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the FinishWindow2 struct with specified field values.
            </summary>
            <param name="type">The type value.</param>
            <param name="character_name">The charactername value.</param>
            <param name="unknown134">The unknown134 value.</param>
            <param name="message">The message value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.FinishWindow2.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the FinishWindow2 struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.FinishWindow2.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the FinishWindow2 struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.FinishWindow2.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.FinishWindow2.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.FinishWindow2.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.FinishWindow2.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.FinishWindow2.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.Fishing">
            <summary>
            Represents the Fishing packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Fishing.Unknown000">
            <summary>
            Gets or sets the unknown000 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Fishing.NpcId">
            <summary>
            Gets or sets the npcid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Fishing.ClientPos">
            <summary>
            Gets or sets the clientpos value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Fishing.Unknown020">
            <summary>
            Gets or sets the unknown020 value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.Fishing.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the Fishing struct with specified field values.
            </summary>
            <param name="unknown000">The unknown000 value.</param>
            <param name="npc_id">The npcid value.</param>
            <param name="client_pos">The clientpos value.</param>
            <param name="unknown020">The unknown020 value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Fishing.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the Fishing struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Fishing.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the Fishing struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Fishing.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Fishing.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Fishing.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.Fishing.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Fishing.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.Fling">
            <summary>
            Represents the Fling packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Fling.Collision">
            <summary>
            Gets or sets the collision value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Fling.TravelTime">
            <summary>
            Gets or sets the traveltime value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Fling.Unk3">
            <summary>
            Gets or sets the unk3 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Fling.DisableFallDamage">
            <summary>
            Gets or sets the disablefalldamage value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Fling.Padding">
            <summary>
            Gets or sets the padding value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Fling.SpeedZ">
            <summary>
            Gets or sets the speedz value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Fling.NewY">
            <summary>
            Gets or sets the newy value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Fling.NewX">
            <summary>
            Gets or sets the newx value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Fling.NewZ">
            <summary>
            Gets or sets the newz value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.Fling.#ctor(System.UInt32,System.Int32,System.Byte,System.Byte,System.Byte[],System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the Fling struct with specified field values.
            </summary>
            <param name="collision">The collision value.</param>
            <param name="travel_time">The traveltime value.</param>
            <param name="unk3">The unk3 value.</param>
            <param name="disable_fall_damage">The disablefalldamage value.</param>
            <param name="padding">The padding value.</param>
            <param name="speed_z">The speedz value.</param>
            <param name="new_y">The newy value.</param>
            <param name="new_x">The newx value.</param>
            <param name="new_z">The newz value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Fling.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the Fling struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Fling.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the Fling struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Fling.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Fling.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Fling.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.Fling.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Fling.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.FloatListThing">
            <summary>
            Represents the FloatListThing packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.FloatListThing.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the FloatListThing struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.FloatListThing.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the FloatListThing struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.FloatListThing.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.FloatListThing.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.FloatListThing.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.FloatListThing.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.FloatListThing.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.Forage">
            <summary>
            Represents the Forage packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.Forage.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the Forage struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Forage.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the Forage struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Forage.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Forage.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Forage.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.Forage.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Forage.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.FormattedMessage">
            <summary>
            Represents the FormattedMessage packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.FormattedMessage.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the FormattedMessage struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.FormattedMessage.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the FormattedMessage struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.FormattedMessage.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.FormattedMessage.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.FormattedMessage.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.FormattedMessage.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.FormattedMessage.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.FriendsWho">
            <summary>
            Represents the FriendsWho packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.FriendsWho.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the FriendsWho struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.FriendsWho.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the FriendsWho struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.FriendsWho.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.FriendsWho.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.FriendsWho.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.FriendsWho.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.FriendsWho.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GetGuildMOTD">
            <summary>
            Represents the GetGuildMOTD packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GetGuildMOTD.Unknown0">
            <summary>
            Gets or sets the unknown0 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GetGuildMOTD.Name">
            <summary>
            Gets or sets the name value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GetGuildMOTD.SetbyName">
            <summary>
            Gets or sets the setbyname value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GetGuildMOTD.Unknown132">
            <summary>
            Gets or sets the unknown132 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GetGuildMOTD.Motd">
            <summary>
            Gets or sets the motd value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GetGuildMOTD.#ctor(System.UInt32,System.Byte[],System.Byte[],System.UInt32,System.Byte)">
            <summary>
            Initializes a new instance of the GetGuildMOTD struct with specified field values.
            </summary>
            <param name="unknown0">The unknown0 value.</param>
            <param name="name">The name value.</param>
            <param name="setby_name">The setbyname value.</param>
            <param name="unknown132">The unknown132 value.</param>
            <param name="motd">The motd value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GetGuildMOTD.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GetGuildMOTD struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GetGuildMOTD.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GetGuildMOTD struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GetGuildMOTD.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GetGuildMOTD.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GetGuildMOTD.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GetGuildMOTD.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GetGuildMOTD.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GetGuildMOTDReply">
            <summary>
            Represents the GetGuildMOTDReply packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GetGuildMOTDReply.Unknown0">
            <summary>
            Gets or sets the unknown0 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GetGuildMOTDReply.Name">
            <summary>
            Gets or sets the name value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GetGuildMOTDReply.SetbyName">
            <summary>
            Gets or sets the setbyname value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GetGuildMOTDReply.Unknown132">
            <summary>
            Gets or sets the unknown132 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GetGuildMOTDReply.Motd">
            <summary>
            Gets or sets the motd value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GetGuildMOTDReply.#ctor(System.UInt32,System.Byte[],System.Byte[],System.UInt32,System.Byte)">
            <summary>
            Initializes a new instance of the GetGuildMOTDReply struct with specified field values.
            </summary>
            <param name="unknown0">The unknown0 value.</param>
            <param name="name">The name value.</param>
            <param name="setby_name">The setbyname value.</param>
            <param name="unknown132">The unknown132 value.</param>
            <param name="motd">The motd value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GetGuildMOTDReply.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GetGuildMOTDReply struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GetGuildMOTDReply.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GetGuildMOTDReply struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GetGuildMOTDReply.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GetGuildMOTDReply.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GetGuildMOTDReply.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GetGuildMOTDReply.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GetGuildMOTDReply.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GMApproval">
            <summary>
            Represents the GMApproval packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GMApproval.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GMApproval struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMApproval.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GMApproval struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMApproval.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMApproval.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMApproval.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GMApproval.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMApproval.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GMBecomeNPC">
            <summary>
            Represents the GMBecomeNPC packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GMBecomeNPC.Id">
            <summary>
            Gets or sets the id value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GMBecomeNPC.Maxlevel">
            <summary>
            Gets or sets the maxlevel value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GMBecomeNPC.#ctor(System.UInt32,System.Int32)">
            <summary>
            Initializes a new instance of the GMBecomeNPC struct with specified field values.
            </summary>
            <param name="id">The id value.</param>
            <param name="maxlevel">The maxlevel value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMBecomeNPC.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GMBecomeNPC struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMBecomeNPC.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GMBecomeNPC struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMBecomeNPC.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMBecomeNPC.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMBecomeNPC.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GMBecomeNPC.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMBecomeNPC.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GMDelCorpse">
            <summary>
            Represents the GMDelCorpse packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GMDelCorpse.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GMDelCorpse struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMDelCorpse.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GMDelCorpse struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMDelCorpse.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMDelCorpse.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMDelCorpse.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GMDelCorpse.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMDelCorpse.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GMEmoteWorld">
            <summary>
            Represents the GMEmoteWorld packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GMEmoteWorld.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GMEmoteWorld struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMEmoteWorld.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GMEmoteWorld struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMEmoteWorld.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMEmoteWorld.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMEmoteWorld.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GMEmoteWorld.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMEmoteWorld.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GMEmoteZone">
            <summary>
            Represents the GMEmoteZone packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GMEmoteZone.Text">
            <summary>
            Gets or sets the text value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GMEmoteZone.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the GMEmoteZone struct with specified field values.
            </summary>
            <param name="text">The text value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMEmoteZone.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GMEmoteZone struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMEmoteZone.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GMEmoteZone struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMEmoteZone.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMEmoteZone.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMEmoteZone.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GMEmoteZone.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMEmoteZone.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GMEndTraining">
            <summary>
            Represents the GMEndTraining packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GMEndTraining.Npcid">
            <summary>
            Gets or sets the npcid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GMEndTraining.Playerid">
            <summary>
            Gets or sets the playerid value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GMEndTraining.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the GMEndTraining struct with specified field values.
            </summary>
            <param name="npcid">The npcid value.</param>
            <param name="playerid">The playerid value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMEndTraining.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GMEndTraining struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMEndTraining.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GMEndTraining struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMEndTraining.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMEndTraining.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMEndTraining.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GMEndTraining.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMEndTraining.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GMFind">
            <summary>
            Represents the GMFind packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GMFind.Charname">
            <summary>
            Gets or sets the charname value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GMFind.Gmname">
            <summary>
            Gets or sets the gmname value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GMFind.Success">
            <summary>
            Gets or sets the success value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GMFind.Zoneid">
            <summary>
            Gets or sets the zoneid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GMFind.X">
            <summary>
            Gets or sets the x value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GMFind.Y">
            <summary>
            Gets or sets the y value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GMFind.Z">
            <summary>
            Gets or sets the z value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GMFind.Unknown2">
            <summary>
            Gets or sets the unknown2 value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GMFind.#ctor(System.Byte[],System.Byte[],System.UInt32,System.UInt32,System.Single,System.Single,System.Single,System.UInt32)">
            <summary>
            Initializes a new instance of the GMFind struct with specified field values.
            </summary>
            <param name="charname">The charname value.</param>
            <param name="gmname">The gmname value.</param>
            <param name="success">The success value.</param>
            <param name="zoneID">The zoneid value.</param>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
            <param name="z">The z value.</param>
            <param name="unknown2">The unknown2 value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMFind.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GMFind struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMFind.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GMFind struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMFind.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMFind.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMFind.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GMFind.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMFind.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GMGoto">
            <summary>
            Represents the GMGoto packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GMGoto.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GMGoto struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMGoto.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GMGoto struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMGoto.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMGoto.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMGoto.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GMGoto.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMGoto.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GMHideMe">
            <summary>
            Represents the GMHideMe packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GMHideMe.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GMHideMe struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMHideMe.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GMHideMe struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMHideMe.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMHideMe.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMHideMe.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GMHideMe.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMHideMe.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GMKick">
            <summary>
            Represents the GMKick packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GMKick.Name">
            <summary>
            Gets or sets the name value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GMKick.Gmname">
            <summary>
            Gets or sets the gmname value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GMKick.Unknown">
            <summary>
            Gets or sets the unknown value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GMKick.#ctor(System.Byte[],System.Byte[],System.Byte)">
            <summary>
            Initializes a new instance of the GMKick struct with specified field values.
            </summary>
            <param name="name">The name value.</param>
            <param name="gmname">The gmname value.</param>
            <param name="unknown">The unknown value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMKick.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GMKick struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMKick.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GMKick struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMKick.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMKick.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMKick.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GMKick.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMKick.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GMKill">
            <summary>
            Represents the GMKill packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GMKill.Name">
            <summary>
            Gets or sets the name value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GMKill.Gmname">
            <summary>
            Gets or sets the gmname value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GMKill.Unknown">
            <summary>
            Gets or sets the unknown value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GMKill.#ctor(System.Byte[],System.Byte[],System.Byte)">
            <summary>
            Initializes a new instance of the GMKill struct with specified field values.
            </summary>
            <param name="name">The name value.</param>
            <param name="gmname">The gmname value.</param>
            <param name="unknown">The unknown value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMKill.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GMKill struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMKill.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GMKill struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMKill.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMKill.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMKill.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GMKill.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMKill.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GMLastName">
            <summary>
            Represents the GMLastName packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GMLastName.Name">
            <summary>
            Gets or sets the name value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GMLastName.Gmname">
            <summary>
            Gets or sets the gmname value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GMLastName.Lastname">
            <summary>
            Gets or sets the lastname value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GMLastName.Unknown">
            <summary>
            Gets or sets the unknown value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GMLastName.#ctor(System.Byte[],System.Byte[],System.Byte[],System.UInt16[])">
            <summary>
            Initializes a new instance of the GMLastName struct with specified field values.
            </summary>
            <param name="name">The name value.</param>
            <param name="gmname">The gmname value.</param>
            <param name="lastname">The lastname value.</param>
            <param name="unknown">The unknown value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMLastName.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GMLastName struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMLastName.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GMLastName struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMLastName.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMLastName.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMLastName.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GMLastName.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMLastName.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GMNameChange">
            <summary>
            Represents the GMNameChange packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GMNameChange.Oldname">
            <summary>
            Gets or sets the oldname value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GMNameChange.Gmname">
            <summary>
            Gets or sets the gmname value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GMNameChange.Newname">
            <summary>
            Gets or sets the newname value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GMNameChange.Badname">
            <summary>
            Gets or sets the badname value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GMNameChange.Unknown">
            <summary>
            Gets or sets the unknown value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GMNameChange.#ctor(System.Byte[],System.Byte[],System.Byte[],System.Byte,System.Byte[])">
            <summary>
            Initializes a new instance of the GMNameChange struct with specified field values.
            </summary>
            <param name="oldname">The oldname value.</param>
            <param name="gmname">The gmname value.</param>
            <param name="newname">The newname value.</param>
            <param name="badname">The badname value.</param>
            <param name="unknown">The unknown value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMNameChange.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GMNameChange struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMNameChange.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GMNameChange struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMNameChange.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMNameChange.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMNameChange.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GMNameChange.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMNameChange.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GMSearchCorpse">
            <summary>
            Represents the GMSearchCorpse packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GMSearchCorpse.Oldname">
            <summary>
            Gets or sets the oldname value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GMSearchCorpse.Gmname">
            <summary>
            Gets or sets the gmname value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GMSearchCorpse.Newname">
            <summary>
            Gets or sets the newname value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GMSearchCorpse.Badname">
            <summary>
            Gets or sets the badname value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GMSearchCorpse.Unknown">
            <summary>
            Gets or sets the unknown value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GMSearchCorpse.#ctor(System.Byte[],System.Byte[],System.Byte[],System.Byte,System.Byte[])">
            <summary>
            Initializes a new instance of the GMSearchCorpse struct with specified field values.
            </summary>
            <param name="oldname">The oldname value.</param>
            <param name="gmname">The gmname value.</param>
            <param name="newname">The newname value.</param>
            <param name="badname">The badname value.</param>
            <param name="unknown">The unknown value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMSearchCorpse.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GMSearchCorpse struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMSearchCorpse.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GMSearchCorpse struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMSearchCorpse.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMSearchCorpse.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMSearchCorpse.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GMSearchCorpse.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMSearchCorpse.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GMServers">
            <summary>
            Represents the GMServers packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GMServers.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GMServers struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMServers.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GMServers struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMServers.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMServers.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMServers.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GMServers.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMServers.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GMSummon">
            <summary>
            Represents the GMSummon packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GMSummon.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GMSummon struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMSummon.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GMSummon struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMSummon.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMSummon.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMSummon.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GMSummon.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMSummon.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GMToggle">
            <summary>
            Represents the GMToggle packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GMToggle.Unknown0">
            <summary>
            Gets or sets the unknown0 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GMToggle.Toggle">
            <summary>
            Gets or sets the toggle value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GMToggle.#ctor(System.Byte[],System.UInt32)">
            <summary>
            Initializes a new instance of the GMToggle struct with specified field values.
            </summary>
            <param name="unknown0">The unknown0 value.</param>
            <param name="toggle">The toggle value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMToggle.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GMToggle struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMToggle.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GMToggle struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMToggle.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMToggle.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMToggle.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GMToggle.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMToggle.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GMTraining">
            <summary>
            Represents the GMTraining packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GMTraining.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GMTraining struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMTraining.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GMTraining struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMTraining.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMTraining.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMTraining.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GMTraining.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMTraining.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GMTrainSkill">
            <summary>
            Represents the GMTrainSkill packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GMTrainSkill.Skillid">
            <summary>
            Gets or sets the skillid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GMTrainSkill.Cost">
            <summary>
            Gets or sets the cost value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GMTrainSkill.Newskill">
            <summary>
            Gets or sets the newskill value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GMTrainSkill.Trainername">
            <summary>
            Gets or sets the trainername value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GMTrainSkill.#ctor(System.UInt32,System.UInt32,System.Byte,System.Byte[])">
            <summary>
            Initializes a new instance of the GMTrainSkill struct with specified field values.
            </summary>
            <param name="SkillID">The skillid value.</param>
            <param name="Cost">The cost value.</param>
            <param name="NewSkill">The newskill value.</param>
            <param name="TrainerName">The trainername value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMTrainSkill.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GMTrainSkill struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMTrainSkill.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GMTrainSkill struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMTrainSkill.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMTrainSkill.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMTrainSkill.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GMTrainSkill.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMTrainSkill.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GMTrainSkillConfirm">
            <summary>
            Represents the GMTrainSkillConfirm packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GMTrainSkillConfirm.Skillid">
            <summary>
            Gets or sets the skillid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GMTrainSkillConfirm.Cost">
            <summary>
            Gets or sets the cost value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GMTrainSkillConfirm.Newskill">
            <summary>
            Gets or sets the newskill value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GMTrainSkillConfirm.Trainername">
            <summary>
            Gets or sets the trainername value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GMTrainSkillConfirm.#ctor(System.UInt32,System.UInt32,System.Byte,System.Byte[])">
            <summary>
            Initializes a new instance of the GMTrainSkillConfirm struct with specified field values.
            </summary>
            <param name="SkillID">The skillid value.</param>
            <param name="Cost">The cost value.</param>
            <param name="NewSkill">The newskill value.</param>
            <param name="TrainerName">The trainername value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMTrainSkillConfirm.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GMTrainSkillConfirm struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMTrainSkillConfirm.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GMTrainSkillConfirm struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMTrainSkillConfirm.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMTrainSkillConfirm.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMTrainSkillConfirm.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GMTrainSkillConfirm.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMTrainSkillConfirm.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GMZoneRequest">
            <summary>
            Represents the GMZoneRequest packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GMZoneRequest.Charname">
            <summary>
            Gets or sets the charname value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GMZoneRequest.ZoneId">
            <summary>
            Gets or sets the zoneid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GMZoneRequest.X">
            <summary>
            Gets or sets the x value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GMZoneRequest.Y">
            <summary>
            Gets or sets the y value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GMZoneRequest.Z">
            <summary>
            Gets or sets the z value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GMZoneRequest.Heading">
            <summary>
            Gets or sets the heading value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GMZoneRequest.Success">
            <summary>
            Gets or sets the success value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GMZoneRequest.#ctor(System.Byte[],System.UInt32,System.Single,System.Single,System.Single,System.Single,System.UInt32)">
            <summary>
            Initializes a new instance of the GMZoneRequest struct with specified field values.
            </summary>
            <param name="charname">The charname value.</param>
            <param name="zone_id">The zoneid value.</param>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
            <param name="z">The z value.</param>
            <param name="heading">The heading value.</param>
            <param name="success">The success value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMZoneRequest.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GMZoneRequest struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMZoneRequest.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GMZoneRequest struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMZoneRequest.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMZoneRequest.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMZoneRequest.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GMZoneRequest.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMZoneRequest.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GMZoneRequest2">
            <summary>
            Represents the GMZoneRequest2 packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GMZoneRequest2.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GMZoneRequest2 struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMZoneRequest2.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GMZoneRequest2 struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMZoneRequest2.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMZoneRequest2.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMZoneRequest2.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GMZoneRequest2.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GMZoneRequest2.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GroundSpawn">
            <summary>
            Represents the GroundSpawn packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GroundSpawn.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GroupAcknowledge">
            <summary>
            Represents the GroupAcknowledge packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GroupAcknowledge.Unknown000">
            <summary>
            Gets or sets the unknown000 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GroupAcknowledge.Leadername">
            <summary>
            Gets or sets the leadername value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GroupAcknowledge.Unknown128">
            <summary>
            Gets or sets the unknown128 value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GroupAcknowledge.#ctor(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the GroupAcknowledge struct with specified field values.
            </summary>
            <param name="Unknown000">The unknown000 value.</param>
            <param name="LeaderName">The leadername value.</param>
            <param name="Unknown128">The unknown128 value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupAcknowledge.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GroupAcknowledge struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupAcknowledge.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GroupAcknowledge struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupAcknowledge.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupAcknowledge.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupAcknowledge.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GroupAcknowledge.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupAcknowledge.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GroupCancelInvite">
            <summary>
            Represents the GroupCancelInvite packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GroupCancelInvite.Name1">
            <summary>
            Gets or sets the name1 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GroupCancelInvite.Name2">
            <summary>
            Gets or sets the name2 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GroupCancelInvite.Unknown128">
            <summary>
            Gets or sets the unknown128 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GroupCancelInvite.Toggle">
            <summary>
            Gets or sets the toggle value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GroupCancelInvite.#ctor(System.Byte[],System.Byte[],System.Byte[],System.UInt32)">
            <summary>
            Initializes a new instance of the GroupCancelInvite struct with specified field values.
            </summary>
            <param name="name1">The name1 value.</param>
            <param name="name2">The name2 value.</param>
            <param name="unknown128">The unknown128 value.</param>
            <param name="toggle">The toggle value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupCancelInvite.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GroupCancelInvite struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupCancelInvite.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GroupCancelInvite struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupCancelInvite.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupCancelInvite.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupCancelInvite.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GroupCancelInvite.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupCancelInvite.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GroupDelete">
            <summary>
            Represents the GroupDelete packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GroupDelete.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GroupDelete struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupDelete.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GroupDelete struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupDelete.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupDelete.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupDelete.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GroupDelete.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupDelete.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GroupDisband">
            <summary>
            Represents the GroupDisband packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GroupDisband.Name1">
            <summary>
            Gets or sets the name1 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GroupDisband.Name2">
            <summary>
            Gets or sets the name2 value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GroupDisband.#ctor(System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the GroupDisband struct with specified field values.
            </summary>
            <param name="name1">The name1 value.</param>
            <param name="name2">The name2 value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupDisband.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GroupDisband struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupDisband.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GroupDisband struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupDisband.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupDisband.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupDisband.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GroupDisband.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupDisband.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GroupDisbandOther">
            <summary>
            Represents the GroupDisbandOther packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GroupDisbandOther.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GroupDisbandOther struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupDisbandOther.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GroupDisbandOther struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupDisbandOther.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupDisbandOther.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupDisbandOther.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GroupDisbandOther.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupDisbandOther.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GroupDisbandYou">
            <summary>
            Represents the GroupDisbandYou packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GroupDisbandYou.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GroupDisbandYou struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupDisbandYou.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GroupDisbandYou struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupDisbandYou.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupDisbandYou.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupDisbandYou.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GroupDisbandYou.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupDisbandYou.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GroupFollow">
            <summary>
            Represents the GroupFollow packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GroupFollow.Name1">
            <summary>
            Gets or sets the name1 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GroupFollow.Name2">
            <summary>
            Gets or sets the name2 value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GroupFollow.#ctor(System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the GroupFollow struct with specified field values.
            </summary>
            <param name="name1">The name1 value.</param>
            <param name="name2">The name2 value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupFollow.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GroupFollow struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupFollow.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GroupFollow struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupFollow.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupFollow.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupFollow.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GroupFollow.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupFollow.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GroupFollow2">
            <summary>
            Represents the GroupFollow2 packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GroupFollow2.Name1">
            <summary>
            Gets or sets the name1 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GroupFollow2.Name2">
            <summary>
            Gets or sets the name2 value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GroupFollow2.#ctor(System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the GroupFollow2 struct with specified field values.
            </summary>
            <param name="name1">The name1 value.</param>
            <param name="name2">The name2 value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupFollow2.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GroupFollow2 struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupFollow2.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GroupFollow2 struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupFollow2.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupFollow2.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupFollow2.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GroupFollow2.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupFollow2.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GroupInvite">
            <summary>
            Represents the GroupInvite packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GroupInvite.InviteeName">
            <summary>
            Gets or sets the inviteename value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GroupInvite.InviterName">
            <summary>
            Gets or sets the invitername value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GroupInvite.#ctor(System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the GroupInvite struct with specified field values.
            </summary>
            <param name="invitee_name">The inviteename value.</param>
            <param name="inviter_name">The invitername value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupInvite.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GroupInvite struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupInvite.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GroupInvite struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupInvite.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupInvite.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupInvite.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GroupInvite.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupInvite.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GroupInvite2">
            <summary>
            Represents the GroupInvite2 packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GroupInvite2.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GroupInvite2 struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupInvite2.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GroupInvite2 struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupInvite2.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupInvite2.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupInvite2.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GroupInvite2.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupInvite2.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GroupLeaderChange">
            <summary>
            Represents the GroupLeaderChange packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GroupLeaderChange.Unknown000">
            <summary>
            Gets or sets the unknown000 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GroupLeaderChange.Leadername">
            <summary>
            Gets or sets the leadername value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GroupLeaderChange.Unknown128">
            <summary>
            Gets or sets the unknown128 value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GroupLeaderChange.#ctor(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the GroupLeaderChange struct with specified field values.
            </summary>
            <param name="Unknown000">The unknown000 value.</param>
            <param name="LeaderName">The leadername value.</param>
            <param name="Unknown128">The unknown128 value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupLeaderChange.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GroupLeaderChange struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupLeaderChange.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GroupLeaderChange struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupLeaderChange.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupLeaderChange.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupLeaderChange.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GroupLeaderChange.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupLeaderChange.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GroupLeadershipAAUpdate">
            <summary>
            Represents the GroupLeadershipAAUpdate packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GroupLeadershipAAUpdate.Unknown000">
            <summary>
            Gets or sets the unknown000 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GroupLeadershipAAUpdate.Leaderaas">
            <summary>
            Gets or sets the leaderaas value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GroupLeadershipAAUpdate.Unknown068">
            <summary>
            Gets or sets the unknown068 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GroupLeadershipAAUpdate.Npcmarkerid">
            <summary>
            Gets or sets the npcmarkerid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GroupLeadershipAAUpdate.Unknown268">
            <summary>
            Gets or sets the unknown268 value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GroupLeadershipAAUpdate.#ctor(System.UInt32,System.UInt32,System.UInt32[],System.UInt32,System.UInt32[])">
            <summary>
            Initializes a new instance of the GroupLeadershipAAUpdate struct with specified field values.
            </summary>
            <param name="Unknown000">The unknown000 value.</param>
            <param name="LeaderAAs">The leaderaas value.</param>
            <param name="Unknown068">The unknown068 value.</param>
            <param name="NPCMarkerID">The npcmarkerid value.</param>
            <param name="Unknown268">The unknown268 value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupLeadershipAAUpdate.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GroupLeadershipAAUpdate struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupLeadershipAAUpdate.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GroupLeadershipAAUpdate struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupLeadershipAAUpdate.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupLeadershipAAUpdate.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupLeadershipAAUpdate.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GroupLeadershipAAUpdate.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupLeadershipAAUpdate.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GroupMakeLeader">
            <summary>
            Represents the GroupMakeLeader packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GroupMakeLeader.Unknown000">
            <summary>
            Gets or sets the unknown000 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GroupMakeLeader.Currentleader">
            <summary>
            Gets or sets the currentleader value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GroupMakeLeader.Newleader">
            <summary>
            Gets or sets the newleader value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GroupMakeLeader.Unknown072">
            <summary>
            Gets or sets the unknown072 value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GroupMakeLeader.#ctor(System.UInt32,System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the GroupMakeLeader struct with specified field values.
            </summary>
            <param name="Unknown000">The unknown000 value.</param>
            <param name="CurrentLeader">The currentleader value.</param>
            <param name="NewLeader">The newleader value.</param>
            <param name="Unknown072">The unknown072 value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupMakeLeader.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GroupMakeLeader struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupMakeLeader.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GroupMakeLeader struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupMakeLeader.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupMakeLeader.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupMakeLeader.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GroupMakeLeader.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupMakeLeader.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GroupMentor">
            <summary>
            Represents the GroupMentor packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GroupMentor.Percent">
            <summary>
            Gets or sets the percent value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GroupMentor.Name">
            <summary>
            Gets or sets the name value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GroupMentor.#ctor(System.UInt32,System.Byte[])">
            <summary>
            Initializes a new instance of the GroupMentor struct with specified field values.
            </summary>
            <param name="percent">The percent value.</param>
            <param name="name">The name value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupMentor.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GroupMentor struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupMentor.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GroupMentor struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupMentor.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupMentor.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupMentor.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GroupMentor.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupMentor.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GroupRoles">
            <summary>
            Represents the GroupRoles packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GroupRoles.Name1">
            <summary>
            Gets or sets the name1 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GroupRoles.Name2">
            <summary>
            Gets or sets the name2 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GroupRoles.Unknown128">
            <summary>
            Gets or sets the unknown128 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GroupRoles.Unknown132">
            <summary>
            Gets or sets the unknown132 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GroupRoles.Unknown136">
            <summary>
            Gets or sets the unknown136 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GroupRoles.Rolenumber">
            <summary>
            Gets or sets the rolenumber value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GroupRoles.Toggle">
            <summary>
            Gets or sets the toggle value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GroupRoles.Unknown145">
            <summary>
            Gets or sets the unknown145 value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GroupRoles.#ctor(System.Byte[],System.Byte[],System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Byte,System.Byte[])">
            <summary>
            Initializes a new instance of the GroupRoles struct with specified field values.
            </summary>
            <param name="Name1">The name1 value.</param>
            <param name="Name2">The name2 value.</param>
            <param name="Unknown128">The unknown128 value.</param>
            <param name="Unknown132">The unknown132 value.</param>
            <param name="Unknown136">The unknown136 value.</param>
            <param name="RoleNumber">The rolenumber value.</param>
            <param name="Toggle">The toggle value.</param>
            <param name="Unknown145">The unknown145 value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupRoles.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GroupRoles struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupRoles.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GroupRoles struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupRoles.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupRoles.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupRoles.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GroupRoles.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupRoles.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GroupUpdate">
            <summary>
            Represents the GroupUpdate packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GroupUpdate.Name1">
            <summary>
            Gets or sets the name1 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GroupUpdate.Name2">
            <summary>
            Gets or sets the name2 value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GroupUpdate.#ctor(System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the GroupUpdate struct with specified field values.
            </summary>
            <param name="name1">The name1 value.</param>
            <param name="name2">The name2 value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupUpdate.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GroupUpdate struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupUpdate.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GroupUpdate struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupUpdate.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupUpdate.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupUpdate.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GroupUpdate.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupUpdate.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GroupUpdateB">
            <summary>
            Represents the GroupUpdateB packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GroupUpdateB.Action">
            <summary>
            Gets or sets the action value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GroupUpdateB.Unknown04">
            <summary>
            Gets or sets the unknown04 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GroupUpdateB.Depositareacount">
            <summary>
            Gets or sets the depositareacount value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GroupUpdateB.Mainareacount">
            <summary>
            Gets or sets the mainareacount value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GroupUpdateB.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the GroupUpdateB struct with specified field values.
            </summary>
            <param name="Action">The action value.</param>
            <param name="Unknown04">The unknown04 value.</param>
            <param name="DepositAreaCount">The depositareacount value.</param>
            <param name="MainAreaCount">The mainareacount value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupUpdateB.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GroupUpdateB struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupUpdateB.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GroupUpdateB struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupUpdateB.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupUpdateB.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupUpdateB.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GroupUpdateB.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupUpdateB.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GuildBank">
            <summary>
            Represents the GuildBank packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GuildBank.Action">
            <summary>
            Gets or sets the action value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GuildBank.Unknown04">
            <summary>
            Gets or sets the unknown04 value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GuildBank.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the GuildBank struct with specified field values.
            </summary>
            <param name="Action">The action value.</param>
            <param name="Unknown04">The unknown04 value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildBank.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GuildBank struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildBank.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GuildBank struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildBank.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildBank.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildBank.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GuildBank.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildBank.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GuildCreate">
            <summary>
            Represents the GuildCreate packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GuildCreate.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GuildCreate struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildCreate.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GuildCreate struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildCreate.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildCreate.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildCreate.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GuildCreate.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildCreate.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GuildDelete">
            <summary>
            Represents the GuildDelete packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GuildDelete.GuildId">
            <summary>
            Gets or sets the guildid value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GuildDelete.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the GuildDelete struct with specified field values.
            </summary>
            <param name="guild_id">The guildid value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildDelete.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GuildDelete struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildDelete.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GuildDelete struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildDelete.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildDelete.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildDelete.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GuildDelete.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildDelete.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GuildDeleteGuild">
            <summary>
            Represents the GuildDeleteGuild packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GuildDeleteGuild.GuildId">
            <summary>
            Gets or sets the guildid value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GuildDeleteGuild.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the GuildDeleteGuild struct with specified field values.
            </summary>
            <param name="guild_id">The guildid value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildDeleteGuild.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GuildDeleteGuild struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildDeleteGuild.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GuildDeleteGuild struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildDeleteGuild.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildDeleteGuild.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildDeleteGuild.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GuildDeleteGuild.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildDeleteGuild.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GuildDemote">
            <summary>
            Represents the GuildDemote packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GuildDemote.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GuildDemote struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildDemote.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GuildDemote struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildDemote.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildDemote.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildDemote.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GuildDemote.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildDemote.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GuildInvite">
            <summary>
            Represents the GuildInvite packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GuildInvite.Othername">
            <summary>
            Gets or sets the othername value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GuildInvite.Myname">
            <summary>
            Gets or sets the myname value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GuildInvite.Guildeqid">
            <summary>
            Gets or sets the guildeqid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GuildInvite.Unknown">
            <summary>
            Gets or sets the unknown value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GuildInvite.Officer">
            <summary>
            Gets or sets the officer value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GuildInvite.#ctor(System.Byte[],System.Byte[],System.UInt16,System.Byte[],System.UInt32)">
            <summary>
            Initializes a new instance of the GuildInvite struct with specified field values.
            </summary>
            <param name="othername">The othername value.</param>
            <param name="myname">The myname value.</param>
            <param name="guildeqid">The guildeqid value.</param>
            <param name="unknown">The unknown value.</param>
            <param name="officer">The officer value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildInvite.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GuildInvite struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildInvite.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GuildInvite struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildInvite.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildInvite.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildInvite.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GuildInvite.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildInvite.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GuildInviteAccept">
            <summary>
            Represents the GuildInviteAccept packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GuildInviteAccept.Inviter">
            <summary>
            Gets or sets the inviter value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GuildInviteAccept.Newmember">
            <summary>
            Gets or sets the newmember value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GuildInviteAccept.Response">
            <summary>
            Gets or sets the response value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GuildInviteAccept.Guildeqid">
            <summary>
            Gets or sets the guildeqid value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GuildInviteAccept.#ctor(System.Byte[],System.Byte[],System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the GuildInviteAccept struct with specified field values.
            </summary>
            <param name="inviter">The inviter value.</param>
            <param name="newmember">The newmember value.</param>
            <param name="response">The response value.</param>
            <param name="guildeqid">The guildeqid value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildInviteAccept.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GuildInviteAccept struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildInviteAccept.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GuildInviteAccept struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildInviteAccept.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildInviteAccept.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildInviteAccept.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GuildInviteAccept.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildInviteAccept.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GuildLeader">
            <summary>
            Represents the GuildLeader packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GuildLeader.Requestor">
            <summary>
            Gets or sets the requestor value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GuildLeader.NewLeader">
            <summary>
            Gets or sets the newleader value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GuildLeader.#ctor(System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the GuildLeader struct with specified field values.
            </summary>
            <param name="requestor">The requestor value.</param>
            <param name="new_leader">The newleader value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildLeader.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GuildLeader struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildLeader.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GuildLeader struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildLeader.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildLeader.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildLeader.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GuildLeader.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildLeader.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GuildList">
            <summary>
            Represents the GuildList packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GuildList.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GuildList struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildList.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GuildList struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildList.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildList.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildList.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GuildList.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildList.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GuildManageBanker">
            <summary>
            Represents the GuildManageBanker packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GuildManageBanker.Unknown0">
            <summary>
            Gets or sets the unknown0 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GuildManageBanker.Myname">
            <summary>
            Gets or sets the myname value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GuildManageBanker.Member">
            <summary>
            Gets or sets the member value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GuildManageBanker.Enabled">
            <summary>
            Gets or sets the enabled value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GuildManageBanker.#ctor(System.UInt32,System.Byte[],System.Byte[],System.UInt32)">
            <summary>
            Initializes a new instance of the GuildManageBanker struct with specified field values.
            </summary>
            <param name="unknown0">The unknown0 value.</param>
            <param name="myname">The myname value.</param>
            <param name="member">The member value.</param>
            <param name="enabled">The enabled value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildManageBanker.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GuildManageBanker struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildManageBanker.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GuildManageBanker struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildManageBanker.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildManageBanker.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildManageBanker.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GuildManageBanker.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildManageBanker.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GuildMemberAdd">
            <summary>
            Represents the GuildMemberAdd packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GuildMemberAdd.GuildId">
            <summary>
            Gets or sets the guildid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GuildMemberAdd.Unknown04">
            <summary>
            Gets or sets the unknown04 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GuildMemberAdd.Unknown08">
            <summary>
            Gets or sets the unknown08 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GuildMemberAdd.Unknown12">
            <summary>
            Gets or sets the unknown12 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GuildMemberAdd.Level">
            <summary>
            Gets or sets the level value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GuildMemberAdd.Class">
            <summary>
            Gets or sets the class value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GuildMemberAdd.Rank">
            <summary>
            Gets or sets the rank value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GuildMemberAdd.ZoneId">
            <summary>
            Gets or sets the zoneid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GuildMemberAdd.LastOn">
            <summary>
            Gets or sets the laston value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GuildMemberAdd.PlayerName">
            <summary>
            Gets or sets the playername value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMemberAdd.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Byte[])">
            <summary>
            Initializes a new instance of the GuildMemberAdd struct with specified field values.
            </summary>
            <param name="guild_id">The guildid value.</param>
            <param name="unknown04">The unknown04 value.</param>
            <param name="unknown08">The unknown08 value.</param>
            <param name="unknown12">The unknown12 value.</param>
            <param name="level">The level value.</param>
            <param name="class_">The class value.</param>
            <param name="rank_">The rank value.</param>
            <param name="zone_id">The zoneid value.</param>
            <param name="last_on">The laston value.</param>
            <param name="player_name">The playername value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMemberAdd.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GuildMemberAdd struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMemberAdd.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GuildMemberAdd struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMemberAdd.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMemberAdd.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMemberAdd.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMemberAdd.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMemberAdd.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GuildMemberDelete">
            <summary>
            Represents the GuildMemberDelete packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GuildMemberDelete.GuildId">
            <summary>
            Gets or sets the guildid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GuildMemberDelete.PlayerName">
            <summary>
            Gets or sets the playername value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMemberDelete.#ctor(System.UInt32,System.Byte[])">
            <summary>
            Initializes a new instance of the GuildMemberDelete struct with specified field values.
            </summary>
            <param name="guild_id">The guildid value.</param>
            <param name="player_name">The playername value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMemberDelete.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GuildMemberDelete struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMemberDelete.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GuildMemberDelete struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMemberDelete.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMemberDelete.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMemberDelete.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMemberDelete.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMemberDelete.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GuildMemberDetails">
            <summary>
            Represents the GuildMemberDetails packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GuildMemberDetails.GuildId">
            <summary>
            Gets or sets the guildid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GuildMemberDetails.PlayerName">
            <summary>
            Gets or sets the playername value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GuildMemberDetails.ZoneId">
            <summary>
            Gets or sets the zoneid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GuildMemberDetails.LastOn">
            <summary>
            Gets or sets the laston value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GuildMemberDetails.OfflineMode">
            <summary>
            Gets or sets the offlinemode value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMemberDetails.#ctor(System.UInt32,System.Byte[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the GuildMemberDetails struct with specified field values.
            </summary>
            <param name="guild_id">The guildid value.</param>
            <param name="player_name">The playername value.</param>
            <param name="zone_id">The zoneid value.</param>
            <param name="last_on">The laston value.</param>
            <param name="offline_mode">The offlinemode value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMemberDetails.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GuildMemberDetails struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMemberDetails.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GuildMemberDetails struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMemberDetails.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMemberDetails.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMemberDetails.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMemberDetails.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMemberDetails.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GuildMemberLevel">
            <summary>
            Represents the GuildMemberLevel packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMemberLevel.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GuildMemberLevel struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMemberLevel.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GuildMemberLevel struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMemberLevel.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMemberLevel.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMemberLevel.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMemberLevel.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMemberLevel.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GuildMemberList">
            <summary>
            Represents the GuildMemberList packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GuildMemberList.PlayerName">
            <summary>
            Gets or sets the playername value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GuildMemberList.Count">
            <summary>
            Gets or sets the count value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GuildMemberList.Member">
            <summary>
            Gets or sets the member value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMemberList.#ctor(System.Byte,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the GuildMemberList struct with specified field values.
            </summary>
            <param name="player_name">The playername value.</param>
            <param name="count">The count value.</param>
            <param name="member">The member value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMemberList.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GuildMemberList struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMemberList.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GuildMemberList struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMemberList.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMemberList.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMemberList.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMemberList.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMemberList.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GuildMemberPublicNote">
            <summary>
            Represents the GuildMemberPublicNote packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMemberPublicNote.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GuildMemberPublicNote struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMemberPublicNote.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GuildMemberPublicNote struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMemberPublicNote.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMemberPublicNote.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMemberPublicNote.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMemberPublicNote.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMemberPublicNote.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GuildMemberRankAltBanker">
            <summary>
            Represents the GuildMemberRankAltBanker packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GuildMemberRankAltBanker.GuildId">
            <summary>
            Gets or sets the guildid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GuildMemberRankAltBanker.Rank">
            <summary>
            Gets or sets the rank value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GuildMemberRankAltBanker.PlayerName">
            <summary>
            Gets or sets the playername value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GuildMemberRankAltBanker.AltBanker">
            <summary>
            Gets or sets the altbanker value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMemberRankAltBanker.#ctor(System.UInt32,System.UInt32,System.Byte[],System.UInt32)">
            <summary>
            Initializes a new instance of the GuildMemberRankAltBanker struct with specified field values.
            </summary>
            <param name="guild_id">The guildid value.</param>
            <param name="rank_">The rank value.</param>
            <param name="player_name">The playername value.</param>
            <param name="alt_banker">The altbanker value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMemberRankAltBanker.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GuildMemberRankAltBanker struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMemberRankAltBanker.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GuildMemberRankAltBanker struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMemberRankAltBanker.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMemberRankAltBanker.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMemberRankAltBanker.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMemberRankAltBanker.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMemberRankAltBanker.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GuildMemberUpdate">
            <summary>
            Represents the GuildMemberUpdate packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMemberUpdate.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GuildMemberUpdate struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMemberUpdate.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GuildMemberUpdate struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMemberUpdate.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMemberUpdate.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMemberUpdate.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMemberUpdate.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMemberUpdate.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GuildMOTD">
            <summary>
            Represents the GuildMOTD packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GuildMOTD.Unknown0">
            <summary>
            Gets or sets the unknown0 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GuildMOTD.Name">
            <summary>
            Gets or sets the name value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GuildMOTD.SetbyName">
            <summary>
            Gets or sets the setbyname value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GuildMOTD.Unknown132">
            <summary>
            Gets or sets the unknown132 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GuildMOTD.Motd">
            <summary>
            Gets or sets the motd value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMOTD.#ctor(System.UInt32,System.Byte[],System.Byte[],System.UInt32,System.Byte)">
            <summary>
            Initializes a new instance of the GuildMOTD struct with specified field values.
            </summary>
            <param name="unknown0">The unknown0 value.</param>
            <param name="name">The name value.</param>
            <param name="setby_name">The setbyname value.</param>
            <param name="unknown132">The unknown132 value.</param>
            <param name="motd">The motd value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMOTD.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GuildMOTD struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMOTD.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GuildMOTD struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMOTD.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMOTD.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMOTD.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMOTD.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildMOTD.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GuildPeace">
            <summary>
            Represents the GuildPeace packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GuildPeace.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GuildPeace struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildPeace.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GuildPeace struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildPeace.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildPeace.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildPeace.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GuildPeace.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildPeace.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GuildPublicNote">
            <summary>
            Represents the GuildPublicNote packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GuildPublicNote.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GuildPublicNote struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildPublicNote.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GuildPublicNote struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildPublicNote.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildPublicNote.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildPublicNote.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GuildPublicNote.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildPublicNote.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GuildRemove">
            <summary>
            Represents the GuildRemove packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GuildRemove.Othername">
            <summary>
            Gets or sets the othername value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GuildRemove.Myname">
            <summary>
            Gets or sets the myname value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GuildRemove.Guildeqid">
            <summary>
            Gets or sets the guildeqid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GuildRemove.Unknown">
            <summary>
            Gets or sets the unknown value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GuildRemove.Officer">
            <summary>
            Gets or sets the officer value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GuildRemove.#ctor(System.Byte[],System.Byte[],System.UInt16,System.Byte[],System.UInt32)">
            <summary>
            Initializes a new instance of the GuildRemove struct with specified field values.
            </summary>
            <param name="othername">The othername value.</param>
            <param name="myname">The myname value.</param>
            <param name="guildeqid">The guildeqid value.</param>
            <param name="unknown">The unknown value.</param>
            <param name="officer">The officer value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildRemove.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GuildRemove struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildRemove.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GuildRemove struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildRemove.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildRemove.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildRemove.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GuildRemove.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildRemove.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GuildRenameGuild">
            <summary>
            Represents the GuildRenameGuild packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GuildRenameGuild.GuildId">
            <summary>
            Gets or sets the guildid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GuildRenameGuild.NewGuildName">
            <summary>
            Gets or sets the newguildname value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GuildRenameGuild.#ctor(System.UInt32,System.Byte[])">
            <summary>
            Initializes a new instance of the GuildRenameGuild struct with specified field values.
            </summary>
            <param name="guild_id">The guildid value.</param>
            <param name="new_guild_name">The newguildname value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildRenameGuild.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GuildRenameGuild struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildRenameGuild.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GuildRenameGuild struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildRenameGuild.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildRenameGuild.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildRenameGuild.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GuildRenameGuild.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildRenameGuild.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GuildStatus">
            <summary>
            Represents the GuildStatus packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GuildStatus.Name">
            <summary>
            Gets or sets the name value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.GuildStatus.Unknown064">
            <summary>
            Gets or sets the unknown064 value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GuildStatus.#ctor(System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the GuildStatus struct with specified field values.
            </summary>
            <param name="Name">The name value.</param>
            <param name="Unknown064">The unknown064 value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildStatus.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GuildStatus struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildStatus.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GuildStatus struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildStatus.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildStatus.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildStatus.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GuildStatus.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildStatus.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GuildWar">
            <summary>
            Represents the GuildWar packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GuildWar.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GuildWar struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildWar.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GuildWar struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildWar.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildWar.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildWar.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GuildWar.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GuildWar.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.Hide">
            <summary>
            Represents the Hide packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Hide.Action">
            <summary>
            Gets or sets the action value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Hide.Unknown04">
            <summary>
            Gets or sets the unknown04 value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.Hide.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the Hide struct with specified field values.
            </summary>
            <param name="Action">The action value.</param>
            <param name="Unknown04">The unknown04 value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Hide.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the Hide struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Hide.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the Hide struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Hide.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Hide.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Hide.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.Hide.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Hide.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.HideCorpse">
            <summary>
            Represents the HideCorpse packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.HideCorpse.Action">
            <summary>
            Gets or sets the action value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.HideCorpse.Unknown04">
            <summary>
            Gets or sets the unknown04 value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.HideCorpse.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the HideCorpse struct with specified field values.
            </summary>
            <param name="Action">The action value.</param>
            <param name="Unknown04">The unknown04 value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.HideCorpse.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the HideCorpse struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.HideCorpse.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the HideCorpse struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.HideCorpse.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.HideCorpse.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.HideCorpse.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.HideCorpse.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.HideCorpse.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.HPUpdate">
            <summary>
            Represents the HPUpdate packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.HPUpdate.CurHp">
            <summary>
            Gets or sets the curhp value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.HPUpdate.MaxHp">
            <summary>
            Gets or sets the maxhp value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.HPUpdate.SpawnId">
            <summary>
            Gets or sets the spawnid value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.HPUpdate.#ctor(System.UInt32,System.Int32,System.Int16)">
            <summary>
            Initializes a new instance of the HPUpdate struct with specified field values.
            </summary>
            <param name="cur_hp">The curhp value.</param>
            <param name="max_hp">The maxhp value.</param>
            <param name="spawn_id">The spawnid value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.HPUpdate.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the HPUpdate struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.HPUpdate.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the HPUpdate struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.HPUpdate.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.HPUpdate.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.HPUpdate.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.HPUpdate.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.HPUpdate.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.Illusion">
            <summary>
            Represents the Illusion packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.Illusion.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.IncreaseStats">
            <summary>
            Represents the IncreaseStats packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.IncreaseStats.Unknown0">
            <summary>
            Gets or sets the unknown0 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.IncreaseStats.Str">
            <summary>
            Gets or sets the str value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.IncreaseStats.Sta">
            <summary>
            Gets or sets the sta value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.IncreaseStats.Agi">
            <summary>
            Gets or sets the agi value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.IncreaseStats.Dex">
            <summary>
            Gets or sets the dex value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.IncreaseStats.Int">
            <summary>
            Gets or sets the int value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.IncreaseStats.Wis">
            <summary>
            Gets or sets the wis value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.IncreaseStats.Cha">
            <summary>
            Gets or sets the cha value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.IncreaseStats.Fire">
            <summary>
            Gets or sets the fire value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.IncreaseStats.Cold">
            <summary>
            Gets or sets the cold value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.IncreaseStats.Magic">
            <summary>
            Gets or sets the magic value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.IncreaseStats.Poison">
            <summary>
            Gets or sets the poison value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.IncreaseStats.Disease">
            <summary>
            Gets or sets the disease value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.IncreaseStats.Unknown13">
            <summary>
            Gets or sets the unknown13 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.IncreaseStats.Str2">
            <summary>
            Gets or sets the str2 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.IncreaseStats.Sta2">
            <summary>
            Gets or sets the sta2 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.IncreaseStats.Agi2">
            <summary>
            Gets or sets the agi2 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.IncreaseStats.Dex2">
            <summary>
            Gets or sets the dex2 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.IncreaseStats.Int2">
            <summary>
            Gets or sets the int2 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.IncreaseStats.Wis2">
            <summary>
            Gets or sets the wis2 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.IncreaseStats.Cha2">
            <summary>
            Gets or sets the cha2 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.IncreaseStats.Fire2">
            <summary>
            Gets or sets the fire2 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.IncreaseStats.Cold2">
            <summary>
            Gets or sets the cold2 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.IncreaseStats.Magic2">
            <summary>
            Gets or sets the magic2 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.IncreaseStats.Poison2">
            <summary>
            Gets or sets the poison2 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.IncreaseStats.Disease2">
            <summary>
            Gets or sets the disease2 value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.IncreaseStats.#ctor(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte[],System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the IncreaseStats struct with specified field values.
            </summary>
            <param name="unknown0">The unknown0 value.</param>
            <param name="str">The str value.</param>
            <param name="sta">The sta value.</param>
            <param name="agi">The agi value.</param>
            <param name="dex">The dex value.</param>
            <param name="int_">The int value.</param>
            <param name="wis">The wis value.</param>
            <param name="cha">The cha value.</param>
            <param name="fire">The fire value.</param>
            <param name="cold">The cold value.</param>
            <param name="magic">The magic value.</param>
            <param name="poison">The poison value.</param>
            <param name="disease">The disease value.</param>
            <param name="unknown13">The unknown13 value.</param>
            <param name="str2">The str2 value.</param>
            <param name="sta2">The sta2 value.</param>
            <param name="agi2">The agi2 value.</param>
            <param name="dex2">The dex2 value.</param>
            <param name="int_2">The int2 value.</param>
            <param name="wis2">The wis2 value.</param>
            <param name="cha2">The cha2 value.</param>
            <param name="fire2">The fire2 value.</param>
            <param name="cold2">The cold2 value.</param>
            <param name="magic2">The magic2 value.</param>
            <param name="poison2">The poison2 value.</param>
            <param name="disease2">The disease2 value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.IncreaseStats.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the IncreaseStats struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.IncreaseStats.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the IncreaseStats struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.IncreaseStats.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.IncreaseStats.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.IncreaseStats.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.IncreaseStats.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.IncreaseStats.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.InitialMobHealth">
            <summary>
            Represents the InitialMobHealth packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.InitialMobHealth.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the InitialMobHealth struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.InitialMobHealth.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the InitialMobHealth struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.InitialMobHealth.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.InitialMobHealth.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.InitialMobHealth.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.InitialMobHealth.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.InitialMobHealth.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.InspectAnswer">
            <summary>
            Represents the InspectAnswer packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.InspectAnswer.Targetid">
            <summary>
            Gets or sets the targetid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.InspectAnswer.Playerid">
            <summary>
            Gets or sets the playerid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.InspectAnswer.Itemicons">
            <summary>
            Gets or sets the itemicons value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.InspectAnswer.Text">
            <summary>
            Gets or sets the text value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.InspectAnswer.#ctor(System.UInt32,System.UInt32,System.UInt32[],System.Byte[])">
            <summary>
            Initializes a new instance of the InspectAnswer struct with specified field values.
            </summary>
            <param name="TargetID">The targetid value.</param>
            <param name="playerid">The playerid value.</param>
            <param name="itemicons">The itemicons value.</param>
            <param name="text">The text value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.InspectAnswer.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the InspectAnswer struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.InspectAnswer.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the InspectAnswer struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.InspectAnswer.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.InspectAnswer.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.InspectAnswer.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.InspectAnswer.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.InspectAnswer.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.InspectBuffs">
            <summary>
            Represents the InspectBuffs packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.InspectBuffs.SpellId">
            <summary>
            Gets or sets the spellid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.InspectBuffs.TicsRemaining">
            <summary>
            Gets or sets the ticsremaining value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.InspectBuffs.#ctor(System.UInt32,System.Int32)">
            <summary>
            Initializes a new instance of the InspectBuffs struct with specified field values.
            </summary>
            <param name="spell_id">The spellid value.</param>
            <param name="tics_remaining">The ticsremaining value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.InspectBuffs.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the InspectBuffs struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.InspectBuffs.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the InspectBuffs struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.InspectBuffs.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.InspectBuffs.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.InspectBuffs.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.InspectBuffs.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.InspectBuffs.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.InspectMessageUpdate">
            <summary>
            Represents the InspectMessageUpdate packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.InspectMessageUpdate.Text">
            <summary>
            Gets or sets the text value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.InspectMessageUpdate.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the InspectMessageUpdate struct with specified field values.
            </summary>
            <param name="text">The text value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.InspectMessageUpdate.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the InspectMessageUpdate struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.InspectMessageUpdate.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the InspectMessageUpdate struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.InspectMessageUpdate.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.InspectMessageUpdate.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.InspectMessageUpdate.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.InspectMessageUpdate.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.InspectMessageUpdate.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.InspectRequest">
            <summary>
            Represents the InspectRequest packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.InspectRequest.Targetid">
            <summary>
            Gets or sets the targetid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.InspectRequest.Playerid">
            <summary>
            Gets or sets the playerid value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.InspectRequest.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the InspectRequest struct with specified field values.
            </summary>
            <param name="TargetID">The targetid value.</param>
            <param name="PlayerID">The playerid value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.InspectRequest.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the InspectRequest struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.InspectRequest.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the InspectRequest struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.InspectRequest.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.InspectRequest.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.InspectRequest.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.InspectRequest.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.InspectRequest.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.InstillDoubt">
            <summary>
            Represents the InstillDoubt packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.InstillDoubt.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the InstillDoubt struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.InstillDoubt.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the InstillDoubt struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.InstillDoubt.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.InstillDoubt.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.InstillDoubt.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.InstillDoubt.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.InstillDoubt.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.InterruptCast">
            <summary>
            Represents the InterruptCast packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.InterruptCast.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.ItemAdvancedLoreText">
            <summary>
            Represents the ItemAdvancedLoreText packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.ItemAdvancedLoreText.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the ItemAdvancedLoreText struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ItemAdvancedLoreText.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the ItemAdvancedLoreText struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ItemAdvancedLoreText.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ItemAdvancedLoreText.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ItemAdvancedLoreText.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.ItemAdvancedLoreText.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ItemAdvancedLoreText.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.ItemLinkClick">
            <summary>
            Represents the ItemLinkClick packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ItemLinkClick.ItemId">
            <summary>
            Gets or sets the itemid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ItemLinkClick.Augments">
            <summary>
            Gets or sets the augments value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ItemLinkClick.LinkHash">
            <summary>
            Gets or sets the linkhash value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ItemLinkClick.Unknown028">
            <summary>
            Gets or sets the unknown028 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ItemLinkClick.Unknown032">
            <summary>
            Gets or sets the unknown032 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ItemLinkClick.Icon">
            <summary>
            Gets or sets the icon value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ItemLinkClick.Unknown046">
            <summary>
            Gets or sets the unknown046 value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.ItemLinkClick.#ctor(System.UInt32,System.UInt32[],System.UInt32,System.UInt32,System.Byte[],System.UInt16,System.Byte[])">
            <summary>
            Initializes a new instance of the ItemLinkClick struct with specified field values.
            </summary>
            <param name="item_id">The itemid value.</param>
            <param name="augments">The augments value.</param>
            <param name="link_hash">The linkhash value.</param>
            <param name="unknown028">The unknown028 value.</param>
            <param name="unknown032">The unknown032 value.</param>
            <param name="icon">The icon value.</param>
            <param name="unknown046">The unknown046 value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ItemLinkClick.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the ItemLinkClick struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ItemLinkClick.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the ItemLinkClick struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ItemLinkClick.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ItemLinkClick.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ItemLinkClick.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.ItemLinkClick.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ItemLinkClick.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.ItemLinkResponse">
            <summary>
            Represents the ItemLinkResponse packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.ItemLinkResponse.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the ItemLinkResponse struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ItemLinkResponse.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the ItemLinkResponse struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ItemLinkResponse.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ItemLinkResponse.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ItemLinkResponse.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.ItemLinkResponse.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ItemLinkResponse.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.ItemPacket">
            <summary>
            Represents the ItemPacket packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.ItemPacket.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the ItemPacket struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ItemPacket.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the ItemPacket struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ItemPacket.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ItemPacket.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ItemPacket.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.ItemPacket.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ItemPacket.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.ItemVerifyReply">
            <summary>
            Represents the ItemVerifyReply packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ItemVerifyReply.Slot">
            <summary>
            Gets or sets the slot value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ItemVerifyReply.Spell">
            <summary>
            Gets or sets the spell value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ItemVerifyReply.Target">
            <summary>
            Gets or sets the target value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.ItemVerifyReply.#ctor(System.Int32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the ItemVerifyReply struct with specified field values.
            </summary>
            <param name="slot">The slot value.</param>
            <param name="spell">The spell value.</param>
            <param name="target">The target value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ItemVerifyReply.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the ItemVerifyReply struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ItemVerifyReply.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the ItemVerifyReply struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ItemVerifyReply.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ItemVerifyReply.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ItemVerifyReply.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.ItemVerifyReply.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ItemVerifyReply.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.ItemVerifyRequest">
            <summary>
            Represents the ItemVerifyRequest packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ItemVerifyRequest.Slot">
            <summary>
            Gets or sets the slot value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ItemVerifyRequest.Target">
            <summary>
            Gets or sets the target value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.ItemVerifyRequest.#ctor(System.Int32,System.UInt32)">
            <summary>
            Initializes a new instance of the ItemVerifyRequest struct with specified field values.
            </summary>
            <param name="slot">The slot value.</param>
            <param name="target">The target value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ItemVerifyRequest.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the ItemVerifyRequest struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ItemVerifyRequest.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the ItemVerifyRequest struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ItemVerifyRequest.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ItemVerifyRequest.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ItemVerifyRequest.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.ItemVerifyRequest.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ItemVerifyRequest.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.Jump">
            <summary>
            Represents the Jump packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.Jump.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the Jump struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Jump.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the Jump struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Jump.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Jump.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Jump.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.Jump.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Jump.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.KeyRing">
            <summary>
            Represents the KeyRing packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.KeyRing.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the KeyRing struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.KeyRing.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the KeyRing struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.KeyRing.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.KeyRing.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.KeyRing.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.KeyRing.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.KeyRing.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.LDoNButton">
            <summary>
            Represents the LDoNButton packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.LDoNButton.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the LDoNButton struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LDoNButton.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the LDoNButton struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LDoNButton.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LDoNButton.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LDoNButton.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.LDoNButton.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LDoNButton.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.LDoNDisarmTraps">
            <summary>
            Represents the LDoNDisarmTraps packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.LDoNDisarmTraps.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the LDoNDisarmTraps struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LDoNDisarmTraps.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the LDoNDisarmTraps struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LDoNDisarmTraps.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LDoNDisarmTraps.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LDoNDisarmTraps.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.LDoNDisarmTraps.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LDoNDisarmTraps.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.LDoNInspect">
            <summary>
            Represents the LDoNInspect packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.LDoNInspect.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the LDoNInspect struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LDoNInspect.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the LDoNInspect struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LDoNInspect.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LDoNInspect.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LDoNInspect.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.LDoNInspect.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LDoNInspect.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.LDoNOpen">
            <summary>
            Represents the LDoNOpen packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.LDoNOpen.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the LDoNOpen struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LDoNOpen.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the LDoNOpen struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LDoNOpen.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LDoNOpen.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LDoNOpen.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.LDoNOpen.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LDoNOpen.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.LDoNPickLock">
            <summary>
            Represents the LDoNPickLock packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.LDoNPickLock.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the LDoNPickLock struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LDoNPickLock.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the LDoNPickLock struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LDoNPickLock.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LDoNPickLock.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LDoNPickLock.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.LDoNPickLock.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LDoNPickLock.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.LeadershipExpToggle">
            <summary>
            Represents the LeadershipExpToggle packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.LeadershipExpToggle.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the LeadershipExpToggle struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LeadershipExpToggle.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the LeadershipExpToggle struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LeadershipExpToggle.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LeadershipExpToggle.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LeadershipExpToggle.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.LeadershipExpToggle.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LeadershipExpToggle.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.LeadershipExpUpdate">
            <summary>
            Represents the LeadershipExpUpdate packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LeadershipExpUpdate.GroupLeadershipExp">
            <summary>
            Gets or sets the groupleadershipexp value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LeadershipExpUpdate.GroupLeadershipPoints">
            <summary>
            Gets or sets the groupleadershippoints value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LeadershipExpUpdate.Unknown12">
            <summary>
            Gets or sets the unknown12 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LeadershipExpUpdate.RaidLeadershipExp">
            <summary>
            Gets or sets the raidleadershipexp value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LeadershipExpUpdate.RaidLeadershipPoints">
            <summary>
            Gets or sets the raidleadershippoints value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.LeadershipExpUpdate.#ctor(System.Double,System.UInt32,System.UInt32,System.Double,System.UInt32)">
            <summary>
            Initializes a new instance of the LeadershipExpUpdate struct with specified field values.
            </summary>
            <param name="group_leadership_exp">The groupleadershipexp value.</param>
            <param name="group_leadership_points">The groupleadershippoints value.</param>
            <param name="Unknown12">The unknown12 value.</param>
            <param name="raid_leadership_exp">The raidleadershipexp value.</param>
            <param name="raid_leadership_points">The raidleadershippoints value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LeadershipExpUpdate.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the LeadershipExpUpdate struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LeadershipExpUpdate.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the LeadershipExpUpdate struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LeadershipExpUpdate.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LeadershipExpUpdate.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LeadershipExpUpdate.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.LeadershipExpUpdate.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LeadershipExpUpdate.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.LeaveAdventure">
            <summary>
            Represents the LeaveAdventure packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.LeaveAdventure.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the LeaveAdventure struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LeaveAdventure.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the LeaveAdventure struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LeaveAdventure.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LeaveAdventure.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LeaveAdventure.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.LeaveAdventure.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LeaveAdventure.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.LeaveBoat">
            <summary>
            Represents the LeaveBoat packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.LeaveBoat.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the LeaveBoat struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LeaveBoat.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the LeaveBoat struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LeaveBoat.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LeaveBoat.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LeaveBoat.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.LeaveBoat.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LeaveBoat.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.LevelAppearance">
            <summary>
            Represents the LevelAppearance packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LevelAppearance.SpawnId">
            <summary>
            Gets or sets the spawnid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LevelAppearance.Parm1">
            <summary>
            Gets or sets the parm1 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LevelAppearance.Value1a">
            <summary>
            Gets or sets the value1a value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LevelAppearance.Value1b">
            <summary>
            Gets or sets the value1b value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LevelAppearance.Parm2">
            <summary>
            Gets or sets the parm2 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LevelAppearance.Value2a">
            <summary>
            Gets or sets the value2a value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LevelAppearance.Value2b">
            <summary>
            Gets or sets the value2b value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LevelAppearance.Parm3">
            <summary>
            Gets or sets the parm3 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LevelAppearance.Value3a">
            <summary>
            Gets or sets the value3a value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LevelAppearance.Value3b">
            <summary>
            Gets or sets the value3b value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LevelAppearance.Parm4">
            <summary>
            Gets or sets the parm4 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LevelAppearance.Value4a">
            <summary>
            Gets or sets the value4a value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LevelAppearance.Value4b">
            <summary>
            Gets or sets the value4b value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LevelAppearance.Parm5">
            <summary>
            Gets or sets the parm5 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LevelAppearance.Value5a">
            <summary>
            Gets or sets the value5a value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LevelAppearance.Value5b">
            <summary>
            Gets or sets the value5b value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.LevelAppearance.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the LevelAppearance struct with specified field values.
            </summary>
            <param name="spawn_id">The spawnid value.</param>
            <param name="parm1">The parm1 value.</param>
            <param name="value1a">The value1a value.</param>
            <param name="value1b">The value1b value.</param>
            <param name="parm2">The parm2 value.</param>
            <param name="value2a">The value2a value.</param>
            <param name="value2b">The value2b value.</param>
            <param name="parm3">The parm3 value.</param>
            <param name="value3a">The value3a value.</param>
            <param name="value3b">The value3b value.</param>
            <param name="parm4">The parm4 value.</param>
            <param name="value4a">The value4a value.</param>
            <param name="value4b">The value4b value.</param>
            <param name="parm5">The parm5 value.</param>
            <param name="value5a">The value5a value.</param>
            <param name="value5b">The value5b value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LevelAppearance.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the LevelAppearance struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LevelAppearance.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the LevelAppearance struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LevelAppearance.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LevelAppearance.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LevelAppearance.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.LevelAppearance.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LevelAppearance.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.LevelUpdate">
            <summary>
            Represents the LevelUpdate packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LevelUpdate.Level">
            <summary>
            Gets or sets the level value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LevelUpdate.LevelOld">
            <summary>
            Gets or sets the levelold value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LevelUpdate.Exp">
            <summary>
            Gets or sets the exp value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.LevelUpdate.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the LevelUpdate struct with specified field values.
            </summary>
            <param name="level">The level value.</param>
            <param name="level_old">The levelold value.</param>
            <param name="exp">The exp value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LevelUpdate.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the LevelUpdate struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LevelUpdate.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the LevelUpdate struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LevelUpdate.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LevelUpdate.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LevelUpdate.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.LevelUpdate.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LevelUpdate.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.LFGCommand">
            <summary>
            Represents the LFGCommand packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LFGCommand.Unknown000">
            <summary>
            Gets or sets the unknown000 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LFGCommand.Value">
            <summary>
            Gets or sets the value value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LFGCommand.Unknown008">
            <summary>
            Gets or sets the unknown008 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LFGCommand.Unknown012">
            <summary>
            Gets or sets the unknown012 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LFGCommand.Name">
            <summary>
            Gets or sets the name value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.LFGCommand.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Byte[])">
            <summary>
            Initializes a new instance of the LFGCommand struct with specified field values.
            </summary>
            <param name="unknown000">The unknown000 value.</param>
            <param name="value">The value value.</param>
            <param name="unknown008">The unknown008 value.</param>
            <param name="unknown012">The unknown012 value.</param>
            <param name="name">The name value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LFGCommand.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the LFGCommand struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LFGCommand.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the LFGCommand struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LFGCommand.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LFGCommand.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LFGCommand.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.LFGCommand.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LFGCommand.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.LFGGetMatchesRequest">
            <summary>
            Represents the LFGGetMatchesRequest packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LFGGetMatchesRequest.SpawnId">
            <summary>
            Gets or sets the spawnid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LFGGetMatchesRequest.Lfg">
            <summary>
            Gets or sets the lfg value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.LFGGetMatchesRequest.#ctor(System.UInt32,System.Byte)">
            <summary>
            Initializes a new instance of the LFGGetMatchesRequest struct with specified field values.
            </summary>
            <param name="spawn_id">The spawnid value.</param>
            <param name="lfg">The lfg value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LFGGetMatchesRequest.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the LFGGetMatchesRequest struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LFGGetMatchesRequest.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the LFGGetMatchesRequest struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LFGGetMatchesRequest.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LFGGetMatchesRequest.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LFGGetMatchesRequest.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.LFGGetMatchesRequest.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LFGGetMatchesRequest.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.LFGGetMatchesResponse">
            <summary>
            Represents the LFGGetMatchesResponse packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.LFGGetMatchesResponse.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the LFGGetMatchesResponse struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LFGGetMatchesResponse.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the LFGGetMatchesResponse struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LFGGetMatchesResponse.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LFGGetMatchesResponse.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LFGGetMatchesResponse.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.LFGGetMatchesResponse.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LFGGetMatchesResponse.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.LFGuild">
            <summary>
            Represents the LFGuild packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.LFGuild.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the LFGuild struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LFGuild.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the LFGuild struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LFGuild.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LFGuild.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LFGuild.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.LFGuild.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LFGuild.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.LFPCommand">
            <summary>
            Represents the LFPCommand packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LFPCommand.Unknown000">
            <summary>
            Gets or sets the unknown000 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LFPCommand.Action">
            <summary>
            Gets or sets the action value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LFPCommand.Matchfilter">
            <summary>
            Gets or sets the matchfilter value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LFPCommand.Unknown006">
            <summary>
            Gets or sets the unknown006 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LFPCommand.Fromlevel">
            <summary>
            Gets or sets the fromlevel value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LFPCommand.Tolevel">
            <summary>
            Gets or sets the tolevel value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LFPCommand.Classes">
            <summary>
            Gets or sets the classes value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LFPCommand.Comments">
            <summary>
            Gets or sets the comments value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.LFPCommand.#ctor(System.UInt32,System.Byte,System.Byte,System.UInt16,System.UInt32,System.UInt32,System.UInt32,System.Byte[])">
            <summary>
            Initializes a new instance of the LFPCommand struct with specified field values.
            </summary>
            <param name="Unknown000">The unknown000 value.</param>
            <param name="Action">The action value.</param>
            <param name="MatchFilter">The matchfilter value.</param>
            <param name="Unknown006">The unknown006 value.</param>
            <param name="FromLevel">The fromlevel value.</param>
            <param name="ToLevel">The tolevel value.</param>
            <param name="Classes">The classes value.</param>
            <param name="Comments">The comments value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LFPCommand.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the LFPCommand struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LFPCommand.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the LFPCommand struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LFPCommand.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LFPCommand.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LFPCommand.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.LFPCommand.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LFPCommand.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.LFPGetMatchesRequest">
            <summary>
            Represents the LFPGetMatchesRequest packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LFPGetMatchesRequest.Unknown000">
            <summary>
            Gets or sets the unknown000 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LFPGetMatchesRequest.Fromlevel">
            <summary>
            Gets or sets the fromlevel value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LFPGetMatchesRequest.Tolevel">
            <summary>
            Gets or sets the tolevel value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.LFPGetMatchesRequest.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the LFPGetMatchesRequest struct with specified field values.
            </summary>
            <param name="Unknown000">The unknown000 value.</param>
            <param name="FromLevel">The fromlevel value.</param>
            <param name="ToLevel">The tolevel value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LFPGetMatchesRequest.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the LFPGetMatchesRequest struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LFPGetMatchesRequest.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the LFPGetMatchesRequest struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LFPGetMatchesRequest.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LFPGetMatchesRequest.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LFPGetMatchesRequest.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.LFPGetMatchesRequest.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LFPGetMatchesRequest.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.LFPGetMatchesResponse">
            <summary>
            Represents the LFPGetMatchesResponse packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.LFPGetMatchesResponse.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the LFPGetMatchesResponse struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LFPGetMatchesResponse.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the LFPGetMatchesResponse struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LFPGetMatchesResponse.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LFPGetMatchesResponse.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LFPGetMatchesResponse.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.LFPGetMatchesResponse.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LFPGetMatchesResponse.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.LinkedReuse">
            <summary>
            Represents the LinkedReuse packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LinkedReuse.TimerId">
            <summary>
            Gets or sets the timerid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LinkedReuse.EndTime">
            <summary>
            Gets or sets the endtime value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LinkedReuse.StartTime">
            <summary>
            Gets or sets the starttime value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.LinkedReuse.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the LinkedReuse struct with specified field values.
            </summary>
            <param name="timer_id">The timerid value.</param>
            <param name="end_time">The endtime value.</param>
            <param name="start_time">The starttime value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LinkedReuse.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the LinkedReuse struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LinkedReuse.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the LinkedReuse struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LinkedReuse.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LinkedReuse.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LinkedReuse.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.LinkedReuse.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LinkedReuse.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.LoadSpellSet">
            <summary>
            Represents the LoadSpellSet packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LoadSpellSet.Spell">
            <summary>
            Gets or sets the spell value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LoadSpellSet.Unknown">
            <summary>
            Gets or sets the unknown value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.LoadSpellSet.#ctor(System.Byte,System.UInt32)">
            <summary>
            Initializes a new instance of the LoadSpellSet struct with specified field values.
            </summary>
            <param name="spell">The spell value.</param>
            <param name="unknown">The unknown value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LoadSpellSet.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the LoadSpellSet struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LoadSpellSet.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the LoadSpellSet struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LoadSpellSet.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LoadSpellSet.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LoadSpellSet.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.LoadSpellSet.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LoadSpellSet.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.Logout">
            <summary>
            Represents the Logout packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Logout.EntityId">
            <summary>
            Gets or sets the entityid value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.Logout.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the Logout struct with specified field values.
            </summary>
            <param name="entity_id">The entityid value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Logout.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the Logout struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Logout.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the Logout struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Logout.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Logout.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Logout.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.Logout.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Logout.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.LootComplete">
            <summary>
            Represents the LootComplete packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LootComplete.Lootee">
            <summary>
            Gets or sets the lootee value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LootComplete.Looter">
            <summary>
            Gets or sets the looter value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LootComplete.SlotId">
            <summary>
            Gets or sets the slotid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LootComplete.AutoLoot">
            <summary>
            Gets or sets the autoloot value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LootComplete.Unknown16">
            <summary>
            Gets or sets the unknown16 value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.LootComplete.#ctor(System.UInt32,System.UInt32,System.UInt32,System.Int32,System.UInt32)">
            <summary>
            Initializes a new instance of the LootComplete struct with specified field values.
            </summary>
            <param name="lootee">The lootee value.</param>
            <param name="looter">The looter value.</param>
            <param name="slot_id">The slotid value.</param>
            <param name="auto_loot">The autoloot value.</param>
            <param name="unknown16">The unknown16 value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LootComplete.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the LootComplete struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LootComplete.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the LootComplete struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LootComplete.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LootComplete.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LootComplete.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.LootComplete.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LootComplete.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.LootItem">
            <summary>
            Represents the LootItem packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LootItem.Lootee">
            <summary>
            Gets or sets the lootee value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LootItem.Looter">
            <summary>
            Gets or sets the looter value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LootItem.SlotId">
            <summary>
            Gets or sets the slotid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LootItem.AutoLoot">
            <summary>
            Gets or sets the autoloot value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.LootItem.Unknown16">
            <summary>
            Gets or sets the unknown16 value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.LootItem.#ctor(System.UInt32,System.UInt32,System.UInt32,System.Int32,System.UInt32)">
            <summary>
            Initializes a new instance of the LootItem struct with specified field values.
            </summary>
            <param name="lootee">The lootee value.</param>
            <param name="looter">The looter value.</param>
            <param name="slot_id">The slotid value.</param>
            <param name="auto_loot">The autoloot value.</param>
            <param name="unknown16">The unknown16 value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LootItem.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the LootItem struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LootItem.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the LootItem struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LootItem.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LootItem.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LootItem.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.LootItem.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LootItem.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.LootRequest">
            <summary>
            Represents the LootRequest packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.LootRequest.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the LootRequest struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LootRequest.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the LootRequest struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LootRequest.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LootRequest.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LootRequest.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.LootRequest.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LootRequest.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.ManaChange">
            <summary>
            Represents the ManaChange packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ManaChange.NewMana">
            <summary>
            Gets or sets the newmana value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ManaChange.Stamina">
            <summary>
            Gets or sets the stamina value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ManaChange.SpellId">
            <summary>
            Gets or sets the spellid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ManaChange.Keepcasting">
            <summary>
            Gets or sets the keepcasting value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ManaChange.Padding">
            <summary>
            Gets or sets the padding value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ManaChange.Slot">
            <summary>
            Gets or sets the slot value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.ManaChange.#ctor(System.UInt32,System.UInt32,System.UInt32,System.Byte,System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the ManaChange struct with specified field values.
            </summary>
            <param name="new_mana">The newmana value.</param>
            <param name="stamina">The stamina value.</param>
            <param name="spell_id">The spellid value.</param>
            <param name="keepcasting">The keepcasting value.</param>
            <param name="padding">The padding value.</param>
            <param name="slot">The slot value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ManaChange.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the ManaChange struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ManaChange.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the ManaChange struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ManaChange.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ManaChange.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ManaChange.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.ManaChange.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ManaChange.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.ManaUpdate">
            <summary>
            Represents the ManaUpdate packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ManaUpdate.CurMana">
            <summary>
            Gets or sets the curmana value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ManaUpdate.MaxMana">
            <summary>
            Gets or sets the maxmana value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ManaUpdate.SpawnId">
            <summary>
            Gets or sets the spawnid value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.ManaUpdate.#ctor(System.UInt32,System.UInt32,System.UInt16)">
            <summary>
            Initializes a new instance of the ManaUpdate struct with specified field values.
            </summary>
            <param name="cur_mana">The curmana value.</param>
            <param name="max_mana">The maxmana value.</param>
            <param name="spawn_id">The spawnid value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ManaUpdate.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the ManaUpdate struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ManaUpdate.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the ManaUpdate struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ManaUpdate.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ManaUpdate.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ManaUpdate.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.ManaUpdate.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ManaUpdate.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.MarkNPC">
            <summary>
            Represents the MarkNPC packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.MarkNPC.Targetid">
            <summary>
            Gets or sets the targetid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.MarkNPC.Number">
            <summary>
            Gets or sets the number value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.MarkNPC.Name">
            <summary>
            Gets or sets the name value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.MarkNPC.#ctor(System.UInt32,System.UInt32,System.Byte[])">
            <summary>
            Initializes a new instance of the MarkNPC struct with specified field values.
            </summary>
            <param name="TargetID">The targetid value.</param>
            <param name="Number">The number value.</param>
            <param name="Name">The name value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MarkNPC.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the MarkNPC struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MarkNPC.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the MarkNPC struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MarkNPC.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MarkNPC.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MarkNPC.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.MarkNPC.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MarkNPC.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.MarkRaidNPC">
            <summary>
            Represents the MarkRaidNPC packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.MarkRaidNPC.Targetid">
            <summary>
            Gets or sets the targetid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.MarkRaidNPC.Number">
            <summary>
            Gets or sets the number value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.MarkRaidNPC.Name">
            <summary>
            Gets or sets the name value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.MarkRaidNPC.#ctor(System.UInt32,System.UInt32,System.Byte[])">
            <summary>
            Initializes a new instance of the MarkRaidNPC struct with specified field values.
            </summary>
            <param name="TargetID">The targetid value.</param>
            <param name="Number">The number value.</param>
            <param name="Name">The name value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MarkRaidNPC.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the MarkRaidNPC struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MarkRaidNPC.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the MarkRaidNPC struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MarkRaidNPC.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MarkRaidNPC.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MarkRaidNPC.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.MarkRaidNPC.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MarkRaidNPC.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.Marquee">
            <summary>
            Represents the Marquee packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Marquee.Type">
            <summary>
            Gets or sets the type value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Marquee.Unk04">
            <summary>
            Gets or sets the unk04 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Marquee.Priority">
            <summary>
            Gets or sets the priority value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Marquee.FadeInTime">
            <summary>
            Gets or sets the fadeintime value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Marquee.FadeOutTime">
            <summary>
            Gets or sets the fadeouttime value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Marquee.Duration">
            <summary>
            Gets or sets the duration value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Marquee.Msg">
            <summary>
            Gets or sets the msg value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.Marquee.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Byte)">
            <summary>
            Initializes a new instance of the Marquee struct with specified field values.
            </summary>
            <param name="type">The type value.</param>
            <param name="unk04">The unk04 value.</param>
            <param name="priority">The priority value.</param>
            <param name="fade_in_time">The fadeintime value.</param>
            <param name="fade_out_time">The fadeouttime value.</param>
            <param name="duration">The duration value.</param>
            <param name="msg">The msg value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Marquee.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the Marquee struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Marquee.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the Marquee struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Marquee.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Marquee.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Marquee.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.Marquee.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Marquee.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.MemorizeSpell">
            <summary>
            Represents the MemorizeSpell packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.MemorizeSpell.Slot">
            <summary>
            Gets or sets the slot value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.MemorizeSpell.SpellId">
            <summary>
            Gets or sets the spellid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.MemorizeSpell.Scribing">
            <summary>
            Gets or sets the scribing value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.MemorizeSpell.Reduction">
            <summary>
            Gets or sets the reduction value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.MemorizeSpell.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the MemorizeSpell struct with specified field values.
            </summary>
            <param name="slot">The slot value.</param>
            <param name="spell_id">The spellid value.</param>
            <param name="scribing">The scribing value.</param>
            <param name="reduction">The reduction value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MemorizeSpell.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the MemorizeSpell struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MemorizeSpell.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the MemorizeSpell struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MemorizeSpell.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MemorizeSpell.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MemorizeSpell.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.MemorizeSpell.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MemorizeSpell.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.Mend">
            <summary>
            Represents the Mend packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.Mend.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the Mend struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Mend.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the Mend struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Mend.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Mend.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Mend.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.Mend.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Mend.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.MercenaryAssign">
            <summary>
            Represents the MercenaryAssign packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.MercenaryAssign.Mercentityid">
            <summary>
            Gets or sets the mercentityid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.MercenaryAssign.Mercunk01">
            <summary>
            Gets or sets the mercunk01 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.MercenaryAssign.Mercunk02">
            <summary>
            Gets or sets the mercunk02 value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryAssign.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the MercenaryAssign struct with specified field values.
            </summary>
            <param name="MercEntityID">The mercentityid value.</param>
            <param name="MercUnk01">The mercunk01 value.</param>
            <param name="MercUnk02">The mercunk02 value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryAssign.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the MercenaryAssign struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryAssign.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the MercenaryAssign struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryAssign.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryAssign.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryAssign.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryAssign.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryAssign.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.MercenaryCommand">
            <summary>
            Represents the MercenaryCommand packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.MercenaryCommand.Merccommand">
            <summary>
            Gets or sets the merccommand value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.MercenaryCommand.Option">
            <summary>
            Gets or sets the option value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryCommand.#ctor(System.UInt32,System.Int32)">
            <summary>
            Initializes a new instance of the MercenaryCommand struct with specified field values.
            </summary>
            <param name="MercCommand">The merccommand value.</param>
            <param name="Option">The option value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryCommand.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the MercenaryCommand struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryCommand.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the MercenaryCommand struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryCommand.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryCommand.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryCommand.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryCommand.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryCommand.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.MercenaryDataRequest">
            <summary>
            Represents the MercenaryDataRequest packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.MercenaryDataRequest.Mercmerchantid">
            <summary>
            Gets or sets the mercmerchantid value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryDataRequest.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the MercenaryDataRequest struct with specified field values.
            </summary>
            <param name="MercMerchantID">The mercmerchantid value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryDataRequest.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the MercenaryDataRequest struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryDataRequest.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the MercenaryDataRequest struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryDataRequest.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryDataRequest.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryDataRequest.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryDataRequest.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryDataRequest.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.MercenaryDataResponse">
            <summary>
            Represents the MercenaryDataResponse packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.MercenaryDataResponse.Merctypecount">
            <summary>
            Gets or sets the merctypecount value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.MercenaryDataResponse.Merctypes">
            <summary>
            Gets or sets the merctypes value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.MercenaryDataResponse.Merccount">
            <summary>
            Gets or sets the merccount value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.MercenaryDataResponse.Mercs">
            <summary>
            Gets or sets the mercs value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryDataResponse.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the MercenaryDataResponse struct with specified field values.
            </summary>
            <param name="MercTypeCount">The merctypecount value.</param>
            <param name="MercTypes">The merctypes value.</param>
            <param name="MercCount">The merccount value.</param>
            <param name="Mercs">The mercs value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryDataResponse.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the MercenaryDataResponse struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryDataResponse.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the MercenaryDataResponse struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryDataResponse.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryDataResponse.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryDataResponse.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryDataResponse.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryDataResponse.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.MercenaryDataUpdate">
            <summary>
            Represents the MercenaryDataUpdate packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.MercenaryDataUpdate.Mercstatus">
            <summary>
            Gets or sets the mercstatus value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.MercenaryDataUpdate.Merccount">
            <summary>
            Gets or sets the merccount value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.MercenaryDataUpdate.Mercdata">
            <summary>
            Gets or sets the mercdata value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryDataUpdate.#ctor(System.Int32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the MercenaryDataUpdate struct with specified field values.
            </summary>
            <param name="MercStatus">The mercstatus value.</param>
            <param name="MercCount">The merccount value.</param>
            <param name="MercData">The mercdata value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryDataUpdate.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the MercenaryDataUpdate struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryDataUpdate.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the MercenaryDataUpdate struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryDataUpdate.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryDataUpdate.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryDataUpdate.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryDataUpdate.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryDataUpdate.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.MercenaryDataUpdateRequest">
            <summary>
            Represents the MercenaryDataUpdateRequest packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryDataUpdateRequest.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the MercenaryDataUpdateRequest struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryDataUpdateRequest.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the MercenaryDataUpdateRequest struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryDataUpdateRequest.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryDataUpdateRequest.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryDataUpdateRequest.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryDataUpdateRequest.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryDataUpdateRequest.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.MercenaryDismiss">
            <summary>
            Represents the MercenaryDismiss packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryDismiss.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the MercenaryDismiss struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryDismiss.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the MercenaryDismiss struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryDismiss.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryDismiss.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryDismiss.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryDismiss.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryDismiss.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.MercenaryHire">
            <summary>
            Represents the MercenaryHire packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.MercenaryHire.Requesttype">
            <summary>
            Gets or sets the requesttype value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.MercenaryHire.Mercunk01">
            <summary>
            Gets or sets the mercunk01 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.MercenaryHire.Mercmerchantid">
            <summary>
            Gets or sets the mercmerchantid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.MercenaryHire.Mercunk02">
            <summary>
            Gets or sets the mercunk02 value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryHire.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the MercenaryHire struct with specified field values.
            </summary>
            <param name="RequestType">The requesttype value.</param>
            <param name="MercUnk01">The mercunk01 value.</param>
            <param name="MercMerchantID">The mercmerchantid value.</param>
            <param name="MercUnk02">The mercunk02 value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryHire.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the MercenaryHire struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryHire.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the MercenaryHire struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryHire.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryHire.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryHire.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryHire.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryHire.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.MercenarySuspendRequest">
            <summary>
            Represents the MercenarySuspendRequest packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.MercenarySuspendRequest.Suspendmerc">
            <summary>
            Gets or sets the suspendmerc value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.MercenarySuspendRequest.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the MercenarySuspendRequest struct with specified field values.
            </summary>
            <param name="SuspendMerc">The suspendmerc value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenarySuspendRequest.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the MercenarySuspendRequest struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenarySuspendRequest.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the MercenarySuspendRequest struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenarySuspendRequest.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenarySuspendRequest.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenarySuspendRequest.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.MercenarySuspendRequest.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenarySuspendRequest.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.MercenarySuspendResponse">
            <summary>
            Represents the MercenarySuspendResponse packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.MercenarySuspendResponse.Suspendtime">
            <summary>
            Gets or sets the suspendtime value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.MercenarySuspendResponse.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the MercenarySuspendResponse struct with specified field values.
            </summary>
            <param name="SuspendTime">The suspendtime value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenarySuspendResponse.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the MercenarySuspendResponse struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenarySuspendResponse.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the MercenarySuspendResponse struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenarySuspendResponse.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenarySuspendResponse.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenarySuspendResponse.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.MercenarySuspendResponse.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenarySuspendResponse.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.MercenaryTimer">
            <summary>
            Represents the MercenaryTimer packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.MercenaryTimer.Mercentityid">
            <summary>
            Gets or sets the mercentityid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.MercenaryTimer.Updateinterval">
            <summary>
            Gets or sets the updateinterval value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.MercenaryTimer.Mercunk01">
            <summary>
            Gets or sets the mercunk01 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.MercenaryTimer.Mercstate">
            <summary>
            Gets or sets the mercstate value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.MercenaryTimer.Suspendedtime">
            <summary>
            Gets or sets the suspendedtime value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryTimer.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the MercenaryTimer struct with specified field values.
            </summary>
            <param name="MercEntityID">The mercentityid value.</param>
            <param name="UpdateInterval">The updateinterval value.</param>
            <param name="MercUnk01">The mercunk01 value.</param>
            <param name="MercState">The mercstate value.</param>
            <param name="SuspendedTime">The suspendedtime value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryTimer.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the MercenaryTimer struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryTimer.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the MercenaryTimer struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryTimer.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryTimer.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryTimer.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryTimer.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryTimer.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.MercenaryTimerRequest">
            <summary>
            Represents the MercenaryTimerRequest packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryTimerRequest.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the MercenaryTimerRequest struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryTimerRequest.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the MercenaryTimerRequest struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryTimerRequest.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryTimerRequest.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryTimerRequest.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryTimerRequest.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryTimerRequest.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.MercenaryUnknown1">
            <summary>
            Represents the MercenaryUnknown1 packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.MercenaryUnknown1.Responsetype">
            <summary>
            Gets or sets the responsetype value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryUnknown1.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the MercenaryUnknown1 struct with specified field values.
            </summary>
            <param name="ResponseType">The responsetype value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryUnknown1.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the MercenaryUnknown1 struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryUnknown1.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the MercenaryUnknown1 struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryUnknown1.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryUnknown1.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryUnknown1.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryUnknown1.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryUnknown1.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.MercenaryUnsuspendResponse">
            <summary>
            Represents the MercenaryUnsuspendResponse packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.MercenaryUnsuspendResponse.Suspendtime">
            <summary>
            Gets or sets the suspendtime value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryUnsuspendResponse.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the MercenaryUnsuspendResponse struct with specified field values.
            </summary>
            <param name="SuspendTime">The suspendtime value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryUnsuspendResponse.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the MercenaryUnsuspendResponse struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryUnsuspendResponse.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the MercenaryUnsuspendResponse struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryUnsuspendResponse.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryUnsuspendResponse.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryUnsuspendResponse.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryUnsuspendResponse.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MercenaryUnsuspendResponse.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.MobEnduranceUpdate">
            <summary>
            Represents the MobEnduranceUpdate packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.MobEnduranceUpdate.SpawnId">
            <summary>
            Gets or sets the spawnid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.MobEnduranceUpdate.Mana">
            <summary>
            Gets or sets the mana value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.MobEnduranceUpdate.#ctor(System.UInt16,System.Byte)">
            <summary>
            Initializes a new instance of the MobEnduranceUpdate struct with specified field values.
            </summary>
            <param name="spawn_id">The spawnid value.</param>
            <param name="mana">The mana value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MobEnduranceUpdate.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the MobEnduranceUpdate struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MobEnduranceUpdate.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the MobEnduranceUpdate struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MobEnduranceUpdate.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MobEnduranceUpdate.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MobEnduranceUpdate.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.MobEnduranceUpdate.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MobEnduranceUpdate.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.MobHealth">
            <summary>
            Represents the MobHealth packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.MobHealth.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.MobManaUpdate">
            <summary>
            Represents the MobManaUpdate packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.MobManaUpdate.SpawnId">
            <summary>
            Gets or sets the spawnid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.MobManaUpdate.Mana">
            <summary>
            Gets or sets the mana value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.MobManaUpdate.#ctor(System.UInt16,System.Byte)">
            <summary>
            Initializes a new instance of the MobManaUpdate struct with specified field values.
            </summary>
            <param name="spawn_id">The spawnid value.</param>
            <param name="mana">The mana value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MobManaUpdate.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the MobManaUpdate struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MobManaUpdate.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the MobManaUpdate struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MobManaUpdate.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MobManaUpdate.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MobManaUpdate.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.MobManaUpdate.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MobManaUpdate.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.MobRename">
            <summary>
            Represents the MobRename packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.MobRename.OldName">
            <summary>
            Gets or sets the oldname value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.MobRename.OldNameAgain">
            <summary>
            Gets or sets the oldnameagain value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.MobRename.NewName">
            <summary>
            Gets or sets the newname value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.MobRename.Unknown192">
            <summary>
            Gets or sets the unknown192 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.MobRename.Unknown196">
            <summary>
            Gets or sets the unknown196 value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.MobRename.#ctor(System.Byte[],System.Byte[],System.Byte[],System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the MobRename struct with specified field values.
            </summary>
            <param name="old_name">The oldname value.</param>
            <param name="old_name_again">The oldnameagain value.</param>
            <param name="new_name">The newname value.</param>
            <param name="unknown192">The unknown192 value.</param>
            <param name="unknown196">The unknown196 value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MobRename.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the MobRename struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MobRename.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the MobRename struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MobRename.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MobRename.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MobRename.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.MobRename.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MobRename.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.MobUpdate">
            <summary>
            Represents the MobUpdate packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="T:OpenEQ.Netcode.MoneyOnCorpse">
            <summary>
            Represents the MoneyOnCorpse packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.MoneyOnCorpse.Response">
            <summary>
            Gets or sets the response value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.MoneyOnCorpse.Unknown1">
            <summary>
            Gets or sets the unknown1 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.MoneyOnCorpse.Unknown2">
            <summary>
            Gets or sets the unknown2 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.MoneyOnCorpse.Unknown3">
            <summary>
            Gets or sets the unknown3 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.MoneyOnCorpse.Platinum">
            <summary>
            Gets or sets the platinum value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.MoneyOnCorpse.Gold">
            <summary>
            Gets or sets the gold value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.MoneyOnCorpse.Silver">
            <summary>
            Gets or sets the silver value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.MoneyOnCorpse.Copper">
            <summary>
            Gets or sets the copper value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.MoneyOnCorpse.#ctor(System.Byte,System.Byte,System.Byte,System.Byte,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the MoneyOnCorpse struct with specified field values.
            </summary>
            <param name="response">The response value.</param>
            <param name="unknown1">The unknown1 value.</param>
            <param name="unknown2">The unknown2 value.</param>
            <param name="unknown3">The unknown3 value.</param>
            <param name="platinum">The platinum value.</param>
            <param name="gold">The gold value.</param>
            <param name="silver">The silver value.</param>
            <param name="copper">The copper value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MoneyOnCorpse.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the MoneyOnCorpse struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MoneyOnCorpse.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the MoneyOnCorpse struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MoneyOnCorpse.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MoneyOnCorpse.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MoneyOnCorpse.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.MoneyOnCorpse.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MoneyOnCorpse.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.MoneyUpdate">
            <summary>
            Represents the MoneyUpdate packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.MoneyUpdate.Platinum">
            <summary>
            Gets or sets the platinum value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.MoneyUpdate.Gold">
            <summary>
            Gets or sets the gold value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.MoneyUpdate.Silver">
            <summary>
            Gets or sets the silver value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.MoneyUpdate.Copper">
            <summary>
            Gets or sets the copper value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.MoneyUpdate.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the MoneyUpdate struct with specified field values.
            </summary>
            <param name="platinum">The platinum value.</param>
            <param name="gold">The gold value.</param>
            <param name="silver">The silver value.</param>
            <param name="copper">The copper value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MoneyUpdate.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the MoneyUpdate struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MoneyUpdate.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the MoneyUpdate struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MoneyUpdate.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MoneyUpdate.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MoneyUpdate.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.MoneyUpdate.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MoneyUpdate.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.MoveCoin">
            <summary>
            Represents the MoveCoin packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.MoveCoin.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the MoveCoin struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MoveCoin.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the MoveCoin struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MoveCoin.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MoveCoin.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MoveCoin.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.MoveCoin.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MoveCoin.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.MoveDoor">
            <summary>
            Represents the MoveDoor packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.MoveDoor.Doorid">
            <summary>
            Gets or sets the doorid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.MoveDoor.Action">
            <summary>
            Gets or sets the action value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.MoveDoor.#ctor(System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the MoveDoor struct with specified field values.
            </summary>
            <param name="doorid">The doorid value.</param>
            <param name="action">The action value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MoveDoor.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the MoveDoor struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MoveDoor.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the MoveDoor struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MoveDoor.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MoveDoor.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MoveDoor.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.MoveDoor.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MoveDoor.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.MoveItem">
            <summary>
            Represents the MoveItem packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.MoveItem.FromSlot">
            <summary>
            Gets or sets the fromslot value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.MoveItem.ToSlot">
            <summary>
            Gets or sets the toslot value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.MoveItem.NumberInStack">
            <summary>
            Gets or sets the numberinstack value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.MoveItem.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the MoveItem struct with specified field values.
            </summary>
            <param name="from_slot">The fromslot value.</param>
            <param name="to_slot">The toslot value.</param>
            <param name="number_in_stack">The numberinstack value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MoveItem.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the MoveItem struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MoveItem.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the MoveItem struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MoveItem.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MoveItem.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MoveItem.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.MoveItem.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MoveItem.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.MoveMultipleItems">
            <summary>
            Represents the MoveMultipleItems packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.MoveMultipleItems.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the MoveMultipleItems struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MoveMultipleItems.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the MoveMultipleItems struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MoveMultipleItems.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MoveMultipleItems.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MoveMultipleItems.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.MoveMultipleItems.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.MoveMultipleItems.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.NewSpawn">
            <summary>
            Represents the NewSpawn packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.NewSpawn.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the NewSpawn struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.NewSpawn.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the NewSpawn struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.NewSpawn.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.NewSpawn.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.NewSpawn.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.NewSpawn.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.NewSpawn.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.NewTitlesAvailable">
            <summary>
            Represents the NewTitlesAvailable packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.NewTitlesAvailable.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the NewTitlesAvailable struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.NewTitlesAvailable.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the NewTitlesAvailable struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.NewTitlesAvailable.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.NewTitlesAvailable.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.NewTitlesAvailable.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.NewTitlesAvailable.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.NewTitlesAvailable.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.NewZone">
            <summary>
            Represents the NewZone packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.NewZone.CharName">
            <summary>
            Gets or sets the charname value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.NewZone.ZoneShortName">
            <summary>
            Gets or sets the zoneshortname value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.NewZone.ZoneLongName">
            <summary>
            Gets or sets the zonelongname value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.NewZone.Ztype">
            <summary>
            Gets or sets the ztype value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.NewZone.FogRed">
            <summary>
            Gets or sets the fogred value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.NewZone.FogGreen">
            <summary>
            Gets or sets the foggreen value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.NewZone.FogBlue">
            <summary>
            Gets or sets the fogblue value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.NewZone.Unknown323">
            <summary>
            Gets or sets the unknown323 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.NewZone.FogMinclip">
            <summary>
            Gets or sets the fogminclip value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.NewZone.FogMaxclip">
            <summary>
            Gets or sets the fogmaxclip value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.NewZone.Gravity">
            <summary>
            Gets or sets the gravity value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.NewZone.TimeType">
            <summary>
            Gets or sets the timetype value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.NewZone.RainChance">
            <summary>
            Gets or sets the rainchance value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.NewZone.RainDuration">
            <summary>
            Gets or sets the rainduration value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.NewZone.SnowChance">
            <summary>
            Gets or sets the snowchance value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.NewZone.SnowDuration">
            <summary>
            Gets or sets the snowduration value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.NewZone.Unknown537">
            <summary>
            Gets or sets the unknown537 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.NewZone.Sky">
            <summary>
            Gets or sets the sky value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.NewZone.Unknown571">
            <summary>
            Gets or sets the unknown571 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.NewZone.ZoneExpMultiplier">
            <summary>
            Gets or sets the zoneexpmultiplier value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.NewZone.SafeY">
            <summary>
            Gets or sets the safey value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.NewZone.SafeX">
            <summary>
            Gets or sets the safex value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.NewZone.SafeZ">
            <summary>
            Gets or sets the safez value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.NewZone.MinZ">
            <summary>
            Gets or sets the minz value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.NewZone.MaxZ">
            <summary>
            Gets or sets the maxz value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.NewZone.Underworld">
            <summary>
            Gets or sets the underworld value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.NewZone.Minclip">
            <summary>
            Gets or sets the minclip value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.NewZone.Maxclip">
            <summary>
            Gets or sets the maxclip value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.NewZone.Unknown620">
            <summary>
            Gets or sets the unknown620 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.NewZone.ZoneShortName2">
            <summary>
            Gets or sets the zoneshortname2 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.NewZone.Unknown800">
            <summary>
            Gets or sets the unknown800 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.NewZone.Unknown804">
            <summary>
            Gets or sets the unknown804 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.NewZone.Unknown844">
            <summary>
            Gets or sets the unknown844 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.NewZone.Unknown848">
            <summary>
            Gets or sets the unknown848 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.NewZone.ZoneId">
            <summary>
            Gets or sets the zoneid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.NewZone.ZoneInstance">
            <summary>
            Gets or sets the zoneinstance value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.NewZone.Scriptnpcreceivedanitem">
            <summary>
            Gets or sets the scriptnpcreceivedanitem value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.NewZone.Bcheck">
            <summary>
            Gets or sets the bcheck value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.NewZone.Scriptidsomething">
            <summary>
            Gets or sets the scriptidsomething value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.NewZone.UnderworldTeleportIndex">
            <summary>
            Gets or sets the underworldteleportindex value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.NewZone.Scriptidsomething3">
            <summary>
            Gets or sets the scriptidsomething3 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.NewZone.SuspendBuffs">
            <summary>
            Gets or sets the suspendbuffs value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.NewZone.LavaDamage">
            <summary>
            Gets or sets the lavadamage value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.NewZone.MinLavaDamage">
            <summary>
            Gets or sets the minlavadamage value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.NewZone.Unknown888">
            <summary>
            Gets or sets the unknown888 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.NewZone.Unknown889">
            <summary>
            Gets or sets the unknown889 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.NewZone.Unknown890">
            <summary>
            Gets or sets the unknown890 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.NewZone.Unknown891">
            <summary>
            Gets or sets the unknown891 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.NewZone.Unknown892">
            <summary>
            Gets or sets the unknown892 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.NewZone.Unknown893">
            <summary>
            Gets or sets the unknown893 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.NewZone.FallDamage">
            <summary>
            Gets or sets the falldamage value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.NewZone.Unknown895">
            <summary>
            Gets or sets the unknown895 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.NewZone.FastRegenHp">
            <summary>
            Gets or sets the fastregenhp value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.NewZone.FastRegenMana">
            <summary>
            Gets or sets the fastregenmana value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.NewZone.FastRegenEndurance">
            <summary>
            Gets or sets the fastregenendurance value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.NewZone.Unknown908">
            <summary>
            Gets or sets the unknown908 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.NewZone.Unknown912">
            <summary>
            Gets or sets the unknown912 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.NewZone.FogDensity">
            <summary>
            Gets or sets the fogdensity value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.NewZone.Unknown920">
            <summary>
            Gets or sets the unknown920 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.NewZone.Unknown924">
            <summary>
            Gets or sets the unknown924 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.NewZone.Unknown928">
            <summary>
            Gets or sets the unknown928 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.NewZone.Unknown932">
            <summary>
            Gets or sets the unknown932 value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.NewZone.#ctor(System.Byte[],System.Byte[],System.Byte[],System.Byte,System.Byte[],System.Byte[],System.Byte[],System.Byte,System.Single[],System.Single[],System.Single,System.Byte,System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte,System.Byte[],System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Byte[],System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32,System.UInt16,System.UInt16,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Single,System.UInt32,System.UInt32,System.UInt32,System.Byte[])">
            <summary>
            Initializes a new instance of the NewZone struct with specified field values.
            </summary>
            <param name="char_name">The charname value.</param>
            <param name="zone_short_name">The zoneshortname value.</param>
            <param name="zone_long_name">The zonelongname value.</param>
            <param name="ztype">The ztype value.</param>
            <param name="fog_red">The fogred value.</param>
            <param name="fog_green">The foggreen value.</param>
            <param name="fog_blue">The fogblue value.</param>
            <param name="unknown323">The unknown323 value.</param>
            <param name="fog_minclip">The fogminclip value.</param>
            <param name="fog_maxclip">The fogmaxclip value.</param>
            <param name="gravity">The gravity value.</param>
            <param name="time_type">The timetype value.</param>
            <param name="rain_chance">The rainchance value.</param>
            <param name="rain_duration">The rainduration value.</param>
            <param name="snow_chance">The snowchance value.</param>
            <param name="snow_duration">The snowduration value.</param>
            <param name="unknown537">The unknown537 value.</param>
            <param name="sky">The sky value.</param>
            <param name="unknown571">The unknown571 value.</param>
            <param name="zone_exp_multiplier">The zoneexpmultiplier value.</param>
            <param name="safe_y">The safey value.</param>
            <param name="safe_x">The safex value.</param>
            <param name="safe_z">The safez value.</param>
            <param name="min_z">The minz value.</param>
            <param name="max_z">The maxz value.</param>
            <param name="underworld">The underworld value.</param>
            <param name="minclip">The minclip value.</param>
            <param name="maxclip">The maxclip value.</param>
            <param name="unknown620">The unknown620 value.</param>
            <param name="zone_short_name2">The zoneshortname2 value.</param>
            <param name="unknown800">The unknown800 value.</param>
            <param name="unknown804">The unknown804 value.</param>
            <param name="unknown844">The unknown844 value.</param>
            <param name="unknown848">The unknown848 value.</param>
            <param name="zone_id">The zoneid value.</param>
            <param name="zone_instance">The zoneinstance value.</param>
            <param name="scriptNPCReceivedanItem">The scriptnpcreceivedanitem value.</param>
            <param name="bCheck">The bcheck value.</param>
            <param name="scriptIDSomething">The scriptidsomething value.</param>
            <param name="underworld_teleport_index">The underworldteleportindex value.</param>
            <param name="scriptIDSomething3">The scriptidsomething3 value.</param>
            <param name="suspend_buffs">The suspendbuffs value.</param>
            <param name="lava_damage">The lavadamage value.</param>
            <param name="min_lava_damage">The minlavadamage value.</param>
            <param name="unknown888">The unknown888 value.</param>
            <param name="unknown889">The unknown889 value.</param>
            <param name="unknown890">The unknown890 value.</param>
            <param name="unknown891">The unknown891 value.</param>
            <param name="unknown892">The unknown892 value.</param>
            <param name="unknown893">The unknown893 value.</param>
            <param name="fall_damage">The falldamage value.</param>
            <param name="unknown895">The unknown895 value.</param>
            <param name="fast_regen_hp">The fastregenhp value.</param>
            <param name="fast_regen_mana">The fastregenmana value.</param>
            <param name="fast_regen_endurance">The fastregenendurance value.</param>
            <param name="unknown908">The unknown908 value.</param>
            <param name="unknown912">The unknown912 value.</param>
            <param name="fog_density">The fogdensity value.</param>
            <param name="unknown920">The unknown920 value.</param>
            <param name="unknown924">The unknown924 value.</param>
            <param name="unknown928">The unknown928 value.</param>
            <param name="unknown932">The unknown932 value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.NewZone.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the NewZone struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.NewZone.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the NewZone struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.NewZone.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.NewZone.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.NewZone.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.NewZone.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.NewZone.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.NPCMoveUpdate">
            <summary>
            Represents the NPCMoveUpdate packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="T:OpenEQ.Netcode.OnLevelMessage">
            <summary>
            Represents the OnLevelMessage packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.OnLevelMessage.Title">
            <summary>
            Gets or sets the title value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.OnLevelMessage.Text">
            <summary>
            Gets or sets the text value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.OnLevelMessage.Buttonname0">
            <summary>
            Gets or sets the buttonname0 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.OnLevelMessage.Buttonname1">
            <summary>
            Gets or sets the buttonname1 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.OnLevelMessage.Buttons">
            <summary>
            Gets or sets the buttons value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.OnLevelMessage.Soundcontrols">
            <summary>
            Gets or sets the soundcontrols value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.OnLevelMessage.Duration">
            <summary>
            Gets or sets the duration value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.OnLevelMessage.Popupid">
            <summary>
            Gets or sets the popupid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.OnLevelMessage.Negativeid">
            <summary>
            Gets or sets the negativeid value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.OnLevelMessage.#ctor(System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte,System.Byte,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the OnLevelMessage struct with specified field values.
            </summary>
            <param name="Title">The title value.</param>
            <param name="Text">The text value.</param>
            <param name="ButtonName0">The buttonname0 value.</param>
            <param name="ButtonName1">The buttonname1 value.</param>
            <param name="Buttons">The buttons value.</param>
            <param name="SoundControls">The soundcontrols value.</param>
            <param name="Duration">The duration value.</param>
            <param name="PopupID">The popupid value.</param>
            <param name="NegativeID">The negativeid value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.OnLevelMessage.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the OnLevelMessage struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.OnLevelMessage.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the OnLevelMessage struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.OnLevelMessage.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.OnLevelMessage.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.OnLevelMessage.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.OnLevelMessage.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.OnLevelMessage.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.OpenContainer">
            <summary>
            Represents the OpenContainer packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.OpenContainer.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the OpenContainer struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.OpenContainer.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the OpenContainer struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.OpenContainer.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.OpenContainer.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.OpenContainer.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.OpenContainer.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.OpenContainer.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.OpenGuildTributeMaster">
            <summary>
            Represents the OpenGuildTributeMaster packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.OpenGuildTributeMaster.ClientId">
            <summary>
            Gets or sets the clientid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.OpenGuildTributeMaster.TributeMasterId">
            <summary>
            Gets or sets the tributemasterid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.OpenGuildTributeMaster.Response">
            <summary>
            Gets or sets the response value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.OpenGuildTributeMaster.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the OpenGuildTributeMaster struct with specified field values.
            </summary>
            <param name="client_id">The clientid value.</param>
            <param name="tribute_master_id">The tributemasterid value.</param>
            <param name="response">The response value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.OpenGuildTributeMaster.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the OpenGuildTributeMaster struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.OpenGuildTributeMaster.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the OpenGuildTributeMaster struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.OpenGuildTributeMaster.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.OpenGuildTributeMaster.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.OpenGuildTributeMaster.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.OpenGuildTributeMaster.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.OpenGuildTributeMaster.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.OpenTributeMaster">
            <summary>
            Represents the OpenTributeMaster packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.OpenTributeMaster.ClientId">
            <summary>
            Gets or sets the clientid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.OpenTributeMaster.TributeMasterId">
            <summary>
            Gets or sets the tributemasterid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.OpenTributeMaster.Response">
            <summary>
            Gets or sets the response value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.OpenTributeMaster.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the OpenTributeMaster struct with specified field values.
            </summary>
            <param name="client_id">The clientid value.</param>
            <param name="tribute_master_id">The tributemasterid value.</param>
            <param name="response">The response value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.OpenTributeMaster.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the OpenTributeMaster struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.OpenTributeMaster.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the OpenTributeMaster struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.OpenTributeMaster.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.OpenTributeMaster.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.OpenTributeMaster.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.OpenTributeMaster.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.OpenTributeMaster.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.PetBuffWindow">
            <summary>
            Represents the PetBuffWindow packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.PetBuffWindow.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the PetBuffWindow struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PetBuffWindow.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the PetBuffWindow struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PetBuffWindow.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PetBuffWindow.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PetBuffWindow.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.PetBuffWindow.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PetBuffWindow.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.PetCommands">
            <summary>
            Represents the PetCommands packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PetCommands.Command">
            <summary>
            Gets or sets the command value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PetCommands.Target">
            <summary>
            Gets or sets the target value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.PetCommands.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the PetCommands struct with specified field values.
            </summary>
            <param name="command">The command value.</param>
            <param name="target">The target value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PetCommands.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the PetCommands struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PetCommands.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the PetCommands struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PetCommands.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PetCommands.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PetCommands.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.PetCommands.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PetCommands.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.PetCommandState">
            <summary>
            Represents the PetCommandState packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PetCommandState.ButtonId">
            <summary>
            Gets or sets the buttonid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PetCommandState.State">
            <summary>
            Gets or sets the state value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.PetCommandState.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the PetCommandState struct with specified field values.
            </summary>
            <param name="button_id">The buttonid value.</param>
            <param name="state">The state value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PetCommandState.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the PetCommandState struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PetCommandState.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the PetCommandState struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PetCommandState.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PetCommandState.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PetCommandState.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.PetCommandState.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PetCommandState.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.PetHoTT">
            <summary>
            Represents the PetHoTT packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PetHoTT.NewTarget">
            <summary>
            Gets or sets the newtarget value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.PetHoTT.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the PetHoTT struct with specified field values.
            </summary>
            <param name="new_target">The newtarget value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PetHoTT.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the PetHoTT struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PetHoTT.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the PetHoTT struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PetHoTT.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PetHoTT.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PetHoTT.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.PetHoTT.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PetHoTT.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.Petition">
            <summary>
            Represents the Petition packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Petition.Petnumber">
            <summary>
            Gets or sets the petnumber value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Petition.Color">
            <summary>
            Gets or sets the color value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Petition.Status">
            <summary>
            Gets or sets the status value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Petition.Senttime">
            <summary>
            Gets or sets the senttime value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Petition.Accountid">
            <summary>
            Gets or sets the accountid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Petition.Gmsenttoo">
            <summary>
            Gets or sets the gmsenttoo value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Petition.Quetotal">
            <summary>
            Gets or sets the quetotal value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Petition.Charname">
            <summary>
            Gets or sets the charname value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.Petition.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Byte[],System.Byte[],System.Int32,System.Byte[])">
            <summary>
            Initializes a new instance of the Petition struct with specified field values.
            </summary>
            <param name="petnumber">The petnumber value.</param>
            <param name="color">The color value.</param>
            <param name="status">The status value.</param>
            <param name="senttime">The senttime value.</param>
            <param name="accountid">The accountid value.</param>
            <param name="gmsenttoo">The gmsenttoo value.</param>
            <param name="quetotal">The quetotal value.</param>
            <param name="charname">The charname value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Petition.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the Petition struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Petition.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the Petition struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Petition.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Petition.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Petition.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.Petition.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Petition.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.PickPocket">
            <summary>
            Represents the PickPocket packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PickPocket.To">
            <summary>
            Gets or sets the to value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PickPocket.From">
            <summary>
            Gets or sets the from value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PickPocket.Myskill">
            <summary>
            Gets or sets the myskill value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PickPocket.Type">
            <summary>
            Gets or sets the type value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PickPocket.Coin">
            <summary>
            Gets or sets the coin value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PickPocket.Itemname">
            <summary>
            Gets or sets the itemname value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.PickPocket.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Byte[])">
            <summary>
            Initializes a new instance of the PickPocket struct with specified field values.
            </summary>
            <param name="to">The to value.</param>
            <param name="from">The from value.</param>
            <param name="myskill">The myskill value.</param>
            <param name="type">The type value.</param>
            <param name="coin">The coin value.</param>
            <param name="itemname">The itemname value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PickPocket.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the PickPocket struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PickPocket.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the PickPocket struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PickPocket.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PickPocket.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PickPocket.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.PickPocket.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PickPocket.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.PlayerProfile">
            <summary>
            Represents the PlayerProfile packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.checksum">
            <summary>
            The checksum value for the profile.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.Gender">
            <summary>
            The gender of the player.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.Race">
            <summary>
            The race of the player.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.Class">
            <summary>
            The class of the player.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.Level">
            <summary>
            The level of the player.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.unkLevel">
            <summary>
            Unknown level byte.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.Binds">
            <summary>
            The bind points of the player.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.Deity">
            <summary>
            The deity of the player.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.Intoxication">
            <summary>
            The intoxication level of the player.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.SpellSlotRefresh">
            <summary>
            The spell slot refresh times.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.AbilitySlotRefresh">
            <summary>
            The ability slot refresh time.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.HairColor">
            <summary>
            The hair color of the player.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.BeardColor">
            <summary>
            The beard color of the player.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.EyeColor1">
            <summary>
            The left eye color of the player.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.EyeColor2">
            <summary>
            The right eye color of the player.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.HairStyle">
            <summary>
            The hair style of the player.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.Beard">
            <summary>
            The beard type of the player.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.Equipment">
            <summary>
            The equipment texture profile.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.ItemTint">
            <summary>
            The item tint profile.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.AAArray">
            <summary>
            The array of alternate advancement abilities.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.Points">
            <summary>
            The unspent practice points.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.Mana">
            <summary>
            The current mana.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.CurHP">
            <summary>
            The current hit points.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.STR">
            <summary>
            The strength stat.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.STA">
            <summary>
            The stamina stat.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.CHA">
            <summary>
            The charisma stat.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.DEX">
            <summary>
            The dexterity stat.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.INT">
            <summary>
            The intelligence stat.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.AGI">
            <summary>
            The agility stat.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.WIS">
            <summary>
            The wisdom stat.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.Face">
            <summary>
            The face type.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.SpellBook">
            <summary>
            The spell book.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.MemSpells">
            <summary>
            The memorized spells.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.PlayerMoney">
            <summary>
            The player's money.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.CursorMoney">
            <summary>
            The money on the cursor.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.Skills">
            <summary>
            The array of player skills.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.Toxicity">
            <summary>
            The potion toxicity.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.Thirst">
            <summary>
            The thirst level.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.Hunger">
            <summary>
            The hunger level.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.Buffs">
            <summary>
            The array of spell buffs.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.Disciplines">
            <summary>
            The array of disciplines.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.RecastTimers">
            <summary>
            The array of recast timers.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.Endurance">
            <summary>
            The current endurance.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.AAPointsSpent">
            <summary>
            The number of spent AA points.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.AAPoints">
            <summary>
            The number of unspent AA points.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.Bandoliers">
            <summary>
            The array of bandoliers.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.PotionBelt">
            <summary>
            The array of potion belt items.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.AvailableSlots">
            <summary>
            The available inventory slots.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.Name">
            <summary>
            The player's name.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.LastName">
            <summary>
            The player's last name.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.GuildID">
            <summary>
            The guild ID.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.Birthday">
            <summary>
            The character's birthday.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.LastLogin">
            <summary>
            The last login time.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.AccountStartdate">
            <summary>
            The account start date.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.TimePlayed">
            <summary>
            The total time played.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.PVP">
            <summary>
            Indicates if the player is PVP.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.Roleplay">
            <summary>
            The roleplay status.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.GM">
            <summary>
            Indicates if the player is a GM.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.GuildRank">
            <summary>
            The guild rank.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.GuildBanker">
            <summary>
            The guild banker status.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.Experience">
            <summary>
            The current experience.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.timeEntitledOnAccount">
            <summary>
            The time entitled on account.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.Languages">
            <summary>
            The array of known languages.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.X">
            <summary>
            The X position.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.Y">
            <summary>
            The Y position.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.Z">
            <summary>
            The Z position.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.Heading">
            <summary>
            The heading.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.BankMoney">
            <summary>
            The bank money.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.PlatinumShared">
            <summary>
            The shared platinum.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.expansions">
            <summary>
            The expansions bitmask.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.Autosplit">
            <summary>
            Indicates if autosplit is enabled.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.ZoneID">
            <summary>
            The zone ID.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.ZoneInstance">
            <summary>
            The zone instance.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.GroupMembers">
            <summary>
            The array of group members.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.GroupLeader">
            <summary>
            The group leader name.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.EntityID">
            <summary>
            The entity ID.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.LeadAAActive">
            <summary>
            Indicates if lead AA is active.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.LdonPoints">
            <summary>
            The LDoN points.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.TributeTimeRemaining">
            <summary>
            The tribute time remaining.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.CareerTributePoints">
            <summary>
            The career tribute points.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.TributePoints">
            <summary>
            The current tribute points.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.TributeActive">
            <summary>
            Indicates if tribute is active.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.Tributes">
            <summary>
            The array of tributes.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.GroupLeadershipExp">
            <summary>
            The group leadership experience.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.RaidLeadershipExp">
            <summary>
            The raid leadership experience.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.GroupLeadershipPoints">
            <summary>
            The group leadership points.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.RaidLeadershipPoints">
            <summary>
            The raid leadership points.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.LeaderAbilities">
            <summary>
            The leader abilities.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.AirRemaining">
            <summary>
            The air remaining.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.PVPStats">
            <summary>
            The PVP stats.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.AAExperience">
            <summary>
            The AA experience.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.CurrentRadCrystals">
            <summary>
            The current radiant crystals.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.CareerRadCrystals">
            <summary>
            The career radiant crystals.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.CurrentEbonCrystals">
            <summary>
            The current ebon crystals.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.CareerEbonCrystals">
            <summary>
            The career ebon crystals.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.Autoconsent">
            <summary>
            The autoconsent settings.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.Level3">
            <summary>
            The level3 value.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.ShowHelm">
            <summary>
            Indicates if the helm is shown.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.PlayerProfile.RestTimer">
            <summary>
            The rest timer.
            </summary>
        </member>
        <member name="T:OpenEQ.Netcode.PlayerStateAdd">
            <summary>
            Represents the PlayerStateAdd packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PlayerStateAdd.SpawnId">
            <summary>
            Gets or sets the spawnid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PlayerStateAdd.State">
            <summary>
            Gets or sets the state value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.PlayerStateAdd.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the PlayerStateAdd struct with specified field values.
            </summary>
            <param name="spawn_id">The spawnid value.</param>
            <param name="state">The state value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PlayerStateAdd.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the PlayerStateAdd struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PlayerStateAdd.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the PlayerStateAdd struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PlayerStateAdd.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PlayerStateAdd.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PlayerStateAdd.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.PlayerStateAdd.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PlayerStateAdd.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.PlayerStateRemove">
            <summary>
            Represents the PlayerStateRemove packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PlayerStateRemove.SpawnId">
            <summary>
            Gets or sets the spawnid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PlayerStateRemove.State">
            <summary>
            Gets or sets the state value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.PlayerStateRemove.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the PlayerStateRemove struct with specified field values.
            </summary>
            <param name="spawn_id">The spawnid value.</param>
            <param name="state">The state value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PlayerStateRemove.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the PlayerStateRemove struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PlayerStateRemove.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the PlayerStateRemove struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PlayerStateRemove.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PlayerStateRemove.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PlayerStateRemove.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.PlayerStateRemove.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PlayerStateRemove.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.PopupResponse">
            <summary>
            Represents the PopupResponse packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PopupResponse.Popupid">
            <summary>
            Gets or sets the popupid value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.PopupResponse.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the PopupResponse struct with specified field values.
            </summary>
            <param name="popupid">The popupid value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PopupResponse.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the PopupResponse struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PopupResponse.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the PopupResponse struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PopupResponse.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PopupResponse.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PopupResponse.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.PopupResponse.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PopupResponse.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.PotionBelt">
            <summary>
            Represents the PotionBelt packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PotionBelt.Action">
            <summary>
            Gets or sets the action value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PotionBelt.Slotnumber">
            <summary>
            Gets or sets the slotnumber value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PotionBelt.Itemid">
            <summary>
            Gets or sets the itemid value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.PotionBelt.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the PotionBelt struct with specified field values.
            </summary>
            <param name="Action">The action value.</param>
            <param name="SlotNumber">The slotnumber value.</param>
            <param name="ItemID">The itemid value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PotionBelt.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the PotionBelt struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PotionBelt.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the PotionBelt struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PotionBelt.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PotionBelt.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PotionBelt.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.PotionBelt.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PotionBelt.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.PurchaseLeadershipAA">
            <summary>
            Represents the PurchaseLeadershipAA packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.PurchaseLeadershipAA.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the PurchaseLeadershipAA struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PurchaseLeadershipAA.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the PurchaseLeadershipAA struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PurchaseLeadershipAA.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PurchaseLeadershipAA.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PurchaseLeadershipAA.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.PurchaseLeadershipAA.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PurchaseLeadershipAA.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.PVPLeaderBoardDetailsReply">
            <summary>
            Represents the PVPLeaderBoardDetailsReply packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PVPLeaderBoardDetailsReply.Name">
            <summary>
            Gets or sets the name value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PVPLeaderBoardDetailsReply.Unknown064">
            <summary>
            Gets or sets the unknown064 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PVPLeaderBoardDetailsReply.Level">
            <summary>
            Gets or sets the level value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PVPLeaderBoardDetailsReply.Race">
            <summary>
            Gets or sets the race value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PVPLeaderBoardDetailsReply.Class">
            <summary>
            Gets or sets the class value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PVPLeaderBoardDetailsReply.Guildid">
            <summary>
            Gets or sets the guildid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PVPLeaderBoardDetailsReply.Totalaa">
            <summary>
            Gets or sets the totalaa value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PVPLeaderBoardDetailsReply.Unknown148">
            <summary>
            Gets or sets the unknown148 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PVPLeaderBoardDetailsReply.Kills">
            <summary>
            Gets or sets the kills value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PVPLeaderBoardDetailsReply.Deaths">
            <summary>
            Gets or sets the deaths value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PVPLeaderBoardDetailsReply.Infamy">
            <summary>
            Gets or sets the infamy value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PVPLeaderBoardDetailsReply.Points">
            <summary>
            Gets or sets the points value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.PVPLeaderBoardDetailsReply.#ctor(System.Byte[],System.Byte[],System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the PVPLeaderBoardDetailsReply struct with specified field values.
            </summary>
            <param name="Name">The name value.</param>
            <param name="Unknown064">The unknown064 value.</param>
            <param name="Level">The level value.</param>
            <param name="Race">The race value.</param>
            <param name="Class">The class value.</param>
            <param name="GuildID">The guildid value.</param>
            <param name="TotalAA">The totalaa value.</param>
            <param name="Unknown148">The unknown148 value.</param>
            <param name="Kills">The kills value.</param>
            <param name="Deaths">The deaths value.</param>
            <param name="Infamy">The infamy value.</param>
            <param name="Points">The points value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PVPLeaderBoardDetailsReply.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the PVPLeaderBoardDetailsReply struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PVPLeaderBoardDetailsReply.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the PVPLeaderBoardDetailsReply struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PVPLeaderBoardDetailsReply.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PVPLeaderBoardDetailsReply.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PVPLeaderBoardDetailsReply.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.PVPLeaderBoardDetailsReply.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PVPLeaderBoardDetailsReply.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.PVPLeaderBoardDetailsRequest">
            <summary>
            Represents the PVPLeaderBoardDetailsRequest packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PVPLeaderBoardDetailsRequest.Name">
            <summary>
            Gets or sets the name value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PVPLeaderBoardDetailsRequest.Unknown064">
            <summary>
            Gets or sets the unknown064 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PVPLeaderBoardDetailsRequest.Level">
            <summary>
            Gets or sets the level value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PVPLeaderBoardDetailsRequest.Race">
            <summary>
            Gets or sets the race value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PVPLeaderBoardDetailsRequest.Class">
            <summary>
            Gets or sets the class value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PVPLeaderBoardDetailsRequest.Guildid">
            <summary>
            Gets or sets the guildid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PVPLeaderBoardDetailsRequest.Totalaa">
            <summary>
            Gets or sets the totalaa value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PVPLeaderBoardDetailsRequest.Unknown148">
            <summary>
            Gets or sets the unknown148 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PVPLeaderBoardDetailsRequest.Kills">
            <summary>
            Gets or sets the kills value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PVPLeaderBoardDetailsRequest.Deaths">
            <summary>
            Gets or sets the deaths value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PVPLeaderBoardDetailsRequest.Infamy">
            <summary>
            Gets or sets the infamy value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PVPLeaderBoardDetailsRequest.Points">
            <summary>
            Gets or sets the points value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.PVPLeaderBoardDetailsRequest.#ctor(System.Byte[],System.Byte[],System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the PVPLeaderBoardDetailsRequest struct with specified field values.
            </summary>
            <param name="Name">The name value.</param>
            <param name="Unknown064">The unknown064 value.</param>
            <param name="Level">The level value.</param>
            <param name="Race">The race value.</param>
            <param name="Class">The class value.</param>
            <param name="GuildID">The guildid value.</param>
            <param name="TotalAA">The totalaa value.</param>
            <param name="Unknown148">The unknown148 value.</param>
            <param name="Kills">The kills value.</param>
            <param name="Deaths">The deaths value.</param>
            <param name="Infamy">The infamy value.</param>
            <param name="Points">The points value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PVPLeaderBoardDetailsRequest.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the PVPLeaderBoardDetailsRequest struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PVPLeaderBoardDetailsRequest.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the PVPLeaderBoardDetailsRequest struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PVPLeaderBoardDetailsRequest.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PVPLeaderBoardDetailsRequest.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PVPLeaderBoardDetailsRequest.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.PVPLeaderBoardDetailsRequest.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PVPLeaderBoardDetailsRequest.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.PVPLeaderBoardReply">
            <summary>
            Represents the PVPLeaderBoardReply packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PVPLeaderBoardReply.Mykills">
            <summary>
            Gets or sets the mykills value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PVPLeaderBoardReply.Mytotalpoints">
            <summary>
            Gets or sets the mytotalpoints value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PVPLeaderBoardReply.Myrank">
            <summary>
            Gets or sets the myrank value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PVPLeaderBoardReply.Mydeaths">
            <summary>
            Gets or sets the mydeaths value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PVPLeaderBoardReply.Myinfamy">
            <summary>
            Gets or sets the myinfamy value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PVPLeaderBoardReply.Entries">
            <summary>
            Gets or sets the entries value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.PVPLeaderBoardReply.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32[])">
            <summary>
            Initializes a new instance of the PVPLeaderBoardReply struct with specified field values.
            </summary>
            <param name="MyKills">The mykills value.</param>
            <param name="MyTotalPoints">The mytotalpoints value.</param>
            <param name="MyRank">The myrank value.</param>
            <param name="MyDeaths">The mydeaths value.</param>
            <param name="MyInfamy">The myinfamy value.</param>
            <param name="Entries">The entries value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PVPLeaderBoardReply.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the PVPLeaderBoardReply struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PVPLeaderBoardReply.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the PVPLeaderBoardReply struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PVPLeaderBoardReply.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PVPLeaderBoardReply.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PVPLeaderBoardReply.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.PVPLeaderBoardReply.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PVPLeaderBoardReply.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.PVPLeaderBoardRequest">
            <summary>
            Represents the PVPLeaderBoardRequest packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PVPLeaderBoardRequest.Name">
            <summary>
            Gets or sets the name value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PVPLeaderBoardRequest.Unknown064">
            <summary>
            Gets or sets the unknown064 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PVPLeaderBoardRequest.Level">
            <summary>
            Gets or sets the level value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PVPLeaderBoardRequest.Race">
            <summary>
            Gets or sets the race value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PVPLeaderBoardRequest.Class">
            <summary>
            Gets or sets the class value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PVPLeaderBoardRequest.Guildid">
            <summary>
            Gets or sets the guildid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PVPLeaderBoardRequest.Totalaa">
            <summary>
            Gets or sets the totalaa value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PVPLeaderBoardRequest.Unknown148">
            <summary>
            Gets or sets the unknown148 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PVPLeaderBoardRequest.Kills">
            <summary>
            Gets or sets the kills value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PVPLeaderBoardRequest.Deaths">
            <summary>
            Gets or sets the deaths value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PVPLeaderBoardRequest.Infamy">
            <summary>
            Gets or sets the infamy value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PVPLeaderBoardRequest.Points">
            <summary>
            Gets or sets the points value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.PVPLeaderBoardRequest.#ctor(System.Byte[],System.Byte[],System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the PVPLeaderBoardRequest struct with specified field values.
            </summary>
            <param name="Name">The name value.</param>
            <param name="Unknown064">The unknown064 value.</param>
            <param name="Level">The level value.</param>
            <param name="Race">The race value.</param>
            <param name="Class">The class value.</param>
            <param name="GuildID">The guildid value.</param>
            <param name="TotalAA">The totalaa value.</param>
            <param name="Unknown148">The unknown148 value.</param>
            <param name="Kills">The kills value.</param>
            <param name="Deaths">The deaths value.</param>
            <param name="Infamy">The infamy value.</param>
            <param name="Points">The points value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PVPLeaderBoardRequest.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the PVPLeaderBoardRequest struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PVPLeaderBoardRequest.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the PVPLeaderBoardRequest struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PVPLeaderBoardRequest.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PVPLeaderBoardRequest.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PVPLeaderBoardRequest.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.PVPLeaderBoardRequest.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PVPLeaderBoardRequest.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.PVPStats">
            <summary>
            Represents the PVPStats packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PVPStats.Kills">
            <summary>
            Gets or sets the kills value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PVPStats.Deaths">
            <summary>
            Gets or sets the deaths value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PVPStats.Pvppointsavailable">
            <summary>
            Gets or sets the pvppointsavailable value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PVPStats.Totalpvppoints">
            <summary>
            Gets or sets the totalpvppoints value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PVPStats.Bestkillstreak">
            <summary>
            Gets or sets the bestkillstreak value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PVPStats.Worstdeathstreak">
            <summary>
            Gets or sets the worstdeathstreak value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PVPStats.Currentkillstreak">
            <summary>
            Gets or sets the currentkillstreak value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PVPStats.Infamy">
            <summary>
            Gets or sets the infamy value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PVPStats.Vitality">
            <summary>
            Gets or sets the vitality value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PVPStats.Lastdeath">
            <summary>
            Gets or sets the lastdeath value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PVPStats.Lastkill">
            <summary>
            Gets or sets the lastkill value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.PVPStats.Killslast24hours">
            <summary>
            Gets or sets the killslast24hours value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.PVPStats.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32[])">
            <summary>
            Initializes a new instance of the PVPStats struct with specified field values.
            </summary>
            <param name="Kills">The kills value.</param>
            <param name="Deaths">The deaths value.</param>
            <param name="PVPPointsAvailable">The pvppointsavailable value.</param>
            <param name="TotalPVPPoints">The totalpvppoints value.</param>
            <param name="BestKillStreak">The bestkillstreak value.</param>
            <param name="WorstDeathStreak">The worstdeathstreak value.</param>
            <param name="CurrentKillStreak">The currentkillstreak value.</param>
            <param name="Infamy">The infamy value.</param>
            <param name="Vitality">The vitality value.</param>
            <param name="LastDeath">The lastdeath value.</param>
            <param name="LastKill">The lastkill value.</param>
            <param name="KillsLast24Hours">The killslast24hours value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PVPStats.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the PVPStats struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PVPStats.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the PVPStats struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PVPStats.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PVPStats.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PVPStats.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.PVPStats.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.PVPStats.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.QueryUCSServerStatus">
            <summary>
            Represents the QueryUCSServerStatus packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.QueryUCSServerStatus.Mykills">
            <summary>
            Gets or sets the mykills value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.QueryUCSServerStatus.Mytotalpoints">
            <summary>
            Gets or sets the mytotalpoints value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.QueryUCSServerStatus.Myrank">
            <summary>
            Gets or sets the myrank value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.QueryUCSServerStatus.Mydeaths">
            <summary>
            Gets or sets the mydeaths value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.QueryUCSServerStatus.Myinfamy">
            <summary>
            Gets or sets the myinfamy value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.QueryUCSServerStatus.Entries">
            <summary>
            Gets or sets the entries value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.QueryUCSServerStatus.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32[])">
            <summary>
            Initializes a new instance of the QueryUCSServerStatus struct with specified field values.
            </summary>
            <param name="MyKills">The mykills value.</param>
            <param name="MyTotalPoints">The mytotalpoints value.</param>
            <param name="MyRank">The myrank value.</param>
            <param name="MyDeaths">The mydeaths value.</param>
            <param name="MyInfamy">The myinfamy value.</param>
            <param name="Entries">The entries value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.QueryUCSServerStatus.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the QueryUCSServerStatus struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.QueryUCSServerStatus.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the QueryUCSServerStatus struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.QueryUCSServerStatus.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.QueryUCSServerStatus.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.QueryUCSServerStatus.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.QueryUCSServerStatus.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.QueryUCSServerStatus.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.RaidDelegateAbility">
            <summary>
            Represents the RaidDelegateAbility packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RaidDelegateAbility.Delegateability">
            <summary>
            Gets or sets the delegateability value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RaidDelegateAbility.Membernumber">
            <summary>
            Gets or sets the membernumber value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RaidDelegateAbility.Action">
            <summary>
            Gets or sets the action value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RaidDelegateAbility.Unknown012">
            <summary>
            Gets or sets the unknown012 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RaidDelegateAbility.Unknown016">
            <summary>
            Gets or sets the unknown016 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RaidDelegateAbility.Entityid">
            <summary>
            Gets or sets the entityid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RaidDelegateAbility.Unknown024">
            <summary>
            Gets or sets the unknown024 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RaidDelegateAbility.Name">
            <summary>
            Gets or sets the name value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.RaidDelegateAbility.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Byte[])">
            <summary>
            Initializes a new instance of the RaidDelegateAbility struct with specified field values.
            </summary>
            <param name="DelegateAbility">The delegateability value.</param>
            <param name="MemberNumber">The membernumber value.</param>
            <param name="Action">The action value.</param>
            <param name="Unknown012">The unknown012 value.</param>
            <param name="Unknown016">The unknown016 value.</param>
            <param name="EntityID">The entityid value.</param>
            <param name="Unknown024">The unknown024 value.</param>
            <param name="Name">The name value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RaidDelegateAbility.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the RaidDelegateAbility struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RaidDelegateAbility.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the RaidDelegateAbility struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RaidDelegateAbility.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RaidDelegateAbility.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RaidDelegateAbility.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.RaidDelegateAbility.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RaidDelegateAbility.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.RaidInvite">
            <summary>
            Represents the RaidInvite packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RaidInvite.Action">
            <summary>
            Gets or sets the action value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RaidInvite.PlayerName">
            <summary>
            Gets or sets the playername value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RaidInvite.Unknown68">
            <summary>
            Gets or sets the unknown68 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RaidInvite.LeaderName">
            <summary>
            Gets or sets the leadername value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RaidInvite.Parameter">
            <summary>
            Gets or sets the parameter value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.RaidInvite.#ctor(System.UInt32,System.Byte[],System.UInt32,System.Byte[],System.UInt32)">
            <summary>
            Initializes a new instance of the RaidInvite struct with specified field values.
            </summary>
            <param name="action">The action value.</param>
            <param name="player_name">The playername value.</param>
            <param name="unknown68">The unknown68 value.</param>
            <param name="leader_name">The leadername value.</param>
            <param name="parameter">The parameter value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RaidInvite.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the RaidInvite struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RaidInvite.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the RaidInvite struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RaidInvite.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RaidInvite.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RaidInvite.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.RaidInvite.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RaidInvite.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.RaidJoin">
            <summary>
            Represents the RaidJoin packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RaidJoin.Action">
            <summary>
            Gets or sets the action value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RaidJoin.PlayerName">
            <summary>
            Gets or sets the playername value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RaidJoin.Unknown68">
            <summary>
            Gets or sets the unknown68 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RaidJoin.LeaderName">
            <summary>
            Gets or sets the leadername value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RaidJoin.Parameter">
            <summary>
            Gets or sets the parameter value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.RaidJoin.#ctor(System.UInt32,System.Byte[],System.UInt32,System.Byte[],System.UInt32)">
            <summary>
            Initializes a new instance of the RaidJoin struct with specified field values.
            </summary>
            <param name="action">The action value.</param>
            <param name="player_name">The playername value.</param>
            <param name="unknown68">The unknown68 value.</param>
            <param name="leader_name">The leadername value.</param>
            <param name="parameter">The parameter value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RaidJoin.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the RaidJoin struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RaidJoin.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the RaidJoin struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RaidJoin.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RaidJoin.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RaidJoin.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.RaidJoin.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RaidJoin.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.RaidUpdate">
            <summary>
            Represents the RaidUpdate packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RaidUpdate.Raidgen">
            <summary>
            Gets or sets the raidgen value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RaidUpdate.Class">
            <summary>
            Gets or sets the class value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RaidUpdate.Level">
            <summary>
            Gets or sets the level value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RaidUpdate.Isgroupleader">
            <summary>
            Gets or sets the isgroupleader value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RaidUpdate.Flags">
            <summary>
            Gets or sets the flags value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.RaidUpdate.#ctor(System.UInt32,System.Byte,System.Byte,System.Byte,System.Byte[])">
            <summary>
            Initializes a new instance of the RaidUpdate struct with specified field values.
            </summary>
            <param name="raidGen">The raidgen value.</param>
            <param name="_class">The class value.</param>
            <param name="level">The level value.</param>
            <param name="isGroupLeader">The isgroupleader value.</param>
            <param name="flags">The flags value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RaidUpdate.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the RaidUpdate struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RaidUpdate.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the RaidUpdate struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RaidUpdate.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RaidUpdate.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RaidUpdate.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.RaidUpdate.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RaidUpdate.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.RandomReply">
            <summary>
            Represents the RandomReply packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RandomReply.Low">
            <summary>
            Gets or sets the low value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RandomReply.High">
            <summary>
            Gets or sets the high value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RandomReply.Result">
            <summary>
            Gets or sets the result value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RandomReply.Name">
            <summary>
            Gets or sets the name value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.RandomReply.#ctor(System.UInt32,System.UInt32,System.UInt32,System.Byte[])">
            <summary>
            Initializes a new instance of the RandomReply struct with specified field values.
            </summary>
            <param name="low">The low value.</param>
            <param name="high">The high value.</param>
            <param name="result">The result value.</param>
            <param name="name">The name value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RandomReply.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the RandomReply struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RandomReply.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the RandomReply struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RandomReply.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RandomReply.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RandomReply.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.RandomReply.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RandomReply.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.RandomReq">
            <summary>
            Represents the RandomReq packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.RandomReq.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the RandomReq struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RandomReq.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the RandomReq struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RandomReq.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RandomReq.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RandomReq.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.RandomReq.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RandomReq.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.ReadBook">
            <summary>
            Represents the ReadBook packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReadBook.Window">
            <summary>
            Gets or sets the window value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReadBook.Invslot">
            <summary>
            Gets or sets the invslot value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReadBook.Type">
            <summary>
            Gets or sets the type value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReadBook.TargetId">
            <summary>
            Gets or sets the targetid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReadBook.CanCast">
            <summary>
            Gets or sets the cancast value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReadBook.CanScribe">
            <summary>
            Gets or sets the canscribe value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReadBook.Txtfile">
            <summary>
            Gets or sets the txtfile value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.ReadBook.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Byte,System.Byte,System.Byte[])">
            <summary>
            Initializes a new instance of the ReadBook struct with specified field values.
            </summary>
            <param name="window">The window value.</param>
            <param name="invslot">The invslot value.</param>
            <param name="type">The type value.</param>
            <param name="target_id">The targetid value.</param>
            <param name="can_cast">The cancast value.</param>
            <param name="can_scribe">The canscribe value.</param>
            <param name="txtfile">The txtfile value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ReadBook.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the ReadBook struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ReadBook.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the ReadBook struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ReadBook.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ReadBook.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ReadBook.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.ReadBook.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ReadBook.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.RecipeAutoCombine">
            <summary>
            Represents the RecipeAutoCombine packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RecipeAutoCombine.Window">
            <summary>
            Gets or sets the window value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RecipeAutoCombine.Invslot">
            <summary>
            Gets or sets the invslot value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RecipeAutoCombine.Type">
            <summary>
            Gets or sets the type value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RecipeAutoCombine.TargetId">
            <summary>
            Gets or sets the targetid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RecipeAutoCombine.CanCast">
            <summary>
            Gets or sets the cancast value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RecipeAutoCombine.CanScribe">
            <summary>
            Gets or sets the canscribe value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RecipeAutoCombine.Txtfile">
            <summary>
            Gets or sets the txtfile value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.RecipeAutoCombine.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Byte,System.Byte,System.Byte[])">
            <summary>
            Initializes a new instance of the RecipeAutoCombine struct with specified field values.
            </summary>
            <param name="window">The window value.</param>
            <param name="invslot">The invslot value.</param>
            <param name="type">The type value.</param>
            <param name="target_id">The targetid value.</param>
            <param name="can_cast">The cancast value.</param>
            <param name="can_scribe">The canscribe value.</param>
            <param name="txtfile">The txtfile value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RecipeAutoCombine.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the RecipeAutoCombine struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RecipeAutoCombine.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the RecipeAutoCombine struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RecipeAutoCombine.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RecipeAutoCombine.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RecipeAutoCombine.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.RecipeAutoCombine.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RecipeAutoCombine.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.RecipeDetails">
            <summary>
            Represents the RecipeDetails packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RecipeDetails.ObjectType">
            <summary>
            Gets or sets the objecttype value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RecipeDetails.SomeId">
            <summary>
            Gets or sets the someid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RecipeDetails.Unknown1">
            <summary>
            Gets or sets the unknown1 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RecipeDetails.RecipeId">
            <summary>
            Gets or sets the recipeid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RecipeDetails.ReplyCode">
            <summary>
            Gets or sets the replycode value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.RecipeDetails.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the RecipeDetails struct with specified field values.
            </summary>
            <param name="object_type">The objecttype value.</param>
            <param name="some_id">The someid value.</param>
            <param name="unknown1">The unknown1 value.</param>
            <param name="recipe_id">The recipeid value.</param>
            <param name="reply_code">The replycode value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RecipeDetails.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the RecipeDetails struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RecipeDetails.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the RecipeDetails struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RecipeDetails.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RecipeDetails.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RecipeDetails.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.RecipeDetails.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RecipeDetails.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.RecipeReply">
            <summary>
            Represents the RecipeReply packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RecipeReply.ObjectType">
            <summary>
            Gets or sets the objecttype value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RecipeReply.SomeId">
            <summary>
            Gets or sets the someid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RecipeReply.ComponentCount">
            <summary>
            Gets or sets the componentcount value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RecipeReply.RecipeId">
            <summary>
            Gets or sets the recipeid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RecipeReply.Trivial">
            <summary>
            Gets or sets the trivial value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RecipeReply.RecipeName">
            <summary>
            Gets or sets the recipename value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.RecipeReply.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Byte[])">
            <summary>
            Initializes a new instance of the RecipeReply struct with specified field values.
            </summary>
            <param name="object_type">The objecttype value.</param>
            <param name="some_id">The someid value.</param>
            <param name="component_count">The componentcount value.</param>
            <param name="recipe_id">The recipeid value.</param>
            <param name="trivial">The trivial value.</param>
            <param name="recipe_name">The recipename value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RecipeReply.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the RecipeReply struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RecipeReply.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the RecipeReply struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RecipeReply.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RecipeReply.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RecipeReply.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.RecipeReply.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RecipeReply.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.RecipesFavorite">
            <summary>
            Represents the RecipesFavorite packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RecipesFavorite.ObjectType">
            <summary>
            Gets or sets the objecttype value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RecipesFavorite.SomeId">
            <summary>
            Gets or sets the someid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RecipesFavorite.FavoriteRecipes">
            <summary>
            Gets or sets the favoriterecipes value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.RecipesFavorite.#ctor(System.UInt32,System.UInt32,System.UInt32[])">
            <summary>
            Initializes a new instance of the RecipesFavorite struct with specified field values.
            </summary>
            <param name="object_type">The objecttype value.</param>
            <param name="some_id">The someid value.</param>
            <param name="favorite_recipes">The favoriterecipes value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RecipesFavorite.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the RecipesFavorite struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RecipesFavorite.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the RecipesFavorite struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RecipesFavorite.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RecipesFavorite.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RecipesFavorite.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.RecipesFavorite.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RecipesFavorite.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.RecipesSearch">
            <summary>
            Represents the RecipesSearch packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.RecipesSearch.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the RecipesSearch struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RecipesSearch.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the RecipesSearch struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RecipesSearch.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RecipesSearch.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RecipesSearch.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.RecipesSearch.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RecipesSearch.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.RemoveAllDoors">
            <summary>
            Represents the RemoveAllDoors packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.RemoveAllDoors.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the RemoveAllDoors struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RemoveAllDoors.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the RemoveAllDoors struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RemoveAllDoors.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RemoveAllDoors.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RemoveAllDoors.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.RemoveAllDoors.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RemoveAllDoors.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.RemoveBlockedBuffs">
            <summary>
            Represents the RemoveBlockedBuffs packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RemoveBlockedBuffs.Unknown000">
            <summary>
            Gets or sets the unknown000 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RemoveBlockedBuffs.Unknown081">
            <summary>
            Gets or sets the unknown081 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RemoveBlockedBuffs.Unknown082">
            <summary>
            Gets or sets the unknown082 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RemoveBlockedBuffs.Unknown083">
            <summary>
            Gets or sets the unknown083 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RemoveBlockedBuffs.Unknown084">
            <summary>
            Gets or sets the unknown084 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RemoveBlockedBuffs.Unknown085">
            <summary>
            Gets or sets the unknown085 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RemoveBlockedBuffs.Unknown086">
            <summary>
            Gets or sets the unknown086 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RemoveBlockedBuffs.Unknown087">
            <summary>
            Gets or sets the unknown087 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RemoveBlockedBuffs.Unknown088">
            <summary>
            Gets or sets the unknown088 value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.RemoveBlockedBuffs.#ctor(System.Byte[],System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the RemoveBlockedBuffs struct with specified field values.
            </summary>
            <param name="unknown000">The unknown000 value.</param>
            <param name="unknown081">The unknown081 value.</param>
            <param name="unknown082">The unknown082 value.</param>
            <param name="unknown083">The unknown083 value.</param>
            <param name="unknown084">The unknown084 value.</param>
            <param name="unknown085">The unknown085 value.</param>
            <param name="unknown086">The unknown086 value.</param>
            <param name="unknown087">The unknown087 value.</param>
            <param name="unknown088">The unknown088 value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RemoveBlockedBuffs.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the RemoveBlockedBuffs struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RemoveBlockedBuffs.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the RemoveBlockedBuffs struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RemoveBlockedBuffs.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RemoveBlockedBuffs.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RemoveBlockedBuffs.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.RemoveBlockedBuffs.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RemoveBlockedBuffs.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.RemoveNimbusEffect">
            <summary>
            Represents the RemoveNimbusEffect packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RemoveNimbusEffect.Spawnid">
            <summary>
            Gets or sets the spawnid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RemoveNimbusEffect.NimbusEffect">
            <summary>
            Gets or sets the nimbuseffect value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.RemoveNimbusEffect.#ctor(System.UInt32,System.Int32)">
            <summary>
            Initializes a new instance of the RemoveNimbusEffect struct with specified field values.
            </summary>
            <param name="spawnid">The spawnid value.</param>
            <param name="nimbus_effect">The nimbuseffect value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RemoveNimbusEffect.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the RemoveNimbusEffect struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RemoveNimbusEffect.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the RemoveNimbusEffect struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RemoveNimbusEffect.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RemoveNimbusEffect.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RemoveNimbusEffect.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.RemoveNimbusEffect.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RemoveNimbusEffect.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.Report">
            <summary>
            Represents the Report packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.Report.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the Report struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Report.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the Report struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Report.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Report.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Report.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.Report.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Report.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.ReqClientSpawn">
            <summary>
            Represents the ReqClientSpawn packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.ReqClientSpawn.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the ReqClientSpawn struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ReqClientSpawn.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the ReqClientSpawn struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ReqClientSpawn.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ReqClientSpawn.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ReqClientSpawn.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.ReqClientSpawn.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ReqClientSpawn.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.ReqNewZone">
            <summary>
            Represents the ReqNewZone packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReqNewZone.CharName">
            <summary>
            Gets or sets the charname value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReqNewZone.ZoneShortName">
            <summary>
            Gets or sets the zoneshortname value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReqNewZone.ZoneLongName">
            <summary>
            Gets or sets the zonelongname value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReqNewZone.Ztype">
            <summary>
            Gets or sets the ztype value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReqNewZone.FogRed">
            <summary>
            Gets or sets the fogred value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReqNewZone.FogGreen">
            <summary>
            Gets or sets the foggreen value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReqNewZone.FogBlue">
            <summary>
            Gets or sets the fogblue value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReqNewZone.Unknown323">
            <summary>
            Gets or sets the unknown323 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReqNewZone.FogMinclip">
            <summary>
            Gets or sets the fogminclip value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReqNewZone.FogMaxclip">
            <summary>
            Gets or sets the fogmaxclip value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReqNewZone.Gravity">
            <summary>
            Gets or sets the gravity value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReqNewZone.TimeType">
            <summary>
            Gets or sets the timetype value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReqNewZone.RainChance">
            <summary>
            Gets or sets the rainchance value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReqNewZone.RainDuration">
            <summary>
            Gets or sets the rainduration value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReqNewZone.SnowChance">
            <summary>
            Gets or sets the snowchance value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReqNewZone.SnowDuration">
            <summary>
            Gets or sets the snowduration value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReqNewZone.Unknown537">
            <summary>
            Gets or sets the unknown537 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReqNewZone.Sky">
            <summary>
            Gets or sets the sky value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReqNewZone.Unknown571">
            <summary>
            Gets or sets the unknown571 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReqNewZone.ZoneExpMultiplier">
            <summary>
            Gets or sets the zoneexpmultiplier value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReqNewZone.SafeY">
            <summary>
            Gets or sets the safey value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReqNewZone.SafeX">
            <summary>
            Gets or sets the safex value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReqNewZone.SafeZ">
            <summary>
            Gets or sets the safez value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReqNewZone.MinZ">
            <summary>
            Gets or sets the minz value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReqNewZone.MaxZ">
            <summary>
            Gets or sets the maxz value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReqNewZone.Underworld">
            <summary>
            Gets or sets the underworld value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReqNewZone.Minclip">
            <summary>
            Gets or sets the minclip value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReqNewZone.Maxclip">
            <summary>
            Gets or sets the maxclip value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReqNewZone.Unknown620">
            <summary>
            Gets or sets the unknown620 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReqNewZone.ZoneShortName2">
            <summary>
            Gets or sets the zoneshortname2 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReqNewZone.Unknown800">
            <summary>
            Gets or sets the unknown800 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReqNewZone.Unknown804">
            <summary>
            Gets or sets the unknown804 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReqNewZone.Unknown844">
            <summary>
            Gets or sets the unknown844 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReqNewZone.Unknown848">
            <summary>
            Gets or sets the unknown848 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReqNewZone.ZoneId">
            <summary>
            Gets or sets the zoneid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReqNewZone.ZoneInstance">
            <summary>
            Gets or sets the zoneinstance value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReqNewZone.Scriptnpcreceivedanitem">
            <summary>
            Gets or sets the scriptnpcreceivedanitem value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReqNewZone.Bcheck">
            <summary>
            Gets or sets the bcheck value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReqNewZone.Scriptidsomething">
            <summary>
            Gets or sets the scriptidsomething value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReqNewZone.UnderworldTeleportIndex">
            <summary>
            Gets or sets the underworldteleportindex value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReqNewZone.Scriptidsomething3">
            <summary>
            Gets or sets the scriptidsomething3 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReqNewZone.SuspendBuffs">
            <summary>
            Gets or sets the suspendbuffs value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReqNewZone.LavaDamage">
            <summary>
            Gets or sets the lavadamage value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReqNewZone.MinLavaDamage">
            <summary>
            Gets or sets the minlavadamage value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReqNewZone.Unknown888">
            <summary>
            Gets or sets the unknown888 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReqNewZone.Unknown889">
            <summary>
            Gets or sets the unknown889 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReqNewZone.Unknown890">
            <summary>
            Gets or sets the unknown890 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReqNewZone.Unknown891">
            <summary>
            Gets or sets the unknown891 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReqNewZone.Unknown892">
            <summary>
            Gets or sets the unknown892 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReqNewZone.Unknown893">
            <summary>
            Gets or sets the unknown893 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReqNewZone.FallDamage">
            <summary>
            Gets or sets the falldamage value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReqNewZone.Unknown895">
            <summary>
            Gets or sets the unknown895 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReqNewZone.FastRegenHp">
            <summary>
            Gets or sets the fastregenhp value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReqNewZone.FastRegenMana">
            <summary>
            Gets or sets the fastregenmana value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReqNewZone.FastRegenEndurance">
            <summary>
            Gets or sets the fastregenendurance value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReqNewZone.Unknown908">
            <summary>
            Gets or sets the unknown908 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReqNewZone.Unknown912">
            <summary>
            Gets or sets the unknown912 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReqNewZone.FogDensity">
            <summary>
            Gets or sets the fogdensity value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReqNewZone.Unknown920">
            <summary>
            Gets or sets the unknown920 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReqNewZone.Unknown924">
            <summary>
            Gets or sets the unknown924 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReqNewZone.Unknown928">
            <summary>
            Gets or sets the unknown928 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ReqNewZone.Unknown932">
            <summary>
            Gets or sets the unknown932 value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.ReqNewZone.#ctor(System.Byte[],System.Byte[],System.Byte[],System.Byte,System.Byte[],System.Byte[],System.Byte[],System.Byte,System.Single[],System.Single[],System.Single,System.Byte,System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte,System.Byte[],System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Byte[],System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32,System.UInt16,System.UInt16,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Single,System.UInt32,System.UInt32,System.UInt32,System.Byte[])">
            <summary>
            Initializes a new instance of the ReqNewZone struct with specified field values.
            </summary>
            <param name="char_name">The charname value.</param>
            <param name="zone_short_name">The zoneshortname value.</param>
            <param name="zone_long_name">The zonelongname value.</param>
            <param name="ztype">The ztype value.</param>
            <param name="fog_red">The fogred value.</param>
            <param name="fog_green">The foggreen value.</param>
            <param name="fog_blue">The fogblue value.</param>
            <param name="unknown323">The unknown323 value.</param>
            <param name="fog_minclip">The fogminclip value.</param>
            <param name="fog_maxclip">The fogmaxclip value.</param>
            <param name="gravity">The gravity value.</param>
            <param name="time_type">The timetype value.</param>
            <param name="rain_chance">The rainchance value.</param>
            <param name="rain_duration">The rainduration value.</param>
            <param name="snow_chance">The snowchance value.</param>
            <param name="snow_duration">The snowduration value.</param>
            <param name="unknown537">The unknown537 value.</param>
            <param name="sky">The sky value.</param>
            <param name="unknown571">The unknown571 value.</param>
            <param name="zone_exp_multiplier">The zoneexpmultiplier value.</param>
            <param name="safe_y">The safey value.</param>
            <param name="safe_x">The safex value.</param>
            <param name="safe_z">The safez value.</param>
            <param name="min_z">The minz value.</param>
            <param name="max_z">The maxz value.</param>
            <param name="underworld">The underworld value.</param>
            <param name="minclip">The minclip value.</param>
            <param name="maxclip">The maxclip value.</param>
            <param name="unknown620">The unknown620 value.</param>
            <param name="zone_short_name2">The zoneshortname2 value.</param>
            <param name="unknown800">The unknown800 value.</param>
            <param name="unknown804">The unknown804 value.</param>
            <param name="unknown844">The unknown844 value.</param>
            <param name="unknown848">The unknown848 value.</param>
            <param name="zone_id">The zoneid value.</param>
            <param name="zone_instance">The zoneinstance value.</param>
            <param name="scriptNPCReceivedanItem">The scriptnpcreceivedanitem value.</param>
            <param name="bCheck">The bcheck value.</param>
            <param name="scriptIDSomething">The scriptidsomething value.</param>
            <param name="underworld_teleport_index">The underworldteleportindex value.</param>
            <param name="scriptIDSomething3">The scriptidsomething3 value.</param>
            <param name="suspend_buffs">The suspendbuffs value.</param>
            <param name="lava_damage">The lavadamage value.</param>
            <param name="min_lava_damage">The minlavadamage value.</param>
            <param name="unknown888">The unknown888 value.</param>
            <param name="unknown889">The unknown889 value.</param>
            <param name="unknown890">The unknown890 value.</param>
            <param name="unknown891">The unknown891 value.</param>
            <param name="unknown892">The unknown892 value.</param>
            <param name="unknown893">The unknown893 value.</param>
            <param name="fall_damage">The falldamage value.</param>
            <param name="unknown895">The unknown895 value.</param>
            <param name="fast_regen_hp">The fastregenhp value.</param>
            <param name="fast_regen_mana">The fastregenmana value.</param>
            <param name="fast_regen_endurance">The fastregenendurance value.</param>
            <param name="unknown908">The unknown908 value.</param>
            <param name="unknown912">The unknown912 value.</param>
            <param name="fog_density">The fogdensity value.</param>
            <param name="unknown920">The unknown920 value.</param>
            <param name="unknown924">The unknown924 value.</param>
            <param name="unknown928">The unknown928 value.</param>
            <param name="unknown932">The unknown932 value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ReqNewZone.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the ReqNewZone struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ReqNewZone.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the ReqNewZone struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ReqNewZone.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ReqNewZone.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ReqNewZone.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.ReqNewZone.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ReqNewZone.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.RequestClientZoneChange">
            <summary>
            Represents the RequestClientZoneChange packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RequestClientZoneChange.ZoneId">
            <summary>
            Gets or sets the zoneid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RequestClientZoneChange.InstanceId">
            <summary>
            Gets or sets the instanceid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RequestClientZoneChange.Y">
            <summary>
            Gets or sets the y value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RequestClientZoneChange.X">
            <summary>
            Gets or sets the x value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RequestClientZoneChange.Z">
            <summary>
            Gets or sets the z value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RequestClientZoneChange.Heading">
            <summary>
            Gets or sets the heading value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RequestClientZoneChange.Type">
            <summary>
            Gets or sets the type value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.RequestClientZoneChange.#ctor(System.UInt16,System.UInt16,System.Single,System.Single,System.Single,System.Single,System.UInt32)">
            <summary>
            Initializes a new instance of the RequestClientZoneChange struct with specified field values.
            </summary>
            <param name="zone_id">The zoneid value.</param>
            <param name="instance_id">The instanceid value.</param>
            <param name="y">The y value.</param>
            <param name="x">The x value.</param>
            <param name="z">The z value.</param>
            <param name="heading">The heading value.</param>
            <param name="type">The type value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RequestClientZoneChange.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the RequestClientZoneChange struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RequestClientZoneChange.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the RequestClientZoneChange struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RequestClientZoneChange.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RequestClientZoneChange.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RequestClientZoneChange.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.RequestClientZoneChange.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RequestClientZoneChange.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.RequestDuel">
            <summary>
            Represents the RequestDuel packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RequestDuel.DuelInitiator">
            <summary>
            Gets or sets the duelinitiator value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RequestDuel.DuelTarget">
            <summary>
            Gets or sets the dueltarget value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.RequestDuel.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the RequestDuel struct with specified field values.
            </summary>
            <param name="duel_initiator">The duelinitiator value.</param>
            <param name="duel_target">The dueltarget value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RequestDuel.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the RequestDuel struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RequestDuel.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the RequestDuel struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RequestDuel.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RequestDuel.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RequestDuel.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.RequestDuel.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RequestDuel.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.RequestTitles">
            <summary>
            Represents the RequestTitles packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.RequestTitles.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the RequestTitles struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RequestTitles.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the RequestTitles struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RequestTitles.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RequestTitles.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RequestTitles.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.RequestTitles.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RequestTitles.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.RespawnWindow">
            <summary>
            Represents the RespawnWindow packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.RespawnWindow.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the RespawnWindow struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RespawnWindow.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the RespawnWindow struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RespawnWindow.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RespawnWindow.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RespawnWindow.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.RespawnWindow.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RespawnWindow.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.RespondAA">
            <summary>
            Represents the RespondAA packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RespondAA.AaSpent">
            <summary>
            Gets or sets the aaspent value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RespondAA.AaAssigned">
            <summary>
            Gets or sets the aaassigned value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RespondAA.AaSpent3">
            <summary>
            Gets or sets the aaspent3 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RespondAA.Unknown012">
            <summary>
            Gets or sets the unknown012 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RespondAA.Unknown016">
            <summary>
            Gets or sets the unknown016 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RespondAA.Unknown020">
            <summary>
            Gets or sets the unknown020 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RespondAA.AaList">
            <summary>
            Gets or sets the aalist value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.RespondAA.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Initializes a new instance of the RespondAA struct with specified field values.
            </summary>
            <param name="aa_spent">The aaspent value.</param>
            <param name="aa_assigned">The aaassigned value.</param>
            <param name="aa_spent3">The aaspent3 value.</param>
            <param name="unknown012">The unknown012 value.</param>
            <param name="unknown016">The unknown016 value.</param>
            <param name="unknown020">The unknown020 value.</param>
            <param name="aa_list">The aalist value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RespondAA.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the RespondAA struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RespondAA.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the RespondAA struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RespondAA.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RespondAA.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RespondAA.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.RespondAA.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RespondAA.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.RestState">
            <summary>
            Represents the RestState packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.RestState.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the RestState struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RestState.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the RestState struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RestState.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RestState.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RestState.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.RestState.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RestState.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.Rewind">
            <summary>
            Represents the Rewind packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.Rewind.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the Rewind struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Rewind.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the Rewind struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Rewind.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Rewind.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Rewind.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.Rewind.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Rewind.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.RezzAnswer">
            <summary>
            Represents the RezzAnswer packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.RezzAnswer.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the RezzAnswer struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RezzAnswer.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the RezzAnswer struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RezzAnswer.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RezzAnswer.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RezzAnswer.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.RezzAnswer.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RezzAnswer.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.RezzComplete">
            <summary>
            Represents the RezzComplete packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.RezzComplete.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the RezzComplete struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RezzComplete.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the RezzComplete struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RezzComplete.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RezzComplete.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RezzComplete.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.RezzComplete.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RezzComplete.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.RezzRequest">
            <summary>
            Represents the RezzRequest packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RezzRequest.Unknown00">
            <summary>
            Gets or sets the unknown00 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RezzRequest.ZoneId">
            <summary>
            Gets or sets the zoneid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RezzRequest.InstanceId">
            <summary>
            Gets or sets the instanceid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RezzRequest.Y">
            <summary>
            Gets or sets the y value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RezzRequest.X">
            <summary>
            Gets or sets the x value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RezzRequest.Z">
            <summary>
            Gets or sets the z value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RezzRequest.YourName">
            <summary>
            Gets or sets the yourname value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RezzRequest.Unknown88">
            <summary>
            Gets or sets the unknown88 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RezzRequest.RezzerName">
            <summary>
            Gets or sets the rezzername value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RezzRequest.Spellid">
            <summary>
            Gets or sets the spellid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RezzRequest.CorpseName">
            <summary>
            Gets or sets the corpsename value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.RezzRequest.Action">
            <summary>
            Gets or sets the action value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.RezzRequest.#ctor(System.UInt32,System.UInt16,System.UInt16,System.Single,System.Single,System.Single,System.Byte[],System.UInt32,System.Byte[],System.UInt32,System.Byte[],System.UInt32)">
            <summary>
            Initializes a new instance of the RezzRequest struct with specified field values.
            </summary>
            <param name="unknown00">The unknown00 value.</param>
            <param name="zone_id">The zoneid value.</param>
            <param name="instance_id">The instanceid value.</param>
            <param name="y">The y value.</param>
            <param name="x">The x value.</param>
            <param name="z">The z value.</param>
            <param name="your_name">The yourname value.</param>
            <param name="unknown88">The unknown88 value.</param>
            <param name="rezzer_name">The rezzername value.</param>
            <param name="spellid">The spellid value.</param>
            <param name="corpse_name">The corpsename value.</param>
            <param name="action">The action value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RezzRequest.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the RezzRequest struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RezzRequest.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the RezzRequest struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RezzRequest.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RezzRequest.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RezzRequest.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.RezzRequest.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.RezzRequest.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.Sacrifice">
            <summary>
            Represents the Sacrifice packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Sacrifice.Casterid">
            <summary>
            Gets or sets the casterid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Sacrifice.Targetid">
            <summary>
            Gets or sets the targetid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Sacrifice.Confirm">
            <summary>
            Gets or sets the confirm value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.Sacrifice.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the Sacrifice struct with specified field values.
            </summary>
            <param name="CasterID">The casterid value.</param>
            <param name="TargetID">The targetid value.</param>
            <param name="Confirm">The confirm value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Sacrifice.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the Sacrifice struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Sacrifice.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the Sacrifice struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Sacrifice.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Sacrifice.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Sacrifice.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.Sacrifice.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Sacrifice.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.SafeFallSuccess">
            <summary>
            Represents the SafeFallSuccess packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.SafeFallSuccess.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the SafeFallSuccess struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SafeFallSuccess.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the SafeFallSuccess struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SafeFallSuccess.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SafeFallSuccess.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SafeFallSuccess.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.SafeFallSuccess.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SafeFallSuccess.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.Save">
            <summary>
            Represents the Save packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Save.Unknown00">
            <summary>
            Gets or sets the unknown00 value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.Save.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the Save struct with specified field values.
            </summary>
            <param name="unknown00">The unknown00 value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Save.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the Save struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Save.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the Save struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Save.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Save.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Save.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.Save.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Save.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.SaveOnZoneReq">
            <summary>
            Represents the SaveOnZoneReq packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.SaveOnZoneReq.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the SaveOnZoneReq struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SaveOnZoneReq.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the SaveOnZoneReq struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SaveOnZoneReq.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SaveOnZoneReq.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SaveOnZoneReq.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.SaveOnZoneReq.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SaveOnZoneReq.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.SelectTribute">
            <summary>
            Represents the SelectTribute packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SelectTribute.ClientId">
            <summary>
            Gets or sets the clientid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SelectTribute.TributeId">
            <summary>
            Gets or sets the tributeid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SelectTribute.Unknown8">
            <summary>
            Gets or sets the unknown8 value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.SelectTribute.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the SelectTribute struct with specified field values.
            </summary>
            <param name="client_id">The clientid value.</param>
            <param name="tribute_id">The tributeid value.</param>
            <param name="unknown8">The unknown8 value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SelectTribute.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the SelectTribute struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SelectTribute.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the SelectTribute struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SelectTribute.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SelectTribute.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SelectTribute.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.SelectTribute.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SelectTribute.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.SendAAStats">
            <summary>
            Represents the SendAAStats packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.SendAAStats.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the SendAAStats struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SendAAStats.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the SendAAStats struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SendAAStats.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SendAAStats.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SendAAStats.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.SendAAStats.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SendAAStats.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.SendAATable">
            <summary>
            Represents the SendAATable packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SendAATable.Id">
            <summary>
            Gets or sets the id value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SendAATable.Unknown004">
            <summary>
            Gets or sets the unknown004 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SendAATable.HotkeySid">
            <summary>
            Gets or sets the hotkeysid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SendAATable.HotkeySid2">
            <summary>
            Gets or sets the hotkeysid2 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SendAATable.TitleSid">
            <summary>
            Gets or sets the titlesid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SendAATable.DescSid">
            <summary>
            Gets or sets the descsid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SendAATable.ClassType">
            <summary>
            Gets or sets the classtype value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SendAATable.Cost">
            <summary>
            Gets or sets the cost value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SendAATable.Seq">
            <summary>
            Gets or sets the seq value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SendAATable.CurrentLevel">
            <summary>
            Gets or sets the currentlevel value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SendAATable.PrereqSkill">
            <summary>
            Gets or sets the prereqskill value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SendAATable.PrereqMinpoints">
            <summary>
            Gets or sets the prereqminpoints value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SendAATable.Type">
            <summary>
            Gets or sets the type value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SendAATable.Spellid">
            <summary>
            Gets or sets the spellid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SendAATable.SpellType">
            <summary>
            Gets or sets the spelltype value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SendAATable.SpellRefresh">
            <summary>
            Gets or sets the spellrefresh value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SendAATable.Classes">
            <summary>
            Gets or sets the classes value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SendAATable.MaxLevel">
            <summary>
            Gets or sets the maxlevel value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SendAATable.LastId">
            <summary>
            Gets or sets the lastid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SendAATable.NextId">
            <summary>
            Gets or sets the nextid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SendAATable.Cost2">
            <summary>
            Gets or sets the cost2 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SendAATable.Unknown81">
            <summary>
            Gets or sets the unknown81 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SendAATable.GrantOnly">
            <summary>
            Gets or sets the grantonly value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SendAATable.Unknown83">
            <summary>
            Gets or sets the unknown83 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SendAATable.ExpendableCharges">
            <summary>
            Gets or sets the expendablecharges value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SendAATable.AaExpansion">
            <summary>
            Gets or sets the aaexpansion value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SendAATable.SpecialCategory">
            <summary>
            Gets or sets the specialcategory value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SendAATable.Shroud">
            <summary>
            Gets or sets the shroud value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SendAATable.Unknown97">
            <summary>
            Gets or sets the unknown97 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SendAATable.ResetOnDeath">
            <summary>
            Gets or sets the resetondeath value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SendAATable.Unknown99">
            <summary>
            Gets or sets the unknown99 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SendAATable.TotalAbilities">
            <summary>
            Gets or sets the totalabilities value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SendAATable.Abilities">
            <summary>
            Gets or sets the abilities value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.SendAATable.#ctor(System.UInt32,System.Byte,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Byte,System.Byte,System.Byte,System.UInt32,System.UInt32,System.UInt32,System.Byte,System.Byte,System.Byte,System.Byte,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the SendAATable struct with specified field values.
            </summary>
            <param name="id">The id value.</param>
            <param name="unknown004">The unknown004 value.</param>
            <param name="hotkey_sid">The hotkeysid value.</param>
            <param name="hotkey_sid2">The hotkeysid2 value.</param>
            <param name="title_sid">The titlesid value.</param>
            <param name="desc_sid">The descsid value.</param>
            <param name="class_type">The classtype value.</param>
            <param name="cost">The cost value.</param>
            <param name="seq">The seq value.</param>
            <param name="current_level">The currentlevel value.</param>
            <param name="prereq_skill">The prereqskill value.</param>
            <param name="prereq_minpoints">The prereqminpoints value.</param>
            <param name="type">The type value.</param>
            <param name="spellid">The spellid value.</param>
            <param name="spell_type">The spelltype value.</param>
            <param name="spell_refresh">The spellrefresh value.</param>
            <param name="classes">The classes value.</param>
            <param name="max_level">The maxlevel value.</param>
            <param name="last_id">The lastid value.</param>
            <param name="next_id">The nextid value.</param>
            <param name="cost2">The cost2 value.</param>
            <param name="unknown81">The unknown81 value.</param>
            <param name="grant_only">The grantonly value.</param>
            <param name="unknown83">The unknown83 value.</param>
            <param name="expendable_charges">The expendablecharges value.</param>
            <param name="aa_expansion">The aaexpansion value.</param>
            <param name="special_category">The specialcategory value.</param>
            <param name="shroud">The shroud value.</param>
            <param name="unknown97">The unknown97 value.</param>
            <param name="reset_on_death">The resetondeath value.</param>
            <param name="unknown99">The unknown99 value.</param>
            <param name="total_abilities">The totalabilities value.</param>
            <param name="abilities">The abilities value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SendAATable.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the SendAATable struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SendAATable.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the SendAATable struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SendAATable.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SendAATable.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SendAATable.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.SendAATable.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SendAATable.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.SendExpZonein">
            <summary>
            Represents the SendExpZonein packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.SendExpZonein.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the SendExpZonein struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SendExpZonein.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the SendExpZonein struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SendExpZonein.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SendExpZonein.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SendExpZonein.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.SendExpZonein.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SendExpZonein.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.SendFindableNPCs">
            <summary>
            Represents the SendFindableNPCs packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="T:OpenEQ.Netcode.SendGuildTributes">
            <summary>
            Represents the SendGuildTributes packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SendGuildTributes.GuildId">
            <summary>
            Gets or sets the guildid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SendGuildTributes.Ability">
            <summary>
            Gets or sets the ability value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.SendGuildTributes.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the SendGuildTributes struct with specified field values.
            </summary>
            <param name="guild_id">The guildid value.</param>
            <param name="ability">The ability value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SendGuildTributes.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the SendGuildTributes struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SendGuildTributes.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the SendGuildTributes struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SendGuildTributes.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SendGuildTributes.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SendGuildTributes.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.SendGuildTributes.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SendGuildTributes.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.SendTitleList">
            <summary>
            Represents the SendTitleList packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.SendTitleList.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the SendTitleList struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SendTitleList.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the SendTitleList struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SendTitleList.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SendTitleList.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SendTitleList.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.SendTitleList.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SendTitleList.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.SendTributes">
            <summary>
            Represents the SendTributes packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.SendTributes.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the SendTributes struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SendTributes.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the SendTributes struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SendTributes.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SendTributes.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SendTributes.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.SendTributes.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SendTributes.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.SendZonepoints">
            <summary>
            Represents the SendZonepoints packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SendZonepoints.Count">
            <summary>
            Gets or sets the count value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.SendZonepoints.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the SendZonepoints struct with specified field values.
            </summary>
            <param name="count">The count value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SendZonepoints.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the SendZonepoints struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SendZonepoints.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the SendZonepoints struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SendZonepoints.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SendZonepoints.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SendZonepoints.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.SendZonepoints.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SendZonepoints.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.SenseHeading">
            <summary>
            Represents the SenseHeading packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SenseHeading.ClientId">
            <summary>
            Gets or sets the clientid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SenseHeading.TributeId">
            <summary>
            Gets or sets the tributeid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SenseHeading.Unknown8">
            <summary>
            Gets or sets the unknown8 value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.SenseHeading.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the SenseHeading struct with specified field values.
            </summary>
            <param name="client_id">The clientid value.</param>
            <param name="tribute_id">The tributeid value.</param>
            <param name="unknown8">The unknown8 value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SenseHeading.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the SenseHeading struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SenseHeading.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the SenseHeading struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SenseHeading.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SenseHeading.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SenseHeading.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.SenseHeading.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SenseHeading.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.SenseTraps">
            <summary>
            Represents the SenseTraps packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.SenseTraps.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the SenseTraps struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SenseTraps.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the SenseTraps struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SenseTraps.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SenseTraps.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SenseTraps.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.SenseTraps.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SenseTraps.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.SetFace">
            <summary>
            Represents the SetFace packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SetFace.Haircolor">
            <summary>
            Gets or sets the haircolor value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SetFace.Beardcolor">
            <summary>
            Gets or sets the beardcolor value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SetFace.Eyecolor1">
            <summary>
            Gets or sets the eyecolor1 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SetFace.Eyecolor2">
            <summary>
            Gets or sets the eyecolor2 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SetFace.Hairstyle">
            <summary>
            Gets or sets the hairstyle value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SetFace.Beard">
            <summary>
            Gets or sets the beard value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SetFace.Face">
            <summary>
            Gets or sets the face value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SetFace.UnusedPadding">
            <summary>
            Gets or sets the unusedpadding value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SetFace.DrakkinHeritage">
            <summary>
            Gets or sets the drakkinheritage value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SetFace.DrakkinTattoo">
            <summary>
            Gets or sets the drakkintattoo value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SetFace.DrakkinDetails">
            <summary>
            Gets or sets the drakkindetails value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SetFace.EntityId">
            <summary>
            Gets or sets the entityid value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.SetFace.#ctor(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the SetFace struct with specified field values.
            </summary>
            <param name="haircolor">The haircolor value.</param>
            <param name="beardcolor">The beardcolor value.</param>
            <param name="eyecolor1">The eyecolor1 value.</param>
            <param name="eyecolor2">The eyecolor2 value.</param>
            <param name="hairstyle">The hairstyle value.</param>
            <param name="beard">The beard value.</param>
            <param name="face">The face value.</param>
            <param name="unused_padding">The unusedpadding value.</param>
            <param name="drakkin_heritage">The drakkinheritage value.</param>
            <param name="drakkin_tattoo">The drakkintattoo value.</param>
            <param name="drakkin_details">The drakkindetails value.</param>
            <param name="entity_id">The entityid value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SetFace.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the SetFace struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SetFace.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the SetFace struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SetFace.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SetFace.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SetFace.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.SetFace.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SetFace.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.SetGroupTarget">
            <summary>
            Represents the SetGroupTarget packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SetGroupTarget.Targetid">
            <summary>
            Gets or sets the targetid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SetGroupTarget.Number">
            <summary>
            Gets or sets the number value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SetGroupTarget.Name">
            <summary>
            Gets or sets the name value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.SetGroupTarget.#ctor(System.UInt32,System.UInt32,System.Byte[])">
            <summary>
            Initializes a new instance of the SetGroupTarget struct with specified field values.
            </summary>
            <param name="TargetID">The targetid value.</param>
            <param name="Number">The number value.</param>
            <param name="Name">The name value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SetGroupTarget.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the SetGroupTarget struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SetGroupTarget.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the SetGroupTarget struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SetGroupTarget.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SetGroupTarget.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SetGroupTarget.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.SetGroupTarget.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SetGroupTarget.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.SetGuildMOTD">
            <summary>
            Represents the SetGuildMOTD packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.SetGuildMOTD.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the SetGuildMOTD struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SetGuildMOTD.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the SetGuildMOTD struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SetGuildMOTD.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SetGuildMOTD.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SetGuildMOTD.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.SetGuildMOTD.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SetGuildMOTD.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.SetGuildRank">
            <summary>
            Represents the SetGuildRank packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SetGuildRank.Unknown00">
            <summary>
            Gets or sets the unknown00 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SetGuildRank.Unknown04">
            <summary>
            Gets or sets the unknown04 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SetGuildRank.Rank">
            <summary>
            Gets or sets the rank value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SetGuildRank.MemberName">
            <summary>
            Gets or sets the membername value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SetGuildRank.Banker">
            <summary>
            Gets or sets the banker value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.SetGuildRank.#ctor(System.UInt32,System.UInt32,System.UInt32,System.Byte[],System.UInt32)">
            <summary>
            Initializes a new instance of the SetGuildRank struct with specified field values.
            </summary>
            <param name="unknown00">The unknown00 value.</param>
            <param name="unknown04">The unknown04 value.</param>
            <param name="rank">The rank value.</param>
            <param name="member_name">The membername value.</param>
            <param name="banker">The banker value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SetGuildRank.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the SetGuildRank struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SetGuildRank.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the SetGuildRank struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SetGuildRank.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SetGuildRank.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SetGuildRank.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.SetGuildRank.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SetGuildRank.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.SetRunMode">
            <summary>
            Represents the SetRunMode packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SetRunMode.Mode">
            <summary>
            Gets or sets the mode value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SetRunMode.Unknown">
            <summary>
            Gets or sets the unknown value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.SetRunMode.#ctor(System.Byte,System.Byte[])">
            <summary>
            Initializes a new instance of the SetRunMode struct with specified field values.
            </summary>
            <param name="mode">The mode value.</param>
            <param name="unknown">The unknown value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SetRunMode.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the SetRunMode struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SetRunMode.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the SetRunMode struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SetRunMode.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SetRunMode.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SetRunMode.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.SetRunMode.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SetRunMode.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.SetServerFilter">
            <summary>
            Represents the SetServerFilter packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SetServerFilter.Filters">
            <summary>
            Gets or sets the filters value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.SetServerFilter.#ctor(System.UInt32[])">
            <summary>
            Initializes a new instance of the SetServerFilter struct with specified field values.
            </summary>
            <param name="filters">The filters value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SetServerFilter.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the SetServerFilter struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SetServerFilter.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the SetServerFilter struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SetServerFilter.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SetServerFilter.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SetServerFilter.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.SetServerFilter.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SetServerFilter.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.SetStartCity">
            <summary>
            Represents the SetStartCity packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SetStartCity.Filters">
            <summary>
            Gets or sets the filters value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.SetStartCity.#ctor(System.UInt32[])">
            <summary>
            Initializes a new instance of the SetStartCity struct with specified field values.
            </summary>
            <param name="filters">The filters value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SetStartCity.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the SetStartCity struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SetStartCity.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the SetStartCity struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SetStartCity.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SetStartCity.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SetStartCity.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.SetStartCity.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SetStartCity.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.SetTitle">
            <summary>
            Represents the SetTitle packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SetTitle.IsSuffix">
            <summary>
            Gets or sets the issuffix value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SetTitle.Title">
            <summary>
            Gets or sets the title value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SetTitle.EntityId">
            <summary>
            Gets or sets the entityid value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.SetTitle.#ctor(System.UInt32,System.Byte[],System.UInt32)">
            <summary>
            Initializes a new instance of the SetTitle struct with specified field values.
            </summary>
            <param name="is_suffix">The issuffix value.</param>
            <param name="title">The title value.</param>
            <param name="entity_id">The entityid value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SetTitle.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the SetTitle struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SetTitle.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the SetTitle struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SetTitle.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SetTitle.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SetTitle.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.SetTitle.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SetTitle.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.SetTitleReply">
            <summary>
            Represents the SetTitleReply packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SetTitleReply.IsSuffix">
            <summary>
            Gets or sets the issuffix value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SetTitleReply.Title">
            <summary>
            Gets or sets the title value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SetTitleReply.EntityId">
            <summary>
            Gets or sets the entityid value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.SetTitleReply.#ctor(System.UInt32,System.Byte[],System.UInt32)">
            <summary>
            Initializes a new instance of the SetTitleReply struct with specified field values.
            </summary>
            <param name="is_suffix">The issuffix value.</param>
            <param name="title">The title value.</param>
            <param name="entity_id">The entityid value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SetTitleReply.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the SetTitleReply struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SetTitleReply.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the SetTitleReply struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SetTitleReply.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SetTitleReply.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SetTitleReply.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.SetTitleReply.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SetTitleReply.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.Shielding">
            <summary>
            Represents the Shielding packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.Shielding.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the Shielding struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Shielding.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the Shielding struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Shielding.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Shielding.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Shielding.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.Shielding.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Shielding.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.ShopDelItem">
            <summary>
            Represents the ShopDelItem packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ShopDelItem.Npcid">
            <summary>
            Gets or sets the npcid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ShopDelItem.Playerid">
            <summary>
            Gets or sets the playerid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ShopDelItem.Itemslot">
            <summary>
            Gets or sets the itemslot value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.ShopDelItem.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the ShopDelItem struct with specified field values.
            </summary>
            <param name="npcid">The npcid value.</param>
            <param name="playerid">The playerid value.</param>
            <param name="itemslot">The itemslot value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ShopDelItem.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the ShopDelItem struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ShopDelItem.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the ShopDelItem struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ShopDelItem.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ShopDelItem.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ShopDelItem.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.ShopDelItem.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ShopDelItem.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.ShopEnd">
            <summary>
            Represents the ShopEnd packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ShopEnd.TargetId">
            <summary>
            Gets or sets the targetid value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.ShopEnd.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the ShopEnd struct with specified field values.
            </summary>
            <param name="target_id">The targetid value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ShopEnd.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the ShopEnd struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ShopEnd.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the ShopEnd struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ShopEnd.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ShopEnd.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ShopEnd.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.ShopEnd.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ShopEnd.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.ShopEndConfirm">
            <summary>
            Represents the ShopEndConfirm packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.ShopEndConfirm.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the ShopEndConfirm struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ShopEndConfirm.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the ShopEndConfirm struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ShopEndConfirm.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ShopEndConfirm.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ShopEndConfirm.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.ShopEndConfirm.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ShopEndConfirm.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.ShopPlayerBuy">
            <summary>
            Represents the ShopPlayerBuy packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ShopPlayerBuy.Npcid">
            <summary>
            Gets or sets the npcid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ShopPlayerBuy.Playerid">
            <summary>
            Gets or sets the playerid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ShopPlayerBuy.Itemslot">
            <summary>
            Gets or sets the itemslot value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ShopPlayerBuy.Unknown12">
            <summary>
            Gets or sets the unknown12 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ShopPlayerBuy.Quantity">
            <summary>
            Gets or sets the quantity value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ShopPlayerBuy.Unknown020">
            <summary>
            Gets or sets the unknown020 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ShopPlayerBuy.Price">
            <summary>
            Gets or sets the price value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ShopPlayerBuy.Pricehighorderbits">
            <summary>
            Gets or sets the pricehighorderbits value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.ShopPlayerBuy.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the ShopPlayerBuy struct with specified field values.
            </summary>
            <param name="npcid">The npcid value.</param>
            <param name="playerid">The playerid value.</param>
            <param name="itemslot">The itemslot value.</param>
            <param name="unknown12">The unknown12 value.</param>
            <param name="quantity">The quantity value.</param>
            <param name="Unknown020">The unknown020 value.</param>
            <param name="price">The price value.</param>
            <param name="pricehighorderbits">The pricehighorderbits value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ShopPlayerBuy.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the ShopPlayerBuy struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ShopPlayerBuy.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the ShopPlayerBuy struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ShopPlayerBuy.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ShopPlayerBuy.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ShopPlayerBuy.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.ShopPlayerBuy.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ShopPlayerBuy.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.ShopPlayerSell">
            <summary>
            Represents the ShopPlayerSell packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ShopPlayerSell.Npcid">
            <summary>
            Gets or sets the npcid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ShopPlayerSell.Itemslot">
            <summary>
            Gets or sets the itemslot value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ShopPlayerSell.Quantity">
            <summary>
            Gets or sets the quantity value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ShopPlayerSell.Price">
            <summary>
            Gets or sets the price value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.ShopPlayerSell.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the ShopPlayerSell struct with specified field values.
            </summary>
            <param name="npcid">The npcid value.</param>
            <param name="itemslot">The itemslot value.</param>
            <param name="quantity">The quantity value.</param>
            <param name="price">The price value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ShopPlayerSell.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the ShopPlayerSell struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ShopPlayerSell.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the ShopPlayerSell struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ShopPlayerSell.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ShopPlayerSell.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ShopPlayerSell.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.ShopPlayerSell.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ShopPlayerSell.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.ShopRequest">
            <summary>
            Represents the ShopRequest packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ShopRequest.NpcId">
            <summary>
            Gets or sets the npcid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ShopRequest.PlayerId">
            <summary>
            Gets or sets the playerid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ShopRequest.Command">
            <summary>
            Gets or sets the command value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ShopRequest.Rate">
            <summary>
            Gets or sets the rate value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.ShopRequest.#ctor(System.UInt32,System.UInt32,System.UInt32,System.Single)">
            <summary>
            Initializes a new instance of the ShopRequest struct with specified field values.
            </summary>
            <param name="npc_id">The npcid value.</param>
            <param name="player_id">The playerid value.</param>
            <param name="command">The command value.</param>
            <param name="rate">The rate value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ShopRequest.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the ShopRequest struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ShopRequest.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the ShopRequest struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ShopRequest.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ShopRequest.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ShopRequest.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.ShopRequest.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ShopRequest.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.SimpleMessage">
            <summary>
            Represents the SimpleMessage packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SimpleMessage.StringId">
            <summary>
            Gets or sets the stringid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SimpleMessage.Color">
            <summary>
            Gets or sets the color value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SimpleMessage.Unknown8">
            <summary>
            Gets or sets the unknown8 value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.SimpleMessage.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the SimpleMessage struct with specified field values.
            </summary>
            <param name="string_id">The stringid value.</param>
            <param name="color">The color value.</param>
            <param name="unknown8">The unknown8 value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SimpleMessage.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the SimpleMessage struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SimpleMessage.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the SimpleMessage struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SimpleMessage.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SimpleMessage.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SimpleMessage.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.SimpleMessage.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SimpleMessage.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.SkillUpdate">
            <summary>
            Represents the SkillUpdate packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.SkillUpdate.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.Sneak">
            <summary>
            Represents the Sneak packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.Sneak.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the Sneak struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Sneak.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the Sneak struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Sneak.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Sneak.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Sneak.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.Sneak.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Sneak.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.SomeItemPacketMaybe">
            <summary>
            Represents the SomeItemPacketMaybe packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SomeItemPacketMaybe.SrcY">
            <summary>
            Gets or sets the srcy value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SomeItemPacketMaybe.SrcX">
            <summary>
            Gets or sets the srcx value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SomeItemPacketMaybe.SrcZ">
            <summary>
            Gets or sets the srcz value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SomeItemPacketMaybe.Unknown012">
            <summary>
            Gets or sets the unknown012 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SomeItemPacketMaybe.Velocity">
            <summary>
            Gets or sets the velocity value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SomeItemPacketMaybe.LaunchAngle">
            <summary>
            Gets or sets the launchangle value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SomeItemPacketMaybe.Tilt">
            <summary>
            Gets or sets the tilt value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SomeItemPacketMaybe.Unknown036">
            <summary>
            Gets or sets the unknown036 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SomeItemPacketMaybe.Arc">
            <summary>
            Gets or sets the arc value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SomeItemPacketMaybe.SourceId">
            <summary>
            Gets or sets the sourceid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SomeItemPacketMaybe.TargetId">
            <summary>
            Gets or sets the targetid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SomeItemPacketMaybe.ItemId">
            <summary>
            Gets or sets the itemid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SomeItemPacketMaybe.Unknown060">
            <summary>
            Gets or sets the unknown060 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SomeItemPacketMaybe.Unknown070">
            <summary>
            Gets or sets the unknown070 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SomeItemPacketMaybe.ItemType">
            <summary>
            Gets or sets the itemtype value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SomeItemPacketMaybe.Skill">
            <summary>
            Gets or sets the skill value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SomeItemPacketMaybe.Unknown073">
            <summary>
            Gets or sets the unknown073 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SomeItemPacketMaybe.ModelName">
            <summary>
            Gets or sets the modelname value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.SomeItemPacketMaybe.#ctor(System.Single,System.Single,System.Single,System.Byte[],System.Single,System.Single,System.Single,System.Byte[],System.Single,System.UInt32,System.UInt32,System.UInt32,System.Byte[],System.Byte,System.Byte,System.Byte,System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the SomeItemPacketMaybe struct with specified field values.
            </summary>
            <param name="src_y">The srcy value.</param>
            <param name="src_x">The srcx value.</param>
            <param name="src_z">The srcz value.</param>
            <param name="unknown012">The unknown012 value.</param>
            <param name="velocity">The velocity value.</param>
            <param name="launch_angle">The launchangle value.</param>
            <param name="tilt">The tilt value.</param>
            <param name="unknown036">The unknown036 value.</param>
            <param name="arc">The arc value.</param>
            <param name="source_id">The sourceid value.</param>
            <param name="target_id">The targetid value.</param>
            <param name="item_id">The itemid value.</param>
            <param name="unknown060">The unknown060 value.</param>
            <param name="unknown070">The unknown070 value.</param>
            <param name="item_type">The itemtype value.</param>
            <param name="skill">The skill value.</param>
            <param name="unknown073">The unknown073 value.</param>
            <param name="model_name">The modelname value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SomeItemPacketMaybe.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the SomeItemPacketMaybe struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SomeItemPacketMaybe.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the SomeItemPacketMaybe struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SomeItemPacketMaybe.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SomeItemPacketMaybe.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SomeItemPacketMaybe.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.SomeItemPacketMaybe.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SomeItemPacketMaybe.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.Sound">
            <summary>
            Represents the Sound packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.Sound.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.SpawnAppearance">
            <summary>
            Represents the SpawnAppearance packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SpawnAppearance.SpawnId">
            <summary>
            Gets or sets the spawnid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SpawnAppearance.Type">
            <summary>
            Gets or sets the type value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SpawnAppearance.Parameter">
            <summary>
            Gets or sets the parameter value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.SpawnAppearance.#ctor(System.UInt16,System.UInt16,System.UInt32)">
            <summary>
            Initializes a new instance of the SpawnAppearance struct with specified field values.
            </summary>
            <param name="spawn_id">The spawnid value.</param>
            <param name="type">The type value.</param>
            <param name="parameter">The parameter value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SpawnAppearance.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the SpawnAppearance struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SpawnAppearance.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the SpawnAppearance struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SpawnAppearance.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SpawnAppearance.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SpawnAppearance.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.SpawnAppearance.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SpawnAppearance.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.SpawnDoor">
            <summary>
            Represents the SpawnDoor packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="T:OpenEQ.Netcode.SpawnPositionUpdate">
            <summary>
            Represents the SpawnPositionUpdate packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.SpawnPositionUpdate.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the SpawnPositionUpdate struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SpawnPositionUpdate.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the SpawnPositionUpdate struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SpawnPositionUpdate.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SpawnPositionUpdate.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SpawnPositionUpdate.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.SpawnPositionUpdate.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SpawnPositionUpdate.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.SpecialMesg">
            <summary>
            Represents the SpecialMesg packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.SpecialMesg.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the SpecialMesg struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SpecialMesg.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the SpecialMesg struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SpecialMesg.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SpecialMesg.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SpecialMesg.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.SpecialMesg.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SpecialMesg.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.SpellEffect">
            <summary>
            Represents the SpellEffect packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SpellEffect.Effectid">
            <summary>
            Gets or sets the effectid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SpellEffect.Entityid">
            <summary>
            Gets or sets the entityid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SpellEffect.Entityid2">
            <summary>
            Gets or sets the entityid2 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SpellEffect.Duration">
            <summary>
            Gets or sets the duration value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SpellEffect.Finishdelay">
            <summary>
            Gets or sets the finishdelay value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SpellEffect.Unknown020">
            <summary>
            Gets or sets the unknown020 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SpellEffect.Unknown024">
            <summary>
            Gets or sets the unknown024 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SpellEffect.Unknown025">
            <summary>
            Gets or sets the unknown025 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SpellEffect.Unknown026">
            <summary>
            Gets or sets the unknown026 value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.SpellEffect.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Byte,System.Byte,System.UInt16)">
            <summary>
            Initializes a new instance of the SpellEffect struct with specified field values.
            </summary>
            <param name="EffectID">The effectid value.</param>
            <param name="EntityID">The entityid value.</param>
            <param name="EntityID2">The entityid2 value.</param>
            <param name="Duration">The duration value.</param>
            <param name="FinishDelay">The finishdelay value.</param>
            <param name="Unknown020">The unknown020 value.</param>
            <param name="Unknown024">The unknown024 value.</param>
            <param name="Unknown025">The unknown025 value.</param>
            <param name="Unknown026">The unknown026 value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SpellEffect.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the SpellEffect struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SpellEffect.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the SpellEffect struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SpellEffect.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SpellEffect.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SpellEffect.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.SpellEffect.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SpellEffect.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.Split">
            <summary>
            Represents the Split packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Split.Platinum">
            <summary>
            Gets or sets the platinum value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Split.Gold">
            <summary>
            Gets or sets the gold value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Split.Silver">
            <summary>
            Gets or sets the silver value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Split.Copper">
            <summary>
            Gets or sets the copper value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.Split.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the Split struct with specified field values.
            </summary>
            <param name="platinum">The platinum value.</param>
            <param name="gold">The gold value.</param>
            <param name="silver">The silver value.</param>
            <param name="copper">The copper value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Split.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the Split struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Split.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the Split struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Split.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Split.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Split.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.Split.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Split.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.Stamina">
            <summary>
            Represents the Stamina packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Stamina.Food">
            <summary>
            Gets or sets the food value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Stamina.Water">
            <summary>
            Gets or sets the water value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.Stamina.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the Stamina struct with specified field values.
            </summary>
            <param name="food">The food value.</param>
            <param name="water">The water value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Stamina.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the Stamina struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Stamina.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the Stamina struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Stamina.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Stamina.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Stamina.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.Stamina.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Stamina.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.Stun">
            <summary>
            Represents the Stun packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Stun.Duration">
            <summary>
            Gets or sets the duration value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Stun.Unknown004">
            <summary>
            Gets or sets the unknown004 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Stun.Unknown005">
            <summary>
            Gets or sets the unknown005 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Stun.Unknown006">
            <summary>
            Gets or sets the unknown006 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Stun.Unknown007">
            <summary>
            Gets or sets the unknown007 value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.Stun.#ctor(System.UInt32,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the Stun struct with specified field values.
            </summary>
            <param name="duration">The duration value.</param>
            <param name="unknown004">The unknown004 value.</param>
            <param name="unknown005">The unknown005 value.</param>
            <param name="unknown006">The unknown006 value.</param>
            <param name="unknown007">The unknown007 value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Stun.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the Stun struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Stun.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the Stun struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Stun.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Stun.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Stun.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.Stun.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Stun.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.Surname">
            <summary>
            Represents the Surname packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.Surname.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the Surname struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Surname.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the Surname struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Surname.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Surname.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Surname.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.Surname.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Surname.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.SwapSpell">
            <summary>
            Represents the SwapSpell packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SwapSpell.Name">
            <summary>
            Gets or sets the name value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.SwapSpell.Lastname">
            <summary>
            Gets or sets the lastname value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.SwapSpell.#ctor(System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the SwapSpell struct with specified field values.
            </summary>
            <param name="name">The name value.</param>
            <param name="lastname">The lastname value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SwapSpell.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the SwapSpell struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SwapSpell.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the SwapSpell struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SwapSpell.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SwapSpell.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SwapSpell.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.SwapSpell.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.SwapSpell.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.TargetBuffs">
            <summary>
            Represents the TargetBuffs packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.TargetBuffs.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the TargetBuffs struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TargetBuffs.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the TargetBuffs struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TargetBuffs.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TargetBuffs.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TargetBuffs.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.TargetBuffs.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TargetBuffs.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.TargetCommand">
            <summary>
            Represents the TargetCommand packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TargetCommand.NewTarget">
            <summary>
            Gets or sets the newtarget value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.TargetCommand.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the TargetCommand struct with specified field values.
            </summary>
            <param name="new_target">The newtarget value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TargetCommand.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the TargetCommand struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TargetCommand.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the TargetCommand struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TargetCommand.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TargetCommand.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TargetCommand.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.TargetCommand.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TargetCommand.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.TargetHoTT">
            <summary>
            Represents the TargetHoTT packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TargetHoTT.NewTarget">
            <summary>
            Gets or sets the newtarget value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.TargetHoTT.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the TargetHoTT struct with specified field values.
            </summary>
            <param name="new_target">The newtarget value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TargetHoTT.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the TargetHoTT struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TargetHoTT.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the TargetHoTT struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TargetHoTT.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TargetHoTT.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TargetHoTT.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.TargetHoTT.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TargetHoTT.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.TargetMouse">
            <summary>
            Represents the TargetMouse packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TargetMouse.NewTarget">
            <summary>
            Gets or sets the newtarget value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.TargetMouse.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the TargetMouse struct with specified field values.
            </summary>
            <param name="new_target">The newtarget value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TargetMouse.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the TargetMouse struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TargetMouse.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the TargetMouse struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TargetMouse.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TargetMouse.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TargetMouse.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.TargetMouse.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TargetMouse.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.TaskActivity">
            <summary>
            Represents the TaskActivity packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TaskActivity.Taskindex">
            <summary>
            Gets or sets the taskindex value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TaskActivity.Unknown2">
            <summary>
            Gets or sets the unknown2 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TaskActivity.Unknown3">
            <summary>
            Gets or sets the unknown3 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TaskActivity.Activityid">
            <summary>
            Gets or sets the activityid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TaskActivity.Unknown4">
            <summary>
            Gets or sets the unknown4 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TaskActivity.Unknown5">
            <summary>
            Gets or sets the unknown5 value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.TaskActivity.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the TaskActivity struct with specified field values.
            </summary>
            <param name="TaskIndex">The taskindex value.</param>
            <param name="unknown2">The unknown2 value.</param>
            <param name="unknown3">The unknown3 value.</param>
            <param name="ActivityID">The activityid value.</param>
            <param name="unknown4">The unknown4 value.</param>
            <param name="unknown5">The unknown5 value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TaskActivity.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the TaskActivity struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TaskActivity.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the TaskActivity struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TaskActivity.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TaskActivity.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TaskActivity.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.TaskActivity.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TaskActivity.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.TaskActivityComplete">
            <summary>
            Represents the TaskActivityComplete packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TaskActivityComplete.Taskindex">
            <summary>
            Gets or sets the taskindex value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TaskActivityComplete.Unknown2">
            <summary>
            Gets or sets the unknown2 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TaskActivityComplete.Unknown3">
            <summary>
            Gets or sets the unknown3 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TaskActivityComplete.Activityid">
            <summary>
            Gets or sets the activityid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TaskActivityComplete.Unknown4">
            <summary>
            Gets or sets the unknown4 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TaskActivityComplete.Unknown5">
            <summary>
            Gets or sets the unknown5 value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.TaskActivityComplete.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the TaskActivityComplete struct with specified field values.
            </summary>
            <param name="TaskIndex">The taskindex value.</param>
            <param name="unknown2">The unknown2 value.</param>
            <param name="unknown3">The unknown3 value.</param>
            <param name="ActivityID">The activityid value.</param>
            <param name="unknown4">The unknown4 value.</param>
            <param name="unknown5">The unknown5 value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TaskActivityComplete.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the TaskActivityComplete struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TaskActivityComplete.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the TaskActivityComplete struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TaskActivityComplete.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TaskActivityComplete.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TaskActivityComplete.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.TaskActivityComplete.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TaskActivityComplete.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.TaskDescription">
            <summary>
            Represents the TaskDescription packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TaskDescription.Sequencenumber">
            <summary>
            Gets or sets the sequencenumber value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TaskDescription.Taskid">
            <summary>
            Gets or sets the taskid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TaskDescription.Unknown2">
            <summary>
            Gets or sets the unknown2 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TaskDescription.Unknown3">
            <summary>
            Gets or sets the unknown3 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TaskDescription.Unknown4">
            <summary>
            Gets or sets the unknown4 value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.TaskDescription.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Byte)">
            <summary>
            Initializes a new instance of the TaskDescription struct with specified field values.
            </summary>
            <param name="SequenceNumber">The sequencenumber value.</param>
            <param name="TaskID">The taskid value.</param>
            <param name="unknown2">The unknown2 value.</param>
            <param name="unknown3">The unknown3 value.</param>
            <param name="unknown4">The unknown4 value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TaskDescription.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the TaskDescription struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TaskDescription.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the TaskDescription struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TaskDescription.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TaskDescription.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TaskDescription.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.TaskDescription.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TaskDescription.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.TaskHistoryReply">
            <summary>
            Represents the TaskHistoryReply packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TaskHistoryReply.Taskid">
            <summary>
            Gets or sets the taskid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TaskHistoryReply.Activitycount">
            <summary>
            Gets or sets the activitycount value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.TaskHistoryReply.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the TaskHistoryReply struct with specified field values.
            </summary>
            <param name="TaskID">The taskid value.</param>
            <param name="ActivityCount">The activitycount value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TaskHistoryReply.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the TaskHistoryReply struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TaskHistoryReply.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the TaskHistoryReply struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TaskHistoryReply.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TaskHistoryReply.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TaskHistoryReply.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.TaskHistoryReply.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TaskHistoryReply.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.TaskHistoryRequest">
            <summary>
            Represents the TaskHistoryRequest packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TaskHistoryRequest.Taskindex">
            <summary>
            Gets or sets the taskindex value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.TaskHistoryRequest.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the TaskHistoryRequest struct with specified field values.
            </summary>
            <param name="TaskIndex">The taskindex value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TaskHistoryRequest.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the TaskHistoryRequest struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TaskHistoryRequest.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the TaskHistoryRequest struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TaskHistoryRequest.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TaskHistoryRequest.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TaskHistoryRequest.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.TaskHistoryRequest.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TaskHistoryRequest.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.Taunt">
            <summary>
            Represents the Taunt packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Taunt.Taskindex">
            <summary>
            Gets or sets the taskindex value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.Taunt.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the Taunt struct with specified field values.
            </summary>
            <param name="TaskIndex">The taskindex value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Taunt.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the Taunt struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Taunt.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the Taunt struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Taunt.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Taunt.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Taunt.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.Taunt.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Taunt.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.TestBuff">
            <summary>
            Represents the TestBuff packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.TestBuff.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the TestBuff struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TestBuff.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the TestBuff struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TestBuff.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TestBuff.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TestBuff.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.TestBuff.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TestBuff.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.TGB">
            <summary>
            Represents the TGB packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TGB.Filters">
            <summary>
            Gets or sets the filters value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.TGB.#ctor(System.UInt32[])">
            <summary>
            Initializes a new instance of the TGB struct with specified field values.
            </summary>
            <param name="filters">The filters value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TGB.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the TGB struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TGB.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the TGB struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TGB.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TGB.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TGB.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.TGB.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TGB.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.TimeOfDay">
            <summary>
            Represents the TimeOfDay packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TimeOfDay.Hour">
            <summary>
            Gets or sets the hour value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TimeOfDay.Minute">
            <summary>
            Gets or sets the minute value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TimeOfDay.Day">
            <summary>
            Gets or sets the day value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TimeOfDay.Month">
            <summary>
            Gets or sets the month value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TimeOfDay.Year">
            <summary>
            Gets or sets the year value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.TimeOfDay.#ctor(System.Byte,System.Byte,System.Byte,System.Byte,System.UInt16)">
            <summary>
            Initializes a new instance of the TimeOfDay struct with specified field values.
            </summary>
            <param name="hour">The hour value.</param>
            <param name="minute">The minute value.</param>
            <param name="day">The day value.</param>
            <param name="month">The month value.</param>
            <param name="year">The year value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TimeOfDay.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the TimeOfDay struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TimeOfDay.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the TimeOfDay struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TimeOfDay.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TimeOfDay.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TimeOfDay.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.TimeOfDay.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TimeOfDay.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.Track">
            <summary>
            Represents the Track packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.Track.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.TrackTarget">
            <summary>
            Represents the TrackTarget packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TrackTarget.Entityid">
            <summary>
            Gets or sets the entityid value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.TrackTarget.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the TrackTarget struct with specified field values.
            </summary>
            <param name="EntityID">The entityid value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TrackTarget.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the TrackTarget struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TrackTarget.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the TrackTarget struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TrackTarget.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TrackTarget.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TrackTarget.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.TrackTarget.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TrackTarget.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.TrackUnknown">
            <summary>
            Represents the TrackUnknown packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TrackUnknown.Entityid">
            <summary>
            Gets or sets the entityid value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.TrackUnknown.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the TrackUnknown struct with specified field values.
            </summary>
            <param name="EntityID">The entityid value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TrackUnknown.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the TrackUnknown struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TrackUnknown.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the TrackUnknown struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TrackUnknown.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TrackUnknown.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TrackUnknown.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.TrackUnknown.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TrackUnknown.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.TradeAcceptClick">
            <summary>
            Represents the TradeAcceptClick packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.TradeAcceptClick.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the TradeAcceptClick struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TradeAcceptClick.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the TradeAcceptClick struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TradeAcceptClick.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TradeAcceptClick.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TradeAcceptClick.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.TradeAcceptClick.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TradeAcceptClick.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.TradeBusy">
            <summary>
            Represents the TradeBusy packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TradeBusy.ToMobId">
            <summary>
            Gets or sets the tomobid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TradeBusy.FromMobId">
            <summary>
            Gets or sets the frommobid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TradeBusy.Type">
            <summary>
            Gets or sets the type value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TradeBusy.Unknown09">
            <summary>
            Gets or sets the unknown09 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TradeBusy.Unknown10">
            <summary>
            Gets or sets the unknown10 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TradeBusy.Unknown11">
            <summary>
            Gets or sets the unknown11 value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.TradeBusy.#ctor(System.UInt32,System.UInt32,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the TradeBusy struct with specified field values.
            </summary>
            <param name="to_mob_id">The tomobid value.</param>
            <param name="from_mob_id">The frommobid value.</param>
            <param name="type">The type value.</param>
            <param name="unknown09">The unknown09 value.</param>
            <param name="unknown10">The unknown10 value.</param>
            <param name="unknown11">The unknown11 value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TradeBusy.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the TradeBusy struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TradeBusy.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the TradeBusy struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TradeBusy.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TradeBusy.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TradeBusy.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.TradeBusy.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TradeBusy.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.TradeCoins">
            <summary>
            Represents the TradeCoins packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TradeCoins.Trader">
            <summary>
            Gets or sets the trader value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TradeCoins.Slot">
            <summary>
            Gets or sets the slot value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TradeCoins.Unknown5">
            <summary>
            Gets or sets the unknown5 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TradeCoins.Unknown7">
            <summary>
            Gets or sets the unknown7 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TradeCoins.Amount">
            <summary>
            Gets or sets the amount value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.TradeCoins.#ctor(System.UInt32,System.Byte,System.UInt16,System.Byte,System.UInt32)">
            <summary>
            Initializes a new instance of the TradeCoins struct with specified field values.
            </summary>
            <param name="trader">The trader value.</param>
            <param name="slot">The slot value.</param>
            <param name="unknown5">The unknown5 value.</param>
            <param name="unknown7">The unknown7 value.</param>
            <param name="amount">The amount value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TradeCoins.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the TradeCoins struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TradeCoins.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the TradeCoins struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TradeCoins.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TradeCoins.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TradeCoins.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.TradeCoins.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TradeCoins.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.TradeMoneyUpdate">
            <summary>
            Represents the TradeMoneyUpdate packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.TradeMoneyUpdate.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the TradeMoneyUpdate struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TradeMoneyUpdate.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the TradeMoneyUpdate struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TradeMoneyUpdate.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TradeMoneyUpdate.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TradeMoneyUpdate.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.TradeMoneyUpdate.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TradeMoneyUpdate.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.Trader">
            <summary>
            Represents the Trader packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.Trader.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the Trader struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Trader.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the Trader struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Trader.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Trader.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Trader.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.Trader.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Trader.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.TraderBuy">
            <summary>
            Represents the TraderBuy packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TraderBuy.Action">
            <summary>
            Gets or sets the action value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TraderBuy.Price">
            <summary>
            Gets or sets the price value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TraderBuy.TraderId">
            <summary>
            Gets or sets the traderid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TraderBuy.ItemName">
            <summary>
            Gets or sets the itemname value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TraderBuy.ItemId">
            <summary>
            Gets or sets the itemid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TraderBuy.AlreadySold">
            <summary>
            Gets or sets the alreadysold value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TraderBuy.Quantity">
            <summary>
            Gets or sets the quantity value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.TraderBuy.#ctor(System.UInt32,System.UInt32,System.UInt32,System.Byte[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the TraderBuy struct with specified field values.
            </summary>
            <param name="action">The action value.</param>
            <param name="price">The price value.</param>
            <param name="trader_id">The traderid value.</param>
            <param name="item_name">The itemname value.</param>
            <param name="item_id">The itemid value.</param>
            <param name="already_sold">The alreadysold value.</param>
            <param name="quantity">The quantity value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TraderBuy.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the TraderBuy struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TraderBuy.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the TraderBuy struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TraderBuy.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TraderBuy.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TraderBuy.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.TraderBuy.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TraderBuy.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.TraderDelItem">
            <summary>
            Represents the TraderDelItem packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TraderDelItem.Slotid">
            <summary>
            Gets or sets the slotid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TraderDelItem.Quantity">
            <summary>
            Gets or sets the quantity value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TraderDelItem.Unknown">
            <summary>
            Gets or sets the unknown value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.TraderDelItem.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the TraderDelItem struct with specified field values.
            </summary>
            <param name="slotid">The slotid value.</param>
            <param name="quantity">The quantity value.</param>
            <param name="unknown">The unknown value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TraderDelItem.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the TraderDelItem struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TraderDelItem.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the TraderDelItem struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TraderDelItem.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TraderDelItem.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TraderDelItem.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.TraderDelItem.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TraderDelItem.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.TradeRequest">
            <summary>
            Represents the TradeRequest packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TradeRequest.ToMobId">
            <summary>
            Gets or sets the tomobid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TradeRequest.FromMobId">
            <summary>
            Gets or sets the frommobid value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.TradeRequest.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the TradeRequest struct with specified field values.
            </summary>
            <param name="to_mob_id">The tomobid value.</param>
            <param name="from_mob_id">The frommobid value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TradeRequest.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the TradeRequest struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TradeRequest.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the TradeRequest struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TradeRequest.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TradeRequest.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TradeRequest.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.TradeRequest.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TradeRequest.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.TradeRequestAck">
            <summary>
            Represents the TradeRequestAck packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TradeRequestAck.ToMobId">
            <summary>
            Gets or sets the tomobid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TradeRequestAck.FromMobId">
            <summary>
            Gets or sets the frommobid value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.TradeRequestAck.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the TradeRequestAck struct with specified field values.
            </summary>
            <param name="to_mob_id">The tomobid value.</param>
            <param name="from_mob_id">The frommobid value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TradeRequestAck.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the TradeRequestAck struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TradeRequestAck.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the TradeRequestAck struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TradeRequestAck.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TradeRequestAck.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TradeRequestAck.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.TradeRequestAck.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TradeRequestAck.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.TraderShop">
            <summary>
            Represents the TraderShop packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.TraderShop.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the TraderShop struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TraderShop.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the TraderShop struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TraderShop.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TraderShop.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TraderShop.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.TraderShop.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TraderShop.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.TradeSkillCombine">
            <summary>
            Represents the TradeSkillCombine packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TradeSkillCombine.ContainerSlot">
            <summary>
            Gets or sets the containerslot value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TradeSkillCombine.GuildtributeSlot">
            <summary>
            Gets or sets the guildtributeslot value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.TradeSkillCombine.#ctor(System.Int16,System.Int16)">
            <summary>
            Initializes a new instance of the TradeSkillCombine struct with specified field values.
            </summary>
            <param name="container_slot">The containerslot value.</param>
            <param name="guildtribute_slot">The guildtributeslot value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TradeSkillCombine.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the TradeSkillCombine struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TradeSkillCombine.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the TradeSkillCombine struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TradeSkillCombine.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TradeSkillCombine.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TradeSkillCombine.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.TradeSkillCombine.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TradeSkillCombine.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.Translocate">
            <summary>
            Represents the Translocate packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Translocate.Zoneid">
            <summary>
            Gets or sets the zoneid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Translocate.Spellid">
            <summary>
            Gets or sets the spellid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Translocate.Unknown008">
            <summary>
            Gets or sets the unknown008 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Translocate.Caster">
            <summary>
            Gets or sets the caster value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Translocate.Y">
            <summary>
            Gets or sets the y value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Translocate.X">
            <summary>
            Gets or sets the x value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Translocate.Z">
            <summary>
            Gets or sets the z value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Translocate.Complete">
            <summary>
            Gets or sets the complete value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.Translocate.#ctor(System.UInt32,System.UInt32,System.UInt32,System.Byte[],System.Single,System.Single,System.Single,System.UInt32)">
            <summary>
            Initializes a new instance of the Translocate struct with specified field values.
            </summary>
            <param name="ZoneID">The zoneid value.</param>
            <param name="SpellID">The spellid value.</param>
            <param name="unknown008">The unknown008 value.</param>
            <param name="Caster">The caster value.</param>
            <param name="y">The y value.</param>
            <param name="x">The x value.</param>
            <param name="z">The z value.</param>
            <param name="Complete">The complete value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Translocate.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the Translocate struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Translocate.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the Translocate struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Translocate.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Translocate.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Translocate.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.Translocate.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Translocate.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.TributeInfo">
            <summary>
            Represents the TributeInfo packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TributeInfo.TributeId">
            <summary>
            Gets or sets the tributeid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TributeInfo.TierCount">
            <summary>
            Gets or sets the tiercount value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TributeInfo.Tiers">
            <summary>
            Gets or sets the tiers value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TributeInfo.Name">
            <summary>
            Gets or sets the name value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.TributeInfo.#ctor(System.UInt32,System.UInt32,System.UInt32,System.Byte)">
            <summary>
            Initializes a new instance of the TributeInfo struct with specified field values.
            </summary>
            <param name="tribute_id">The tributeid value.</param>
            <param name="tier_count">The tiercount value.</param>
            <param name="tiers">The tiers value.</param>
            <param name="name">The name value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TributeInfo.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the TributeInfo struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TributeInfo.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the TributeInfo struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TributeInfo.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TributeInfo.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TributeInfo.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.TributeInfo.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TributeInfo.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.TributeItem">
            <summary>
            Represents the TributeItem packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TributeItem.Slot">
            <summary>
            Gets or sets the slot value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TributeItem.Quantity">
            <summary>
            Gets or sets the quantity value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TributeItem.TributeMasterId">
            <summary>
            Gets or sets the tributemasterid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TributeItem.TributePoints">
            <summary>
            Gets or sets the tributepoints value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.TributeItem.#ctor(System.UInt32,System.UInt32,System.UInt32,System.Int32)">
            <summary>
            Initializes a new instance of the TributeItem struct with specified field values.
            </summary>
            <param name="slot">The slot value.</param>
            <param name="quantity">The quantity value.</param>
            <param name="tribute_master_id">The tributemasterid value.</param>
            <param name="tribute_points">The tributepoints value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TributeItem.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the TributeItem struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TributeItem.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the TributeItem struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TributeItem.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TributeItem.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TributeItem.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.TributeItem.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TributeItem.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.TributeMoney">
            <summary>
            Represents the TributeMoney packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TributeMoney.Platinum">
            <summary>
            Gets or sets the platinum value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TributeMoney.TributeMasterId">
            <summary>
            Gets or sets the tributemasterid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TributeMoney.TributePoints">
            <summary>
            Gets or sets the tributepoints value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.TributeMoney.#ctor(System.UInt32,System.UInt32,System.Int32)">
            <summary>
            Initializes a new instance of the TributeMoney struct with specified field values.
            </summary>
            <param name="platinum">The platinum value.</param>
            <param name="tribute_master_id">The tributemasterid value.</param>
            <param name="tribute_points">The tributepoints value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TributeMoney.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the TributeMoney struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TributeMoney.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the TributeMoney struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TributeMoney.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TributeMoney.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TributeMoney.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.TributeMoney.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TributeMoney.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.TributePointUpdate">
            <summary>
            Represents the TributePointUpdate packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TributePointUpdate.TributePoints">
            <summary>
            Gets or sets the tributepoints value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TributePointUpdate.Unknown04">
            <summary>
            Gets or sets the unknown04 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TributePointUpdate.CareerTributePoints">
            <summary>
            Gets or sets the careertributepoints value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TributePointUpdate.Unknown12">
            <summary>
            Gets or sets the unknown12 value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.TributePointUpdate.#ctor(System.Int32,System.UInt32,System.Int32,System.UInt32)">
            <summary>
            Initializes a new instance of the TributePointUpdate struct with specified field values.
            </summary>
            <param name="tribute_points">The tributepoints value.</param>
            <param name="unknown04">The unknown04 value.</param>
            <param name="career_tribute_points">The careertributepoints value.</param>
            <param name="unknown12">The unknown12 value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TributePointUpdate.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the TributePointUpdate struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TributePointUpdate.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the TributePointUpdate struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TributePointUpdate.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TributePointUpdate.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TributePointUpdate.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.TributePointUpdate.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TributePointUpdate.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.TributeTimer">
            <summary>
            Represents the TributeTimer packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.TributeTimer.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the TributeTimer struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TributeTimer.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the TributeTimer struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TributeTimer.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TributeTimer.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TributeTimer.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.TributeTimer.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TributeTimer.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.TributeToggle">
            <summary>
            Represents the TributeToggle packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.TributeToggle.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the TributeToggle struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TributeToggle.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the TributeToggle struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TributeToggle.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TributeToggle.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TributeToggle.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.TributeToggle.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TributeToggle.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.TributeUpdate">
            <summary>
            Represents the TributeUpdate packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TributeUpdate.Active">
            <summary>
            Gets or sets the active value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TributeUpdate.Tributes">
            <summary>
            Gets or sets the tributes value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TributeUpdate.Tiers">
            <summary>
            Gets or sets the tiers value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.TributeUpdate.TributeMasterId">
            <summary>
            Gets or sets the tributemasterid value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.TributeUpdate.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the TributeUpdate struct with specified field values.
            </summary>
            <param name="active">The active value.</param>
            <param name="tributes">The tributes value.</param>
            <param name="tiers">The tiers value.</param>
            <param name="tribute_master_id">The tributemasterid value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TributeUpdate.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the TributeUpdate struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TributeUpdate.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the TributeUpdate struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TributeUpdate.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TributeUpdate.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TributeUpdate.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.TributeUpdate.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.TributeUpdate.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.Untargetable">
            <summary>
            Represents the Untargetable packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Untargetable.Id">
            <summary>
            Gets or sets the id value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Untargetable.TargetableFlag">
            <summary>
            Gets or sets the targetableflag value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.Untargetable.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the Untargetable struct with specified field values.
            </summary>
            <param name="id">The id value.</param>
            <param name="targetable_flag">The targetableflag value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Untargetable.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the Untargetable struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Untargetable.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the Untargetable struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Untargetable.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Untargetable.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Untargetable.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.Untargetable.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Untargetable.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.UpdateAA">
            <summary>
            Represents the UpdateAA packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.UpdateAA.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the UpdateAA struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.UpdateAA.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the UpdateAA struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.UpdateAA.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.UpdateAA.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.UpdateAA.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.UpdateAA.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.UpdateAA.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.UpdateAura">
            <summary>
            Represents the UpdateAura packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.UpdateAura.Action">
            <summary>
            Gets or sets the action value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.UpdateAura.Type">
            <summary>
            Gets or sets the type value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.UpdateAura.AuraName">
            <summary>
            Gets or sets the auraname value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.UpdateAura.EntityId">
            <summary>
            Gets or sets the entityid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.UpdateAura.Icon">
            <summary>
            Gets or sets the icon value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.UpdateAura.#ctor(System.UInt32,System.UInt32,System.Byte[],System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the UpdateAura struct with specified field values.
            </summary>
            <param name="action">The action value.</param>
            <param name="type">The type value.</param>
            <param name="aura_name">The auraname value.</param>
            <param name="entity_id">The entityid value.</param>
            <param name="icon">The icon value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.UpdateAura.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the UpdateAura struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.UpdateAura.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the UpdateAura struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.UpdateAura.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.UpdateAura.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.UpdateAura.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.UpdateAura.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.UpdateAura.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.UpdateLeadershipAA">
            <summary>
            Represents the UpdateLeadershipAA packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.UpdateLeadershipAA.AbilityId">
            <summary>
            Gets or sets the abilityid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.UpdateLeadershipAA.NewRank">
            <summary>
            Gets or sets the newrank value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.UpdateLeadershipAA.Unknown08">
            <summary>
            Gets or sets the unknown08 value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.UpdateLeadershipAA.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the UpdateLeadershipAA struct with specified field values.
            </summary>
            <param name="ability_id">The abilityid value.</param>
            <param name="new_rank">The newrank value.</param>
            <param name="unknown08">The unknown08 value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.UpdateLeadershipAA.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the UpdateLeadershipAA struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.UpdateLeadershipAA.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the UpdateLeadershipAA struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.UpdateLeadershipAA.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.UpdateLeadershipAA.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.UpdateLeadershipAA.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.UpdateLeadershipAA.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.UpdateLeadershipAA.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.VetClaimReply">
            <summary>
            Represents the VetClaimReply packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.VetClaimReply.Name">
            <summary>
            Gets or sets the name value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.VetClaimReply.ClaimId">
            <summary>
            Gets or sets the claimid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.VetClaimReply.Unknown068">
            <summary>
            Gets or sets the unknown068 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.VetClaimReply.Action">
            <summary>
            Gets or sets the action value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.VetClaimReply.#ctor(System.Byte[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the VetClaimReply struct with specified field values.
            </summary>
            <param name="name">The name value.</param>
            <param name="claim_id">The claimid value.</param>
            <param name="unknown068">The unknown068 value.</param>
            <param name="action">The action value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.VetClaimReply.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the VetClaimReply struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.VetClaimReply.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the VetClaimReply struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.VetClaimReply.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.VetClaimReply.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.VetClaimReply.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.VetClaimReply.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.VetClaimReply.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.VetClaimRequest">
            <summary>
            Represents the VetClaimRequest packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.VetClaimRequest.Active">
            <summary>
            Gets or sets the active value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.VetClaimRequest.Tributes">
            <summary>
            Gets or sets the tributes value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.VetClaimRequest.Tiers">
            <summary>
            Gets or sets the tiers value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.VetClaimRequest.TributeMasterId">
            <summary>
            Gets or sets the tributemasterid value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.VetClaimRequest.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the VetClaimRequest struct with specified field values.
            </summary>
            <param name="active">The active value.</param>
            <param name="tributes">The tributes value.</param>
            <param name="tiers">The tiers value.</param>
            <param name="tribute_master_id">The tributemasterid value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.VetClaimRequest.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the VetClaimRequest struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.VetClaimRequest.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the VetClaimRequest struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.VetClaimRequest.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.VetClaimRequest.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.VetClaimRequest.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.VetClaimRequest.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.VetClaimRequest.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.VetRewardsAvaliable">
            <summary>
            Represents the VetRewardsAvaliable packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.VetRewardsAvaliable.ClaimId">
            <summary>
            Gets or sets the claimid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.VetRewardsAvaliable.NumberAvailable">
            <summary>
            Gets or sets the numberavailable value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.VetRewardsAvaliable.ClaimCount">
            <summary>
            Gets or sets the claimcount value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.VetRewardsAvaliable.Items">
            <summary>
            Gets or sets the items value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.VetRewardsAvaliable.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32[])">
            <summary>
            Initializes a new instance of the VetRewardsAvaliable struct with specified field values.
            </summary>
            <param name="claim_id">The claimid value.</param>
            <param name="number_available">The numberavailable value.</param>
            <param name="claim_count">The claimcount value.</param>
            <param name="items">The items value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.VetRewardsAvaliable.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the VetRewardsAvaliable struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.VetRewardsAvaliable.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the VetRewardsAvaliable struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.VetRewardsAvaliable.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.VetRewardsAvaliable.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.VetRewardsAvaliable.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.VetRewardsAvaliable.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.VetRewardsAvaliable.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.VoiceMacroIn">
            <summary>
            Represents the VoiceMacroIn packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.VoiceMacroIn.Unknown000">
            <summary>
            Gets or sets the unknown000 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.VoiceMacroIn.Type">
            <summary>
            Gets or sets the type value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.VoiceMacroIn.Target">
            <summary>
            Gets or sets the target value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.VoiceMacroIn.Unknown132">
            <summary>
            Gets or sets the unknown132 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.VoiceMacroIn.Macronumber">
            <summary>
            Gets or sets the macronumber value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.VoiceMacroIn.#ctor(System.Byte[],System.UInt32,System.Byte[],System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the VoiceMacroIn struct with specified field values.
            </summary>
            <param name="Unknown000">The unknown000 value.</param>
            <param name="Type">The type value.</param>
            <param name="Target">The target value.</param>
            <param name="Unknown132">The unknown132 value.</param>
            <param name="MacroNumber">The macronumber value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.VoiceMacroIn.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the VoiceMacroIn struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.VoiceMacroIn.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the VoiceMacroIn struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.VoiceMacroIn.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.VoiceMacroIn.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.VoiceMacroIn.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.VoiceMacroIn.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.VoiceMacroIn.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.VoiceMacroOut">
            <summary>
            Represents the VoiceMacroOut packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.VoiceMacroOut.From">
            <summary>
            Gets or sets the from value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.VoiceMacroOut.Type">
            <summary>
            Gets or sets the type value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.VoiceMacroOut.Unknown068">
            <summary>
            Gets or sets the unknown068 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.VoiceMacroOut.Voice">
            <summary>
            Gets or sets the voice value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.VoiceMacroOut.Macronumber">
            <summary>
            Gets or sets the macronumber value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.VoiceMacroOut.Unknown080">
            <summary>
            Gets or sets the unknown080 value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.VoiceMacroOut.#ctor(System.Byte[],System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Byte[])">
            <summary>
            Initializes a new instance of the VoiceMacroOut struct with specified field values.
            </summary>
            <param name="From">The from value.</param>
            <param name="Type">The type value.</param>
            <param name="Unknown068">The unknown068 value.</param>
            <param name="Voice">The voice value.</param>
            <param name="MacroNumber">The macronumber value.</param>
            <param name="Unknown080">The unknown080 value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.VoiceMacroOut.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the VoiceMacroOut struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.VoiceMacroOut.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the VoiceMacroOut struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.VoiceMacroOut.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.VoiceMacroOut.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.VoiceMacroOut.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.VoiceMacroOut.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.VoiceMacroOut.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.WeaponEquip1">
            <summary>
            Represents the WeaponEquip1 packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.WeaponEquip1.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the WeaponEquip1 struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.WeaponEquip1.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the WeaponEquip1 struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.WeaponEquip1.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.WeaponEquip1.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.WeaponEquip1.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.WeaponEquip1.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.WeaponEquip1.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.WearChange">
            <summary>
            Represents the WearChange packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.WearChange.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.Weather">
            <summary>
            Represents the Weather packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Weather.Val1">
            <summary>
            Gets or sets the val1 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Weather.Type">
            <summary>
            Gets or sets the type value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Weather.Mode">
            <summary>
            Gets or sets the mode value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.Weather.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the Weather struct with specified field values.
            </summary>
            <param name="val1">The val1 value.</param>
            <param name="type">The type value.</param>
            <param name="mode">The mode value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Weather.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the Weather struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Weather.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the Weather struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Weather.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Weather.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Weather.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.Weather.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Weather.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.Weblink">
            <summary>
            Represents the Weblink packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.Weblink.WeblinkValue">
            <summary>
            Gets or sets the weblinkvalue value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.Weblink.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the Weblink struct with specified field values.
            </summary>
            <param name="weblink">The weblinkvalue value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Weblink.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the Weblink struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Weblink.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the Weblink struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Weblink.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Weblink.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Weblink.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.Weblink.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Weblink.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.WhoAllRequest">
            <summary>
            Represents the WhoAllRequest packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.WhoAllRequest.Whom">
            <summary>
            Gets or sets the whom value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.WhoAllRequest.Wrace">
            <summary>
            Gets or sets the wrace value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.WhoAllRequest.Wclass">
            <summary>
            Gets or sets the wclass value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.WhoAllRequest.Lvllow">
            <summary>
            Gets or sets the lvllow value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.WhoAllRequest.Lvlhigh">
            <summary>
            Gets or sets the lvlhigh value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.WhoAllRequest.Gmlookup">
            <summary>
            Gets or sets the gmlookup value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.WhoAllRequest.Guildid">
            <summary>
            Gets or sets the guildid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.WhoAllRequest.Unknown088">
            <summary>
            Gets or sets the unknown088 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.WhoAllRequest.Type">
            <summary>
            Gets or sets the type value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.WhoAllRequest.#ctor(System.Byte[],System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Byte[],System.UInt32)">
            <summary>
            Initializes a new instance of the WhoAllRequest struct with specified field values.
            </summary>
            <param name="whom">The whom value.</param>
            <param name="wrace">The wrace value.</param>
            <param name="wclass">The wclass value.</param>
            <param name="lvllow">The lvllow value.</param>
            <param name="lvlhigh">The lvlhigh value.</param>
            <param name="gmlookup">The gmlookup value.</param>
            <param name="guildid">The guildid value.</param>
            <param name="unknown088">The unknown088 value.</param>
            <param name="type">The type value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.WhoAllRequest.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the WhoAllRequest struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.WhoAllRequest.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the WhoAllRequest struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.WhoAllRequest.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.WhoAllRequest.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.WhoAllRequest.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.WhoAllRequest.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.WhoAllRequest.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.WhoAllResponse">
            <summary>
            Represents the WhoAllResponse packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.WhoAllResponse.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the WhoAllResponse struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.WhoAllResponse.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the WhoAllResponse struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.WhoAllResponse.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.WhoAllResponse.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.WhoAllResponse.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.WhoAllResponse.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.WhoAllResponse.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.WorldObjectsSent">
            <summary>
            Represents the WorldObjectsSent packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.WorldObjectsSent.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the WorldObjectsSent struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.WorldObjectsSent.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the WorldObjectsSent struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.WorldObjectsSent.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.WorldObjectsSent.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.WorldObjectsSent.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.WorldObjectsSent.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.WorldObjectsSent.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.XTargetAutoAddHaters">
            <summary>
            Represents the XTargetAutoAddHaters packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.XTargetAutoAddHaters.Whom">
            <summary>
            Gets or sets the whom value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.XTargetAutoAddHaters.Wrace">
            <summary>
            Gets or sets the wrace value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.XTargetAutoAddHaters.Wclass">
            <summary>
            Gets or sets the wclass value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.XTargetAutoAddHaters.Lvllow">
            <summary>
            Gets or sets the lvllow value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.XTargetAutoAddHaters.Lvlhigh">
            <summary>
            Gets or sets the lvlhigh value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.XTargetAutoAddHaters.Gmlookup">
            <summary>
            Gets or sets the gmlookup value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.XTargetAutoAddHaters.Guildid">
            <summary>
            Gets or sets the guildid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.XTargetAutoAddHaters.Unknown088">
            <summary>
            Gets or sets the unknown088 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.XTargetAutoAddHaters.Type">
            <summary>
            Gets or sets the type value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.XTargetAutoAddHaters.#ctor(System.Byte[],System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Byte[],System.UInt32)">
            <summary>
            Initializes a new instance of the XTargetAutoAddHaters struct with specified field values.
            </summary>
            <param name="whom">The whom value.</param>
            <param name="wrace">The wrace value.</param>
            <param name="wclass">The wclass value.</param>
            <param name="lvllow">The lvllow value.</param>
            <param name="lvlhigh">The lvlhigh value.</param>
            <param name="gmlookup">The gmlookup value.</param>
            <param name="guildid">The guildid value.</param>
            <param name="unknown088">The unknown088 value.</param>
            <param name="type">The type value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.XTargetAutoAddHaters.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the XTargetAutoAddHaters struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.XTargetAutoAddHaters.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the XTargetAutoAddHaters struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.XTargetAutoAddHaters.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.XTargetAutoAddHaters.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.XTargetAutoAddHaters.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.XTargetAutoAddHaters.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.XTargetAutoAddHaters.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.XTargetOpen">
            <summary>
            Represents the XTargetOpen packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.XTargetOpen.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the XTargetOpen struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.XTargetOpen.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the XTargetOpen struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.XTargetOpen.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.XTargetOpen.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.XTargetOpen.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.XTargetOpen.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.XTargetOpen.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.XTargetOpenResponse">
            <summary>
            Represents the XTargetOpenResponse packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.XTargetOpenResponse.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the XTargetOpenResponse struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.XTargetOpenResponse.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the XTargetOpenResponse struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.XTargetOpenResponse.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.XTargetOpenResponse.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.XTargetOpenResponse.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.XTargetOpenResponse.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.XTargetOpenResponse.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.XTargetRequest">
            <summary>
            Represents the XTargetRequest packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.XTargetRequest.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the XTargetRequest struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.XTargetRequest.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the XTargetRequest struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.XTargetRequest.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.XTargetRequest.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.XTargetRequest.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.XTargetRequest.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.XTargetRequest.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.XTargetResponse">
            <summary>
            Represents the XTargetResponse packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="T:OpenEQ.Netcode.YellForHelp">
            <summary>
            Represents the YellForHelp packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.YellForHelp.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the YellForHelp struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.YellForHelp.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the YellForHelp struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.YellForHelp.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.YellForHelp.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.YellForHelp.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.YellForHelp.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.YellForHelp.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.ZoneChange">
            <summary>
            Represents the ZoneChange packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZoneChange.CharName">
            <summary>
            Gets or sets the charname value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZoneChange.Zoneid">
            <summary>
            Gets or sets the zoneid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZoneChange.Instanceid">
            <summary>
            Gets or sets the instanceid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZoneChange.Y">
            <summary>
            Gets or sets the y value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZoneChange.X">
            <summary>
            Gets or sets the x value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZoneChange.Z">
            <summary>
            Gets or sets the z value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZoneChange.ZoneReason">
            <summary>
            Gets or sets the zonereason value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZoneChange.Success">
            <summary>
            Gets or sets the success value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.ZoneChange.#ctor(System.Byte[],System.UInt16,System.UInt16,System.Single,System.Single,System.Single,System.UInt32,System.Int32)">
            <summary>
            Initializes a new instance of the ZoneChange struct with specified field values.
            </summary>
            <param name="char_name">The charname value.</param>
            <param name="zoneID">The zoneid value.</param>
            <param name="instanceID">The instanceid value.</param>
            <param name="y">The y value.</param>
            <param name="x">The x value.</param>
            <param name="z">The z value.</param>
            <param name="zone_reason">The zonereason value.</param>
            <param name="success">The success value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ZoneChange.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the ZoneChange struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ZoneChange.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the ZoneChange struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ZoneChange.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ZoneChange.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ZoneChange.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.ZoneChange.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ZoneChange.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.ZoneEntry">
            <summary>
            Represents the ZoneEntry packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="T:OpenEQ.Netcode.ZonePlayerToBind">
            <summary>
            Represents the ZonePlayerToBind packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZonePlayerToBind.BindZoneId">
            <summary>
            Gets or sets the bindzoneid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZonePlayerToBind.BindInstanceId">
            <summary>
            Gets or sets the bindinstanceid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZonePlayerToBind.X">
            <summary>
            Gets or sets the x value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZonePlayerToBind.Y">
            <summary>
            Gets or sets the y value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZonePlayerToBind.Z">
            <summary>
            Gets or sets the z value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZonePlayerToBind.Heading">
            <summary>
            Gets or sets the heading value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZonePlayerToBind.ZoneName">
            <summary>
            Gets or sets the zonename value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZonePlayerToBind.Unknown021">
            <summary>
            Gets or sets the unknown021 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZonePlayerToBind.Unknown022">
            <summary>
            Gets or sets the unknown022 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZonePlayerToBind.Unknown023">
            <summary>
            Gets or sets the unknown023 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZonePlayerToBind.Unknown024">
            <summary>
            Gets or sets the unknown024 value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.ZonePlayerToBind.#ctor(System.UInt16,System.UInt16,System.Single,System.Single,System.Single,System.Single,System.Byte,System.Byte,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the ZonePlayerToBind struct with specified field values.
            </summary>
            <param name="bind_zone_id">The bindzoneid value.</param>
            <param name="bind_instance_id">The bindinstanceid value.</param>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
            <param name="z">The z value.</param>
            <param name="heading">The heading value.</param>
            <param name="zone_name">The zonename value.</param>
            <param name="unknown021">The unknown021 value.</param>
            <param name="unknown022">The unknown022 value.</param>
            <param name="unknown023">The unknown023 value.</param>
            <param name="unknown024">The unknown024 value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ZonePlayerToBind.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the ZonePlayerToBind struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ZonePlayerToBind.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the ZonePlayerToBind struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ZonePlayerToBind.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ZonePlayerToBind.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ZonePlayerToBind.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.ZonePlayerToBind.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ZonePlayerToBind.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.ZoneSpawns">
            <summary>
            Represents the ZoneSpawns packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZoneSpawns.Name">
            <summary>
            Gets or sets the name value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZoneSpawns.Spawnid">
            <summary>
            Gets or sets the spawnid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZoneSpawns.Level">
            <summary>
            Gets or sets the level value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZoneSpawns.BoundingRadius">
            <summary>
            Gets or sets the boundingradius value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZoneSpawns.NPC">
            <summary>
            Gets or sets the npc value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZoneSpawns.Bitfields">
            <summary>
            Gets or sets the bitfields value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZoneSpawns.Otherdata">
            <summary>
            Gets or sets the otherdata value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZoneSpawns.Unknown3">
            <summary>
            Gets or sets the unknown3 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZoneSpawns.Unknown4">
            <summary>
            Gets or sets the unknown4 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZoneSpawns.Size">
            <summary>
            Gets or sets the size value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZoneSpawns.Face">
            <summary>
            Gets or sets the face value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZoneSpawns.Walkspeed">
            <summary>
            Gets or sets the walkspeed value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZoneSpawns.Runspeed">
            <summary>
            Gets or sets the runspeed value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZoneSpawns.Race">
            <summary>
            Gets or sets the race value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZoneSpawns.Showname">
            <summary>
            Gets or sets the showname value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZoneSpawns.Bodytype">
            <summary>
            Gets or sets the bodytype value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZoneSpawns.Curhp">
            <summary>
            Gets or sets the curhp value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZoneSpawns.Haircolor">
            <summary>
            Gets or sets the haircolor value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZoneSpawns.Beardcolor">
            <summary>
            Gets or sets the beardcolor value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZoneSpawns.Eyecolor1">
            <summary>
            Gets or sets the eyecolor1 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZoneSpawns.Eyecolor2">
            <summary>
            Gets or sets the eyecolor2 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZoneSpawns.Hairstyle">
            <summary>
            Gets or sets the hairstyle value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZoneSpawns.Beard">
            <summary>
            Gets or sets the beard value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZoneSpawns.DrakkinHeritage">
            <summary>
            Gets or sets the drakkinheritage value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZoneSpawns.DrakkinTattoo">
            <summary>
            Gets or sets the drakkintattoo value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZoneSpawns.DrakkinDetails">
            <summary>
            Gets or sets the drakkindetails value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZoneSpawns.Statue">
            <summary>
            Gets or sets the statue value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZoneSpawns.Deity">
            <summary>
            Gets or sets the deity value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZoneSpawns.Guildid">
            <summary>
            Gets or sets the guildid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZoneSpawns.Guildrank">
            <summary>
            Gets or sets the guildrank value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZoneSpawns.Class">
            <summary>
            Gets or sets the class value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZoneSpawns.Pvp">
            <summary>
            Gets or sets the pvp value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZoneSpawns.Standstate">
            <summary>
            Gets or sets the standstate value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZoneSpawns.Light">
            <summary>
            Gets or sets the light value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZoneSpawns.Flymode">
            <summary>
            Gets or sets the flymode value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZoneSpawns.EquipChest2">
            <summary>
            Gets or sets the equipchest2 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZoneSpawns.Unknown9">
            <summary>
            Gets or sets the unknown9 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZoneSpawns.Unknown10">
            <summary>
            Gets or sets the unknown10 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZoneSpawns.Helm">
            <summary>
            Gets or sets the helm value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZoneSpawns.Lastname">
            <summary>
            Gets or sets the lastname value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZoneSpawns.Aatitle">
            <summary>
            Gets or sets the aatitle value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZoneSpawns.Unknown12">
            <summary>
            Gets or sets the unknown12 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZoneSpawns.Petownerid">
            <summary>
            Gets or sets the petownerid value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZoneSpawns.Unknown13">
            <summary>
            Gets or sets the unknown13 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZoneSpawns.Playerstate">
            <summary>
            Gets or sets the playerstate value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZoneSpawns.Unknown15">
            <summary>
            Gets or sets the unknown15 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZoneSpawns.Unknown16">
            <summary>
            Gets or sets the unknown16 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZoneSpawns.Unknown17">
            <summary>
            Gets or sets the unknown17 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZoneSpawns.Unknown18">
            <summary>
            Gets or sets the unknown18 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZoneSpawns.Unknown19">
            <summary>
            Gets or sets the unknown19 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZoneSpawns.Position">
            <summary>
            Gets or sets the position value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZoneSpawns.EquipmentTint">
            <summary>
            Gets or sets the equipmenttint value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZoneSpawns.Equipment">
            <summary>
            Gets or sets the equipment value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZoneSpawns.Unknown20">
            <summary>
            Gets or sets the unknown20 value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZoneSpawns.Ismercenary">
            <summary>
            Gets or sets the ismercenary value.
            </summary>
        </member>
        <member name="P:OpenEQ.Netcode.ZoneSpawns.Unknown21">
            <summary>
            Gets or sets the unknown21 value.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.ZoneSpawns.#ctor(System.Byte,System.UInt32,System.Byte,System.Single,System.Byte,System.UInt32,System.Byte,System.Single,System.Single,System.Single,System.Byte,System.Single,System.Single,System.UInt32,System.Byte,System.UInt32,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.UInt32,System.UInt32,System.UInt32,System.Byte,System.UInt32,System.UInt32,System.UInt32,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.UInt32,System.Byte,System.UInt32,System.Byte,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Byte[],System.Byte,System.Byte[])">
            <summary>
            Initializes a new instance of the ZoneSpawns struct with specified field values.
            </summary>
            <param name="name">The name value.</param>
            <param name="spawnId">The spawnid value.</param>
            <param name="level">The level value.</param>
            <param name="bounding_radius">The boundingradius value.</param>
            <param name="NPC">The npc value.</param>
            <param name="Bitfields">The bitfields value.</param>
            <param name="otherData">The otherdata value.</param>
            <param name="unknown3">The unknown3 value.</param>
            <param name="unknown4">The unknown4 value.</param>
            <param name="size">The size value.</param>
            <param name="face">The face value.</param>
            <param name="walkspeed">The walkspeed value.</param>
            <param name="runspeed">The runspeed value.</param>
            <param name="race">The race value.</param>
            <param name="showname">The showname value.</param>
            <param name="bodytype">The bodytype value.</param>
            <param name="curHp">The curhp value.</param>
            <param name="haircolor">The haircolor value.</param>
            <param name="beardcolor">The beardcolor value.</param>
            <param name="eyecolor1">The eyecolor1 value.</param>
            <param name="eyecolor2">The eyecolor2 value.</param>
            <param name="hairstyle">The hairstyle value.</param>
            <param name="beard">The beard value.</param>
            <param name="drakkin_heritage">The drakkinheritage value.</param>
            <param name="drakkin_tattoo">The drakkintattoo value.</param>
            <param name="drakkin_details">The drakkindetails value.</param>
            <param name="statue">The statue value.</param>
            <param name="deity">The deity value.</param>
            <param name="guildID">The guildid value.</param>
            <param name="guildrank">The guildrank value.</param>
            <param name="class_">The class value.</param>
            <param name="pvp">The pvp value.</param>
            <param name="StandState">The standstate value.</param>
            <param name="light">The light value.</param>
            <param name="flymode">The flymode value.</param>
            <param name="equip_chest2">The equipchest2 value.</param>
            <param name="unknown9">The unknown9 value.</param>
            <param name="unknown10">The unknown10 value.</param>
            <param name="helm">The helm value.</param>
            <param name="lastName">The lastname value.</param>
            <param name="aatitle">The aatitle value.</param>
            <param name="unknown12">The unknown12 value.</param>
            <param name="petOwnerId">The petownerid value.</param>
            <param name="unknown13">The unknown13 value.</param>
            <param name="PlayerState">The playerstate value.</param>
            <param name="unknown15">The unknown15 value.</param>
            <param name="unknown16">The unknown16 value.</param>
            <param name="unknown17">The unknown17 value.</param>
            <param name="unknown18">The unknown18 value.</param>
            <param name="unknown19">The unknown19 value.</param>
            <param name="Position">The position value.</param>
            <param name="equipment_tint">The equipmenttint value.</param>
            <param name="equipment">The equipment value.</param>
            <param name="unknown20">The unknown20 value.</param>
            <param name="IsMercenary">The ismercenary value.</param>
            <param name="unknown21">The unknown21 value.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ZoneSpawns.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the ZoneSpawns struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ZoneSpawns.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the ZoneSpawns struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ZoneSpawns.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ZoneSpawns.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ZoneSpawns.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.ZoneSpawns.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.ZoneSpawns.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.Autoconsent">
            <summary>
            Represents autoconsent settings for group, raid, and guild.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.Autoconsent.Group">
            <summary>
            Gets or sets a value indicating whether group autoconsent is enabled.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.Autoconsent.Raid">
            <summary>
            Gets or sets a value indicating whether raid autoconsent is enabled.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.Autoconsent.Guild">
            <summary>
            Gets or sets a value indicating whether guild autoconsent is enabled.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.Autoconsent.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenEQ.Netcode.Autoconsent"/> struct with specified values.
            </summary>
            <param name="Group">Group autoconsent.</param>
            <param name="Raid">Raid autoconsent.</param>
            <param name="Guild">Guild autoconsent.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Autoconsent.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenEQ.Netcode.Autoconsent"/> struct from a byte array.
            </summary>
            <param name="data">The byte array containing the data.</param>
            <param name="offset">The offset in the array.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Autoconsent.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenEQ.Netcode.Autoconsent"/> struct from a <see cref="T:System.IO.BinaryReader"/>.
            </summary>
            <param name="br">The binary reader.</param>
        </member>
        <member name="M:OpenEQ.Netcode.Autoconsent.Unpack(System.Byte[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:OpenEQ.Netcode.Autoconsent.Unpack(System.IO.BinaryReader)">
            <inheritdoc/>
        </member>
        <member name="M:OpenEQ.Netcode.Autoconsent.Pack">
            <inheritdoc/>
        </member>
        <member name="M:OpenEQ.Netcode.Autoconsent.Pack(System.IO.BinaryWriter)">
            <inheritdoc/>
        </member>
        <member name="M:OpenEQ.Netcode.Autoconsent.ToString">
            <summary>
            Returns a string representation of the <see cref="T:OpenEQ.Netcode.Autoconsent"/> struct.
            </summary>
            <returns>A string describing the struct.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.LdonPoints">
            <summary>
            Represents LDoN points for various dungeons and available points.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.LdonPoints.Guk">
            <summary>
            Gets or sets the Guk points.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.LdonPoints.Mir">
            <summary>
            Gets or sets the Miragul points.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.LdonPoints.Mmc">
            <summary>
            Gets or sets the Mistmoore points.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.LdonPoints.Ruj">
            <summary>
            Gets or sets the Rujarkian points.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.LdonPoints.Tak">
            <summary>
            Gets or sets the Takish points.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.LdonPoints.Available">
            <summary>
            Gets or sets the available points.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.LdonPoints.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenEQ.Netcode.LdonPoints"/> struct with specified values.
            </summary>
            <param name="Guk">Guk points.</param>
            <param name="Mir">Miragul points.</param>
            <param name="Mmc">Mistmoore points.</param>
            <param name="Ruj">Rujarkian points.</param>
            <param name="Tak">Takish points.</param>
            <param name="Available">Available points.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LdonPoints.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenEQ.Netcode.LdonPoints"/> struct from a byte array.
            </summary>
            <param name="data">The byte array containing the data.</param>
            <param name="offset">The offset in the array.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LdonPoints.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenEQ.Netcode.LdonPoints"/> struct from a <see cref="T:System.IO.BinaryReader"/>.
            </summary>
            <param name="br">The binary reader.</param>
        </member>
        <member name="M:OpenEQ.Netcode.LdonPoints.Unpack(System.Byte[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:OpenEQ.Netcode.LdonPoints.Unpack(System.IO.BinaryReader)">
            <inheritdoc/>
        </member>
        <member name="M:OpenEQ.Netcode.LdonPoints.Pack">
            <inheritdoc/>
        </member>
        <member name="M:OpenEQ.Netcode.LdonPoints.Pack(System.IO.BinaryWriter)">
            <inheritdoc/>
        </member>
        <member name="M:OpenEQ.Netcode.LdonPoints.ToString">
            <summary>
            Returns a string representation of the <see cref="T:OpenEQ.Netcode.LdonPoints"/> struct.
            </summary>
            <returns>A string describing the struct.</returns>
        </member>
        <member name="T:OpenEQ.Netcode.GroupMember">
            <summary>
            Represents a member of a group in the EQ protocol.
            </summary>
        </member>
        <member name="F:OpenEQ.Netcode.GroupMember.Name">
            <summary>
            Gets or sets the name of the group member.
            </summary>
        </member>
        <member name="M:OpenEQ.Netcode.GroupMember.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenEQ.Netcode.GroupMember"/> struct with the specified name.
            </summary>
            <param name="Name">The name of the group member.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupMember.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenEQ.Netcode.GroupMember"/> struct from a byte array.
            </summary>
            <param name="data">The byte array containing the group member data.</param>
            <param name="offset">The offset in the array to start reading from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupMember.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenEQ.Netcode.GroupMember"/> struct from a <see cref="T:System.IO.BinaryReader"/>.
            </summary>
            <param name="br">The <see cref="T:System.IO.BinaryReader"/> to read the group member data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupMember.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the group member data from a byte array.
            </summary>
            <param name="data">The byte array containing the group member data.</param>
            <param name="offset">The offset in the array to start reading from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupMember.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the group member data from a <see cref="T:System.IO.BinaryReader"/>.
            </summary>
            <param name="br">The <see cref="T:System.IO.BinaryReader"/> to read the group member data from.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupMember.Pack">
            <summary>
            Packs the group member data into a byte array.
            </summary>
            <returns>A byte array containing the packed group member data.</returns>
        </member>
        <member name="M:OpenEQ.Netcode.GroupMember.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the group member data into a <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="bw">The <see cref="T:System.IO.BinaryWriter"/> to write the group member data to.</param>
        </member>
        <member name="M:OpenEQ.Netcode.GroupMember.ToString">
            <summary>
            Returns a string representation of the <see cref="T:OpenEQ.Netcode.GroupMember"/> struct.
            </summary>
            <returns>A string that represents the current <see cref="T:OpenEQ.Netcode.GroupMember"/>.</returns>
        </member>
        <member name="T:EQProtocol.Streams.Common.Packets.AckPacket">
            <summary>
            Represents the AckPacket packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.Common.Packets.AckPacket.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the AckPacket struct with specified field values.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.Common.Packets.AckPacket.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the AckPacket struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.Packets.AckPacket.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the AckPacket struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.Packets.AckPacket.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.Packets.AckPacket.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.Packets.AckPacket.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.Common.Packets.AckPacket.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.Packets.AckPacket.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.Common.UnUsed_Packets.AddNimbusEffect">
            <summary>
            Represents the AddNimbusEffect packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.AddNimbusEffect.Spawnid">
            <summary>
            Gets or sets the spawnid value.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.AddNimbusEffect.NimbusEffect">
            <summary>
            Gets or sets the nimbuseffect value.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.AddNimbusEffect.#ctor(System.UInt32,System.Int32)">
            <summary>
            Initializes a new instance of the AddNimbusEffect struct with specified field values.
            </summary>
            <param name="spawnid">The spawnid value.</param>
            <param name="nimbus_effect">The nimbuseffect value.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.AddNimbusEffect.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the AddNimbusEffect struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.AddNimbusEffect.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the AddNimbusEffect struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.AddNimbusEffect.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.AddNimbusEffect.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.AddNimbusEffect.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.AddNimbusEffect.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.AddNimbusEffect.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.Common.UnUsed_Packets.AvaliableTask">
            <summary>
            Represents the AvaliableTask packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.AvaliableTask.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the AvaliableTask struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.AvaliableTask.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the AvaliableTask struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.AvaliableTask.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.AvaliableTask.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.AvaliableTask.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.AvaliableTask.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.AvaliableTask.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.Common.UnUsed_Packets.BookButton">
            <summary>
            Represents the BookButton packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.BookButton.Invslot">
            <summary>
            Gets or sets the invslot value.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.BookButton.TargetId">
            <summary>
            Gets or sets the targetid value.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.BookButton.Unused">
            <summary>
            Gets or sets the unused value.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.BookButton.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the BookButton struct with specified field values.
            </summary>
            <param name="invslot">The invslot value.</param>
            <param name="target_id">The targetid value.</param>
            <param name="unused">The unused value.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.BookButton.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the BookButton struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.BookButton.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the BookButton struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.BookButton.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.BookButton.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.BookButton.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.BookButton.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.BookButton.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.Common.UnUsed_Packets.CancelInvite">
            <summary>
            Represents the CancelInvite packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.CancelInvite.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the CancelInvite struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.CancelInvite.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the CancelInvite struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.CancelInvite.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.CancelInvite.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.CancelInvite.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.CancelInvite.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.CancelInvite.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.Common.UnUsed_Packets.DzExpeditionInviteResponse">
            <summary>
            Represents the DzExpeditionInviteResponse packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.DzExpeditionInviteResponse.Unknown000">
            <summary>
            Gets or sets the unknown000 value.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.DzExpeditionInviteResponse.Unknown004">
            <summary>
            Gets or sets the unknown004 value.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.DzExpeditionInviteResponse.DzZoneId">
            <summary>
            Gets or sets the dzzoneid value.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.DzExpeditionInviteResponse.DzInstanceId">
            <summary>
            Gets or sets the dzinstanceid value.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.DzExpeditionInviteResponse.Accepted">
            <summary>
            Gets or sets the accepted value.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.DzExpeditionInviteResponse.Swapping">
            <summary>
            Gets or sets the swapping value.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.DzExpeditionInviteResponse.SwapName">
            <summary>
            Gets or sets the swapname value.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.DzExpeditionInviteResponse.Unknown078">
            <summary>
            Gets or sets the unknown078 value.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.DzExpeditionInviteResponse.Unknown079">
            <summary>
            Gets or sets the unknown079 value.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.DzExpeditionInviteResponse.#ctor(System.UInt32,System.UInt32,System.UInt16,System.UInt16,System.Byte,System.Byte,System.Byte[],System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the DzExpeditionInviteResponse struct with specified field values.
            </summary>
            <param name="unknown000">The unknown000 value.</param>
            <param name="unknown004">The unknown004 value.</param>
            <param name="dz_zone_id">The dzzoneid value.</param>
            <param name="dz_instance_id">The dzinstanceid value.</param>
            <param name="accepted">The accepted value.</param>
            <param name="swapping">The swapping value.</param>
            <param name="swap_name">The swapname value.</param>
            <param name="unknown078">The unknown078 value.</param>
            <param name="unknown079">The unknown079 value.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.DzExpeditionInviteResponse.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the DzExpeditionInviteResponse struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.DzExpeditionInviteResponse.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the DzExpeditionInviteResponse struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.DzExpeditionInviteResponse.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.DzExpeditionInviteResponse.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.DzExpeditionInviteResponse.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.DzExpeditionInviteResponse.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.DzExpeditionInviteResponse.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.Common.UnUsed_Packets.GuildMemberRename">
            <summary>
            Represents the GuildMemberRename packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.GuildMemberRename.GuildId">
            <summary>
            Gets or sets the guildid value.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.GuildMemberRename.PlayerName">
            <summary>
            Gets or sets the playername value.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.GuildMemberRename.NewPlayerName">
            <summary>
            Gets or sets the newplayername value.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildMemberRename.#ctor(System.UInt32,System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the GuildMemberRename struct with specified field values.
            </summary>
            <param name="guild_id">The guildid value.</param>
            <param name="player_name">The playername value.</param>
            <param name="new_player_name">The newplayername value.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildMemberRename.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GuildMemberRename struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildMemberRename.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GuildMemberRename struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildMemberRename.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildMemberRename.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildMemberRename.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildMemberRename.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildMemberRename.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.Common.UnUsed_Packets.GuildModifyBenefits">
            <summary>
            Represents the GuildModifyBenefits packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.GuildModifyBenefits.TributeId">
            <summary>
            Gets or sets the tributeid value.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.GuildModifyBenefits.Tier">
            <summary>
            Gets or sets the tier value.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.GuildModifyBenefits.TributeId2">
            <summary>
            Gets or sets the tributeid2 value.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.GuildModifyBenefits.Unknown12">
            <summary>
            Gets or sets the unknown12 value.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildModifyBenefits.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the GuildModifyBenefits struct with specified field values.
            </summary>
            <param name="tribute_id">The tributeid value.</param>
            <param name="tier">The tier value.</param>
            <param name="tribute_id2">The tributeid2 value.</param>
            <param name="unknown12">The unknown12 value.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildModifyBenefits.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GuildModifyBenefits struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildModifyBenefits.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GuildModifyBenefits struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildModifyBenefits.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildModifyBenefits.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildModifyBenefits.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildModifyBenefits.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildModifyBenefits.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.Common.UnUsed_Packets.GuildOptInOut">
            <summary>
            Represents the GuildOptInOut packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.GuildOptInOut.GuildId">
            <summary>
            Gets or sets the guildid value.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.GuildOptInOut.PlayerName">
            <summary>
            Gets or sets the playername value.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.GuildOptInOut.TributeToggle">
            <summary>
            Gets or sets the tributetoggle value.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.GuildOptInOut.TributeTrophyToggle">
            <summary>
            Gets or sets the tributetrophytoggle value.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.GuildOptInOut.NoDonations">
            <summary>
            Gets or sets the nodonations value.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.GuildOptInOut.Time">
            <summary>
            Gets or sets the time value.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.GuildOptInOut.Command">
            <summary>
            Gets or sets the command value.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildOptInOut.#ctor(System.UInt32,System.Byte[],System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the GuildOptInOut struct with specified field values.
            </summary>
            <param name="guild_id">The guildid value.</param>
            <param name="player_name">The playername value.</param>
            <param name="tribute_toggle">The tributetoggle value.</param>
            <param name="tribute_trophy_toggle">The tributetrophytoggle value.</param>
            <param name="no_donations">The nodonations value.</param>
            <param name="time">The time value.</param>
            <param name="command">The command value.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildOptInOut.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GuildOptInOut struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildOptInOut.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GuildOptInOut struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildOptInOut.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildOptInOut.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildOptInOut.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildOptInOut.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildOptInOut.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.Common.UnUsed_Packets.GuildSaveActiveTributes">
            <summary>
            Represents the GuildSaveActiveTributes packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildSaveActiveTributes.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GuildSaveActiveTributes struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildSaveActiveTributes.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GuildSaveActiveTributes struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildSaveActiveTributes.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildSaveActiveTributes.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildSaveActiveTributes.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildSaveActiveTributes.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildSaveActiveTributes.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.Common.UnUsed_Packets.GuildSelectTribute">
            <summary>
            Represents the GuildSelectTribute packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.GuildSelectTribute.TributeId">
            <summary>
            Gets or sets the tributeid value.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.GuildSelectTribute.Tier">
            <summary>
            Gets or sets the tier value.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.GuildSelectTribute.TributeId2">
            <summary>
            Gets or sets the tributeid2 value.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.GuildSelectTribute.Unknown12">
            <summary>
            Gets or sets the unknown12 value.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildSelectTribute.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the GuildSelectTribute struct with specified field values.
            </summary>
            <param name="tribute_id">The tributeid value.</param>
            <param name="tier">The tier value.</param>
            <param name="tribute_id2">The tributeid2 value.</param>
            <param name="unknown12">The unknown12 value.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildSelectTribute.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GuildSelectTribute struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildSelectTribute.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GuildSelectTribute struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildSelectTribute.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildSelectTribute.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildSelectTribute.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildSelectTribute.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildSelectTribute.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.Common.UnUsed_Packets.GuildSendActiveTributes">
            <summary>
            Represents the GuildSendActiveTributes packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.GuildSendActiveTributes.NotUsed">
            <summary>
            Gets or sets the notused value.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.GuildSendActiveTributes.GuildFavor">
            <summary>
            Gets or sets the guildfavor value.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.GuildSendActiveTributes.TributeTimer">
            <summary>
            Gets or sets the tributetimer value.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.GuildSendActiveTributes.TributeEnabled">
            <summary>
            Gets or sets the tributeenabled value.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.GuildSendActiveTributes.Unknown16">
            <summary>
            Gets or sets the unknown16 value.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.GuildSendActiveTributes.TributeId1">
            <summary>
            Gets or sets the tributeid1 value.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.GuildSendActiveTributes.TributeId2">
            <summary>
            Gets or sets the tributeid2 value.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.GuildSendActiveTributes.TributeId1Tier">
            <summary>
            Gets or sets the tributeid1tier value.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.GuildSendActiveTributes.TributeId2Tier">
            <summary>
            Gets or sets the tributeid2tier value.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildSendActiveTributes.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Byte[],System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the GuildSendActiveTributes struct with specified field values.
            </summary>
            <param name="not_used">The notused value.</param>
            <param name="guild_favor">The guildfavor value.</param>
            <param name="tribute_timer">The tributetimer value.</param>
            <param name="tribute_enabled">The tributeenabled value.</param>
            <param name="unknown16">The unknown16 value.</param>
            <param name="tribute_id_1">The tributeid1 value.</param>
            <param name="tribute_id_2">The tributeid2 value.</param>
            <param name="tribute_id_1_tier">The tributeid1tier value.</param>
            <param name="tribute_id_2_tier">The tributeid2tier value.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildSendActiveTributes.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GuildSendActiveTributes struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildSendActiveTributes.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GuildSendActiveTributes struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildSendActiveTributes.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildSendActiveTributes.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildSendActiveTributes.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildSendActiveTributes.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildSendActiveTributes.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeDonateItem">
            <summary>
            Represents the GuildTributeDonateItem packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeDonateItem.Slot">
            <summary>
            Gets or sets the slot value.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeDonateItem.Quantity">
            <summary>
            Gets or sets the quantity value.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeDonateItem.Unknown8">
            <summary>
            Gets or sets the unknown8 value.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeDonateItem.Favor">
            <summary>
            Gets or sets the favor value.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeDonateItem.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the GuildTributeDonateItem struct with specified field values.
            </summary>
            <param name="slot">The slot value.</param>
            <param name="quantity">The quantity value.</param>
            <param name="unknown8">The unknown8 value.</param>
            <param name="favor">The favor value.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeDonateItem.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GuildTributeDonateItem struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeDonateItem.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GuildTributeDonateItem struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeDonateItem.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeDonateItem.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeDonateItem.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeDonateItem.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeDonateItem.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeDonatePlat">
            <summary>
            Represents the GuildTributeDonatePlat packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeDonatePlat.Quantity">
            <summary>
            Gets or sets the quantity value.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeDonatePlat.TributeMasterId">
            <summary>
            Gets or sets the tributemasterid value.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeDonatePlat.Unknown08">
            <summary>
            Gets or sets the unknown08 value.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeDonatePlat.GuildId">
            <summary>
            Gets or sets the guildid value.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeDonatePlat.Unknown16">
            <summary>
            Gets or sets the unknown16 value.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeDonatePlat.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the GuildTributeDonatePlat struct with specified field values.
            </summary>
            <param name="quantity">The quantity value.</param>
            <param name="tribute_master_id">The tributemasterid value.</param>
            <param name="unknown08">The unknown08 value.</param>
            <param name="guild_id">The guildid value.</param>
            <param name="unknown16">The unknown16 value.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeDonatePlat.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GuildTributeDonatePlat struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeDonatePlat.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GuildTributeDonatePlat struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeDonatePlat.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeDonatePlat.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeDonatePlat.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeDonatePlat.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeDonatePlat.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeFavorAndTimer">
            <summary>
            Represents the GuildTributeFavorAndTimer packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeFavorAndTimer.GuildId">
            <summary>
            Gets or sets the guildid value.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeFavorAndTimer.GuildFavor">
            <summary>
            Gets or sets the guildfavor value.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeFavorAndTimer.TributeTimer">
            <summary>
            Gets or sets the tributetimer value.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeFavorAndTimer.TrophyTimer">
            <summary>
            Gets or sets the trophytimer value.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeFavorAndTimer.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the GuildTributeFavorAndTimer struct with specified field values.
            </summary>
            <param name="guild_id">The guildid value.</param>
            <param name="guild_favor">The guildfavor value.</param>
            <param name="tribute_timer">The tributetimer value.</param>
            <param name="trophy_timer">The trophytimer value.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeFavorAndTimer.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GuildTributeFavorAndTimer struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeFavorAndTimer.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GuildTributeFavorAndTimer struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeFavorAndTimer.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeFavorAndTimer.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeFavorAndTimer.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeFavorAndTimer.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeFavorAndTimer.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeToggleReply">
            <summary>
            Represents the GuildTributeToggleReply packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeToggleReply.NotUsed">
            <summary>
            Gets or sets the notused value.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeToggleReply.GuildFavor">
            <summary>
            Gets or sets the guildfavor value.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeToggleReply.TributeTimer">
            <summary>
            Gets or sets the tributetimer value.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeToggleReply.TributeEnabled">
            <summary>
            Gets or sets the tributeenabled value.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeToggleReply.Unknown16">
            <summary>
            Gets or sets the unknown16 value.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeToggleReply.TributeId1">
            <summary>
            Gets or sets the tributeid1 value.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeToggleReply.TributeId2">
            <summary>
            Gets or sets the tributeid2 value.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeToggleReply.TributeId1Tier">
            <summary>
            Gets or sets the tributeid1tier value.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeToggleReply.TributeId2Tier">
            <summary>
            Gets or sets the tributeid2tier value.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeToggleReply.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Byte[],System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the GuildTributeToggleReply struct with specified field values.
            </summary>
            <param name="not_used">The notused value.</param>
            <param name="guild_favor">The guildfavor value.</param>
            <param name="tribute_timer">The tributetimer value.</param>
            <param name="tribute_enabled">The tributeenabled value.</param>
            <param name="unknown16">The unknown16 value.</param>
            <param name="tribute_id_1">The tributeid1 value.</param>
            <param name="tribute_id_2">The tributeid2 value.</param>
            <param name="tribute_id_1_tier">The tributeid1tier value.</param>
            <param name="tribute_id_2_tier">The tributeid2tier value.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeToggleReply.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GuildTributeToggleReply struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeToggleReply.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GuildTributeToggleReply struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeToggleReply.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeToggleReply.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeToggleReply.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeToggleReply.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeToggleReply.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeToggleReq">
            <summary>
            Represents the GuildTributeToggleReq packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeToggleReq.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GuildTributeToggleReq struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeToggleReq.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GuildTributeToggleReq struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeToggleReq.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeToggleReq.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeToggleReq.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeToggleReq.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildTributeToggleReq.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.Common.UnUsed_Packets.GuildUpdate">
            <summary>
            Represents the GuildUpdate packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.GuildUpdate.Action">
            <summary>
            Gets or sets the action value.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.GuildUpdate.Text">
            <summary>
            Gets or sets the text value.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildUpdate.#ctor(System.UInt32,System.Byte[])">
            <summary>
            Initializes a new instance of the GuildUpdate struct with specified field values.
            </summary>
            <param name="Action">The action value.</param>
            <param name="Text">The text value.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildUpdate.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the GuildUpdate struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildUpdate.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the GuildUpdate struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildUpdate.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildUpdate.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildUpdate.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildUpdate.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.GuildUpdate.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.Common.UnUsed_Packets.ItemRecastDelay">
            <summary>
            Represents the ItemRecastDelay packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.ItemRecastDelay.RecastDelay">
            <summary>
            Gets or sets the recastdelay value.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.ItemRecastDelay.RecastType">
            <summary>
            Gets or sets the recasttype value.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.ItemRecastDelay.IgnoreCastingRequirement">
            <summary>
            Gets or sets the ignorecastingrequirement value.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ItemRecastDelay.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the ItemRecastDelay struct with specified field values.
            </summary>
            <param name="recast_delay">The recastdelay value.</param>
            <param name="recast_type">The recasttype value.</param>
            <param name="ignore_casting_requirement">The ignorecastingrequirement value.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ItemRecastDelay.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the ItemRecastDelay struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ItemRecastDelay.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the ItemRecastDelay struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ItemRecastDelay.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ItemRecastDelay.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ItemRecastDelay.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ItemRecastDelay.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ItemRecastDelay.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.Common.UnUsed_Packets.PlayMP3">
            <summary>
            Represents the PlayMP3 packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.PlayMP3.Filename">
            <summary>
            Gets or sets the filename value.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.PlayMP3.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the PlayMP3 struct with specified field values.
            </summary>
            <param name="filename">The filename value.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.PlayMP3.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the PlayMP3 struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.PlayMP3.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the PlayMP3 struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.PlayMP3.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.PlayMP3.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.PlayMP3.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.PlayMP3.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.PlayMP3.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.Common.UnUsed_Packets.RaidClearNPCMarks">
            <summary>
            Represents the RaidClearNPCMarks packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.RaidClearNPCMarks.Targetid">
            <summary>
            Gets or sets the targetid value.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.RaidClearNPCMarks.Number">
            <summary>
            Gets or sets the number value.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.RaidClearNPCMarks.Name">
            <summary>
            Gets or sets the name value.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.RaidClearNPCMarks.#ctor(System.UInt32,System.UInt32,System.Byte[])">
            <summary>
            Initializes a new instance of the RaidClearNPCMarks struct with specified field values.
            </summary>
            <param name="TargetID">The targetid value.</param>
            <param name="Number">The number value.</param>
            <param name="Name">The name value.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.RaidClearNPCMarks.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the RaidClearNPCMarks struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.RaidClearNPCMarks.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the RaidClearNPCMarks struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.RaidClearNPCMarks.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.RaidClearNPCMarks.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.RaidClearNPCMarks.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.RaidClearNPCMarks.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.RaidClearNPCMarks.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.Common.UnUsed_Packets.RemoveTrap">
            <summary>
            Represents the RemoveTrap packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.RemoveTrap.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the RemoveTrap struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.RemoveTrap.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the RemoveTrap struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.RemoveTrap.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.RemoveTrap.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.RemoveTrap.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.RemoveTrap.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.RemoveTrap.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.Common.UnUsed_Packets.RequestGuildTributes">
            <summary>
            Represents the RequestGuildTributes packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.RequestGuildTributes.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the RequestGuildTributes struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.RequestGuildTributes.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the RequestGuildTributes struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.RequestGuildTributes.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.RequestGuildTributes.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.RequestGuildTributes.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.RequestGuildTributes.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.RequestGuildTributes.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.Common.UnUsed_Packets.SendSkillCapsChecksum">
            <summary>
            Represents the SendSkillCapsChecksum packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SendSkillCapsChecksum.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the SendSkillCapsChecksum struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SendSkillCapsChecksum.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the SendSkillCapsChecksum struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SendSkillCapsChecksum.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SendSkillCapsChecksum.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SendSkillCapsChecksum.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SendSkillCapsChecksum.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SendSkillCapsChecksum.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.Common.UnUsed_Packets.SendSpellChecksum">
            <summary>
            Represents the SendSpellChecksum packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SendSpellChecksum.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the SendSpellChecksum struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SendSpellChecksum.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the SendSpellChecksum struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SendSpellChecksum.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SendSpellChecksum.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SendSpellChecksum.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SendSpellChecksum.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SendSpellChecksum.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskAcceptNew">
            <summary>
            Represents the SharedTaskAcceptNew packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskAcceptNew.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the SharedTaskAcceptNew struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskAcceptNew.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the SharedTaskAcceptNew struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskAcceptNew.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskAcceptNew.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskAcceptNew.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskAcceptNew.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskAcceptNew.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskAddPlayer">
            <summary>
            Represents the SharedTaskAddPlayer packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskAddPlayer.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the SharedTaskAddPlayer struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskAddPlayer.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the SharedTaskAddPlayer struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskAddPlayer.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskAddPlayer.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskAddPlayer.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskAddPlayer.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskAddPlayer.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskInvite">
            <summary>
            Represents the SharedTaskInvite packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskInvite.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the SharedTaskInvite struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskInvite.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the SharedTaskInvite struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskInvite.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskInvite.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskInvite.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskInvite.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskInvite.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskInviteResponse">
            <summary>
            Represents the SharedTaskInviteResponse packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskInviteResponse.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the SharedTaskInviteResponse struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskInviteResponse.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the SharedTaskInviteResponse struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskInviteResponse.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskInviteResponse.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskInviteResponse.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskInviteResponse.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskInviteResponse.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskMakeLeader">
            <summary>
            Represents the SharedTaskMakeLeader packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskMakeLeader.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the SharedTaskMakeLeader struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskMakeLeader.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the SharedTaskMakeLeader struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskMakeLeader.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskMakeLeader.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskMakeLeader.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskMakeLeader.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskMakeLeader.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskMemberChange">
            <summary>
            Represents the SharedTaskMemberChange packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskMemberChange.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the SharedTaskMemberChange struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskMemberChange.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the SharedTaskMemberChange struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskMemberChange.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskMemberChange.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskMemberChange.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskMemberChange.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskMemberChange.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskMemberList">
            <summary>
            Represents the SharedTaskMemberList packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskMemberList.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the SharedTaskMemberList struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskMemberList.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the SharedTaskMemberList struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskMemberList.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskMemberList.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskMemberList.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskMemberList.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskMemberList.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskPlayerList">
            <summary>
            Represents the SharedTaskPlayerList packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskPlayerList.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the SharedTaskPlayerList struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskPlayerList.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the SharedTaskPlayerList struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskPlayerList.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskPlayerList.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskPlayerList.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskPlayerList.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskPlayerList.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskQuit">
            <summary>
            Represents the SharedTaskQuit packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskQuit.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the SharedTaskQuit struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskQuit.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the SharedTaskQuit struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskQuit.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskQuit.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskQuit.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskQuit.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskQuit.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskRemovePlayer">
            <summary>
            Represents the SharedTaskRemovePlayer packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskRemovePlayer.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the SharedTaskRemovePlayer struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskRemovePlayer.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the SharedTaskRemovePlayer struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskRemovePlayer.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskRemovePlayer.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskRemovePlayer.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskRemovePlayer.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskRemovePlayer.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskSelectWindow">
            <summary>
            Represents the SharedTaskSelectWindow packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskSelectWindow.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the SharedTaskSelectWindow struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskSelectWindow.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the SharedTaskSelectWindow struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskSelectWindow.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskSelectWindow.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskSelectWindow.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskSelectWindow.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.SharedTaskSelectWindow.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.Common.UnUsed_Packets.ShieldGroup">
            <summary>
            Represents the ShieldGroup packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ShieldGroup.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the ShieldGroup struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ShieldGroup.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the ShieldGroup struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ShieldGroup.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ShieldGroup.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ShieldGroup.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ShieldGroup.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ShieldGroup.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.Common.UnUsed_Packets.Shroud">
            <summary>
            Represents the Shroud packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.Shroud.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the Shroud struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.Shroud.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the Shroud struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.Shroud.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.Shroud.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.Shroud.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.Shroud.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.Shroud.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.Common.UnUsed_Packets.ShroudProgress">
            <summary>
            Represents the ShroudProgress packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ShroudProgress.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the ShroudProgress struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ShroudProgress.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the ShroudProgress struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ShroudProgress.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ShroudProgress.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ShroudProgress.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ShroudProgress.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ShroudProgress.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.Common.UnUsed_Packets.ShroudProgress2">
            <summary>
            Represents the ShroudProgress2 packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ShroudProgress2.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the ShroudProgress2 struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ShroudProgress2.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the ShroudProgress2 struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ShroudProgress2.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ShroudProgress2.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ShroudProgress2.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ShroudProgress2.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ShroudProgress2.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.Common.UnUsed_Packets.ShroudRequestStats">
            <summary>
            Represents the ShroudRequestStats packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ShroudRequestStats.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the ShroudRequestStats struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ShroudRequestStats.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the ShroudRequestStats struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ShroudRequestStats.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ShroudRequestStats.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ShroudRequestStats.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ShroudRequestStats.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ShroudRequestStats.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.Common.UnUsed_Packets.ShroudRespondStats">
            <summary>
            Represents the ShroudRespondStats packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ShroudRespondStats.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the ShroudRespondStats struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ShroudRespondStats.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the ShroudRespondStats struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ShroudRespondStats.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ShroudRespondStats.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ShroudRespondStats.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ShroudRespondStats.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ShroudRespondStats.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.Common.UnUsed_Packets.ShroudSelect">
            <summary>
            Represents the ShroudSelect packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ShroudSelect.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the ShroudSelect struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ShroudSelect.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the ShroudSelect struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ShroudSelect.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ShroudSelect.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ShroudSelect.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ShroudSelect.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ShroudSelect.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.Common.UnUsed_Packets.ShroudSelectCancel">
            <summary>
            Represents the ShroudSelectCancel packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ShroudSelectCancel.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the ShroudSelectCancel struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ShroudSelectCancel.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the ShroudSelectCancel struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ShroudSelectCancel.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ShroudSelectCancel.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ShroudSelectCancel.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ShroudSelectCancel.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ShroudSelectCancel.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.Common.UnUsed_Packets.ShroudSelectionWindow">
            <summary>
            Represents the ShroudSelectionWindow packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ShroudSelectionWindow.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the ShroudSelectionWindow struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ShroudSelectionWindow.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the ShroudSelectionWindow struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ShroudSelectionWindow.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ShroudSelectionWindow.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ShroudSelectionWindow.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ShroudSelectionWindow.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ShroudSelectionWindow.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.Common.UnUsed_Packets.TaskRequestTimer">
            <summary>
            Represents the TaskRequestTimer packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.TaskRequestTimer.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the TaskRequestTimer struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.TaskRequestTimer.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the TaskRequestTimer struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.TaskRequestTimer.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.TaskRequestTimer.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.TaskRequestTimer.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.TaskRequestTimer.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.TaskRequestTimer.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.Common.UnUsed_Packets.TaskSelectWindow">
            <summary>
            Represents the TaskSelectWindow packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.TaskSelectWindow.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the TaskSelectWindow struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.TaskSelectWindow.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the TaskSelectWindow struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.TaskSelectWindow.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.TaskSelectWindow.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.TaskSelectWindow.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.TaskSelectWindow.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.TaskSelectWindow.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.Common.UnUsed_Packets.TaskTimers">
            <summary>
            Represents the TaskTimers packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.TaskTimers.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the TaskTimers struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.TaskTimers.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the TaskTimers struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.TaskTimers.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.TaskTimers.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.TaskTimers.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.TaskTimers.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.TaskTimers.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.Common.UnUsed_Packets.UnderWorld">
            <summary>
            Represents the UnderWorld packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.UnderWorld.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the UnderWorld struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.UnderWorld.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the UnderWorld struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.UnderWorld.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.UnderWorld.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.UnderWorld.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.UnderWorld.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.UnderWorld.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.Common.UnUsed_Packets.WorldClientCRC1">
            <summary>
            Represents the WorldClientCRC1 packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.WorldClientCRC1.Checksum">
            <summary>
            Gets or sets the checksum value.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.WorldClientCRC1.Data">
            <summary>
            Gets or sets the data value.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.WorldClientCRC1.#ctor(System.UInt32,System.Byte[])">
            <summary>
            Initializes a new instance of the WorldClientCRC1 struct with specified field values.
            </summary>
            <param name="checksum">The checksum value.</param>
            <param name="data">The data value.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.WorldClientCRC1.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the WorldClientCRC1 struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.WorldClientCRC1.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the WorldClientCRC1 struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.WorldClientCRC1.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.WorldClientCRC1.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.WorldClientCRC1.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.WorldClientCRC1.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.WorldClientCRC1.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.Common.UnUsed_Packets.WorldClientCRC2">
            <summary>
            Represents the WorldClientCRC2 packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.WorldClientCRC2.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the WorldClientCRC2 struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.WorldClientCRC2.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the WorldClientCRC2 struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.WorldClientCRC2.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.WorldClientCRC2.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.WorldClientCRC2.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.WorldClientCRC2.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.WorldClientCRC2.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.Common.UnUsed_Packets.WorldUnknown001">
            <summary>
            Represents the WorldUnknown001 packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.WorldUnknown001.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the WorldUnknown001 struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.WorldUnknown001.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the WorldUnknown001 struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.WorldUnknown001.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.WorldUnknown001.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.WorldUnknown001.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.WorldUnknown001.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.WorldUnknown001.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.Common.UnUsed_Packets.ZoneUnavail">
            <summary>
            Represents the ZoneUnavail packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.ZoneUnavail.Zonename">
            <summary>
            Gets or sets the zonename value.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.Common.UnUsed_Packets.ZoneUnavail.Unknown">
            <summary>
            Gets or sets the unknown value.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ZoneUnavail.#ctor(System.Byte[],System.Int16[])">
            <summary>
            Initializes a new instance of the ZoneUnavail struct with specified field values.
            </summary>
            <param name="zonename">The zonename value.</param>
            <param name="unknown">The unknown value.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ZoneUnavail.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the ZoneUnavail struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ZoneUnavail.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the ZoneUnavail struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ZoneUnavail.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ZoneUnavail.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ZoneUnavail.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ZoneUnavail.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.Common.UnUsed_Packets.ZoneUnavail.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.Login.ServerListElement">
            <summary>
            Represents a single server entry in the server list.
            </summary>
        </member>
        <member name="F:EQProtocol.Streams.Login.ServerListElement.WorldIP">
            <summary>
            The IP address of the world server.
            </summary>
        </member>
        <member name="F:EQProtocol.Streams.Login.ServerListElement.ServerListID">
            <summary>
            The unique ID of the server in the server list.
            </summary>
        </member>
        <member name="F:EQProtocol.Streams.Login.ServerListElement.RuntimeID">
            <summary>
            The runtime ID of the server.
            </summary>
        </member>
        <member name="F:EQProtocol.Streams.Login.ServerListElement.Longname">
            <summary>
            The long name of the server.
            </summary>
        </member>
        <member name="F:EQProtocol.Streams.Login.ServerListElement.Language">
            <summary>
            The language of the server.
            </summary>
        </member>
        <member name="F:EQProtocol.Streams.Login.ServerListElement.Region">
            <summary>
            The region of the server.
            </summary>
        </member>
        <member name="F:EQProtocol.Streams.Login.ServerListElement.Status">
            <summary>
            The status of the server.
            </summary>
        </member>
        <member name="F:EQProtocol.Streams.Login.ServerListElement.PlayersOnline">
            <summary>
            The number of players currently online on the server.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.Login.ServerListElement.#ctor(System.String,System.UInt32,System.UInt32,System.String,System.String,System.String,EQProtocol.Streams.Login.ServerStatus,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:EQProtocol.Streams.Login.ServerListElement"/> struct with the specified values.
            </summary>
            <param name="WorldIP">The IP address of the world server.</param>
            <param name="ServerListID">The unique ID of the server in the server list.</param>
            <param name="RuntimeID">The runtime ID of the server.</param>
            <param name="Longname">The long name of the server.</param>
            <param name="Language">The language of the server.</param>
            <param name="Region">The region of the server.</param>
            <param name="Status">The status of the server.</param>
            <param name="PlayersOnline">The number of players currently online.</param>
        </member>
        <member name="M:EQProtocol.Streams.Login.ServerListElement.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:EQProtocol.Streams.Login.ServerListElement"/> struct from a byte array.
            </summary>
            <param name="data">The byte array containing the packed data.</param>
            <param name="offset">The offset in the array to start reading from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Login.ServerListElement.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the <see cref="T:EQProtocol.Streams.Login.ServerListElement"/> struct from a <see cref="T:System.IO.BinaryReader"/>.
            </summary>
            <param name="br">The binary reader to read from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Login.ServerListElement.Unpack(System.Byte[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EQProtocol.Streams.Login.ServerListElement.Unpack(System.IO.BinaryReader)">
            <inheritdoc/>
        </member>
        <member name="M:EQProtocol.Streams.Login.ServerListElement.Pack">
            <inheritdoc/>
        </member>
        <member name="M:EQProtocol.Streams.Login.ServerListElement.Pack(System.IO.BinaryWriter)">
            <inheritdoc/>
        </member>
        <member name="M:EQProtocol.Streams.Login.ServerListElement.ToString">
            <summary>
            Returns a string representation of the <see cref="T:EQProtocol.Streams.Login.ServerListElement"/>.
            </summary>
            <returns>A string describing the server list element.</returns>
        </member>
        <member name="T:EQProtocol.Streams.Login.Packets.ChatMessage">
            <summary>
            Represents the ChatMessage packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="T:EQProtocol.Streams.Login.Packets.EnterChat">
            <summary>
            Represents the EnterChat packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.Login.Packets.EnterChat.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the EnterChat struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Login.Packets.EnterChat.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the EnterChat struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Login.Packets.EnterChat.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Login.Packets.EnterChat.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Login.Packets.EnterChat.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.Login.Packets.EnterChat.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.Login.Packets.EnterChat.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.Login.Packets.Login">
            <summary>
            Represents the Login packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="T:EQProtocol.Streams.Login.Packets.LoginAccepted">
            <summary>
            Represents the LoginAccepted packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="T:EQProtocol.Streams.Login.Packets.PlayEverquestRequest">
            <summary>
            Represents the PlayEverquestRequest packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="T:EQProtocol.Streams.Login.Packets.PlayEverquestResponse">
            <summary>
            Represents the PlayEverquestResponse packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="T:EQProtocol.Streams.Login.Packets.Poll">
            <summary>
            Represents the Poll packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.Login.Packets.Poll.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the Poll struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Login.Packets.Poll.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the Poll struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Login.Packets.Poll.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Login.Packets.Poll.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Login.Packets.Poll.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.Login.Packets.Poll.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.Login.Packets.Poll.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.Login.Packets.PollResponse">
            <summary>
            Represents the PollResponse packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.Login.Packets.PollResponse.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the PollResponse struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Login.Packets.PollResponse.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the PollResponse struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Login.Packets.PollResponse.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Login.Packets.PollResponse.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Login.Packets.PollResponse.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.Login.Packets.PollResponse.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.Login.Packets.PollResponse.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.Login.Packets.ServerListRequest">
            <summary>
            Represents the ServerListRequest packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.Login.Packets.ServerListRequest.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the ServerListRequest struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Login.Packets.ServerListRequest.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the ServerListRequest struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Login.Packets.ServerListRequest.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Login.Packets.ServerListRequest.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Login.Packets.ServerListRequest.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.Login.Packets.ServerListRequest.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.Login.Packets.ServerListRequest.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.Login.Packets.ServerListResponse">
            <summary>
            Represents the ServerListResponse packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.Login.Packets.ServerListResponse.#ctor(System.Collections.Generic.List{EQProtocol.Streams.Login.ServerListElement})">
            <summary>
            Initializes a new instance of the ServerListResponse struct with specified field values.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.Login.Packets.ServerListResponse.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the ServerListResponse struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Login.Packets.ServerListResponse.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the ServerListResponse struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Login.Packets.ServerListResponse.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Login.Packets.ServerListResponse.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.Login.Packets.ServerListResponse.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.Login.Packets.ServerListResponse.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.Login.Packets.ServerListResponse.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.Login.Packets.SessionReady">
            <summary>
            Represents the SessionReady packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="T:EQProtocol.Streams.World.Packets.CharacterCreateRequest">
            <summary>
            Represents the CharacterCreateRequest packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.CharacterCreateRequest.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the CharacterCreateRequest struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.CharacterCreateRequest.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the CharacterCreateRequest struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.CharacterCreateRequest.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.CharacterCreateRequest.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.CharacterCreateRequest.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.CharacterCreateRequest.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.CharacterCreateRequest.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.World.Packets.DeleteCharacter">
            <summary>
            Represents the DeleteCharacter packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.DeleteCharacter.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the DeleteCharacter struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.DeleteCharacter.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the DeleteCharacter struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.DeleteCharacter.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.DeleteCharacter.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.DeleteCharacter.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.DeleteCharacter.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.DeleteCharacter.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.World.Packets.EnterWorld">
            <summary>
            Represents the EnterWorld packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="F:EQProtocol.Streams.World.Packets.EnterWorld.Name">
            <summary>
            The name of the character entering the world.
            </summary>
        </member>
        <member name="F:EQProtocol.Streams.World.Packets.EnterWorld.Tutorial">
            <summary>
            Indicates whether the player should enter the tutorial.
            </summary>
        </member>
        <member name="F:EQProtocol.Streams.World.Packets.EnterWorld.GoHome">
            <summary>
            Indicates whether the player should go home upon entering the world.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.EnterWorld.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EQProtocol.Streams.World.Packets.EnterWorld"/> struct with the specified values.
            </summary>
            <param name="Name">The character name.</param>
            <param name="Tutorial">Whether to enter the tutorial.</param>
            <param name="GoHome">Whether to go home.</param>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.EnterWorld.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:EQProtocol.Streams.World.Packets.EnterWorld"/> struct from a byte array.
            </summary>
            <param name="data">The byte array containing the packet data.</param>
            <param name="offset">The offset in the array to start reading from.</param>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.EnterWorld.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the <see cref="T:EQProtocol.Streams.World.Packets.EnterWorld"/> struct from a <see cref="T:System.IO.BinaryReader"/>.
            </summary>
            <param name="br">The binary reader containing the packet data.</param>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.EnterWorld.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the packet data from a byte array.
            </summary>
            <param name="data">The byte array containing the packet data.</param>
            <param name="offset">The offset in the array to start reading from.</param>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.EnterWorld.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the packet data from a <see cref="T:System.IO.BinaryReader"/>.
            </summary>
            <param name="br">The binary reader containing the packet data.</param>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.EnterWorld.Pack">
            <summary>
            Packs the current structure into a byte array.
            </summary>
            <returns>A byte array containing the packed data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.EnterWorld.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the current structure into a <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="bw">The binary writer to write the packed data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.EnterWorld.ToString">
            <summary>
            Returns a string representation of the <see cref="T:EQProtocol.Streams.World.Packets.EnterWorld"/> structure.
            </summary>
            <returns>A string describing the structure.</returns>
        </member>
        <member name="T:EQProtocol.Streams.World.Packets.MOTD">
            <summary>
            Represents the MOTD packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.World.Packets.MOTD.Unknown000">
            <summary>
            Gets or sets the unknown000 value.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.World.Packets.MOTD.Membername">
            <summary>
            Gets or sets the membername value.
            </summary>
        </member>
        <member name="P:EQProtocol.Streams.World.Packets.MOTD.Unknown128">
            <summary>
            Gets or sets the unknown128 value.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.MOTD.#ctor(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the MOTD struct with specified field values.
            </summary>
            <param name="unknown000">The unknown000 value.</param>
            <param name="membername">The membername value.</param>
            <param name="unknown128">The unknown128 value.</param>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.MOTD.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the MOTD struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.MOTD.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the MOTD struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.MOTD.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.MOTD.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.MOTD.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.MOTD.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.MOTD.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.World.Packets.PostEnterWorld">
            <summary>
            Represents the PostEnterWorld packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.PostEnterWorld.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the PostEnterWorld struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.PostEnterWorld.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the PostEnterWorld struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.PostEnterWorld.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.PostEnterWorld.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.PostEnterWorld.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.PostEnterWorld.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.PostEnterWorld.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.World.Packets.RandomNameGenerator">
            <summary>
            Represents the RandomNameGenerator packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.RandomNameGenerator.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the RandomNameGenerator struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.RandomNameGenerator.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the RandomNameGenerator struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.RandomNameGenerator.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.RandomNameGenerator.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.RandomNameGenerator.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.RandomNameGenerator.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.RandomNameGenerator.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.World.Packets.SetChatServer">
            <summary>
            Represents the SetChatServer packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.SetChatServer.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the SetChatServer struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.SetChatServer.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the SetChatServer struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.SetChatServer.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.SetChatServer.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.SetChatServer.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.SetChatServer.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.SetChatServer.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.World.Packets.SetChatServer2">
            <summary>
            Represents the SetChatServer2 packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.SetChatServer2.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the SetChatServer2 struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.SetChatServer2.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the SetChatServer2 struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.SetChatServer2.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.SetChatServer2.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.SetChatServer2.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.SetChatServer2.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.SetChatServer2.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.World.Packets.WorldClientReady">
            <summary>
            Represents the WorldClientReady packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.WorldClientReady.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the WorldClientReady struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.WorldClientReady.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the WorldClientReady struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.WorldClientReady.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.WorldClientReady.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.WorldClientReady.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.WorldClientReady.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.WorldClientReady.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.World.Packets.WorldComplete">
            <summary>
            Represents the WorldComplete packet structure for EverQuest network communication.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.WorldComplete.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the WorldComplete struct from binary data.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.WorldComplete.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the WorldComplete struct from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.WorldComplete.Unpack(System.Byte[],System.Int32)">
            <summary>
            Unpacks the struct data from a byte array.
            </summary>
            <param name="data">The binary data to unpack.</param>
            <param name="offset">The offset in the data to start unpacking from.</param>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.WorldComplete.Unpack(System.IO.BinaryReader)">
            <summary>
            Unpacks the struct data from a BinaryReader.
            </summary>
            <param name="br">The BinaryReader to read data from.</param>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.WorldComplete.Pack">
            <summary>
            Packs the struct data into a byte array.
            </summary>
            <returns>A byte array containing the packed struct data.</returns>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.WorldComplete.Pack(System.IO.BinaryWriter)">
            <summary>
            Packs the struct data into a BinaryWriter.
            </summary>
            <param name="bw">The BinaryWriter to write data to.</param>
        </member>
        <member name="M:EQProtocol.Streams.World.Packets.WorldComplete.ToString">
            <summary>
            Returns a string representation of the struct with all field values.
            </summary>
            <returns>A formatted string containing all field names and values.</returns>
        </member>
        <member name="T:EQProtocol.Streams.World.CharacterSelectEntry">
            <summary>
            Represents a character entry for the character select screen.
            </summary>
        </member>
        <member name="F:EQProtocol.Streams.World.CharacterSelectEntry.Level">
            <summary>
            The character's level.
            </summary>
        </member>
        <member name="F:EQProtocol.Streams.World.CharacterSelectEntry.HairStyle">
            <summary>
            The character's hair style.
            </summary>
        </member>
        <member name="F:EQProtocol.Streams.World.CharacterSelectEntry.Gender">
            <summary>
            The character's gender.
            </summary>
        </member>
        <member name="F:EQProtocol.Streams.World.CharacterSelectEntry.Name">
            <summary>
            The character's name.
            </summary>
        </member>
        <member name="F:EQProtocol.Streams.World.CharacterSelectEntry.Beard">
            <summary>
            The character's beard style.
            </summary>
        </member>
        <member name="F:EQProtocol.Streams.World.CharacterSelectEntry.HairColor">
            <summary>
            The character's hair color.
            </summary>
        </member>
        <member name="F:EQProtocol.Streams.World.CharacterSelectEntry.Face">
            <summary>
            The character's face type.
            </summary>
        </member>
        <member name="F:EQProtocol.Streams.World.CharacterSelectEntry.equipment">
            <summary>
            The character's equipment data.
            </summary>
        </member>
        <member name="F:EQProtocol.Streams.World.CharacterSelectEntry.PrimaryID">
            <summary>
            The character's primary item ID.
            </summary>
        </member>
        <member name="F:EQProtocol.Streams.World.CharacterSelectEntry.SecondaryID">
            <summary>
            The character's secondary item ID.
            </summary>
        </member>
        <member name="F:EQProtocol.Streams.World.CharacterSelectEntry.unknown15">
            <summary>
            Unknown byte at offset 15.
            </summary>
        </member>
        <member name="F:EQProtocol.Streams.World.CharacterSelectEntry.Deity">
            <summary>
            The character's deity.
            </summary>
        </member>
        <member name="F:EQProtocol.Streams.World.CharacterSelectEntry.Zone">
            <summary>
            The character's zone.
            </summary>
        </member>
        <member name="F:EQProtocol.Streams.World.CharacterSelectEntry.Instance">
            <summary>
            The character's instance.
            </summary>
        </member>
        <member name="F:EQProtocol.Streams.World.CharacterSelectEntry.GoHome">
            <summary>
            Indicates if the character should go home.
            </summary>
        </member>
        <member name="F:EQProtocol.Streams.World.CharacterSelectEntry.unknown19">
            <summary>
            Unknown byte at offset 19.
            </summary>
        </member>
        <member name="F:EQProtocol.Streams.World.CharacterSelectEntry.Race">
            <summary>
            The character's race.
            </summary>
        </member>
        <member name="F:EQProtocol.Streams.World.CharacterSelectEntry.Tutorial">
            <summary>
            Indicates if the character is in tutorial mode.
            </summary>
        </member>
        <member name="F:EQProtocol.Streams.World.CharacterSelectEntry.Class">
            <summary>
            The character's class.
            </summary>
        </member>
        <member name="F:EQProtocol.Streams.World.CharacterSelectEntry.EyeColor1">
            <summary>
            The character's first eye color.
            </summary>
        </member>
        <member name="F:EQProtocol.Streams.World.CharacterSelectEntry.BeardColor">
            <summary>
            The character's beard color.
            </summary>
        </member>
        <member name="F:EQProtocol.Streams.World.CharacterSelectEntry.EyeColor2">
            <summary>
            The character's second eye color.
            </summary>
        </member>
        <member name="F:EQProtocol.Streams.World.CharacterSelectEntry.DrakkinHeritage">
            <summary>
            The character's Drakkin heritage.
            </summary>
        </member>
        <member name="F:EQProtocol.Streams.World.CharacterSelectEntry.DrakkinTattoo">
            <summary>
            The character's Drakkin tattoo.
            </summary>
        </member>
        <member name="F:EQProtocol.Streams.World.CharacterSelectEntry.DrakkinDetails">
            <summary>
            The character's Drakkin details.
            </summary>
        </member>
        <member name="F:EQProtocol.Streams.World.CharacterSelectEntry.unknown">
            <summary>
            Unknown byte at the end of the struct.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.World.CharacterSelectEntry.#ctor(System.Byte,System.Byte,System.Boolean,System.String,System.Byte,System.Byte,System.Byte,System.UInt32,System.UInt32,System.UInt32,System.UInt16,System.UInt16,System.Boolean,System.UInt32,System.Boolean,System.Byte,System.Byte,System.Byte,System.Byte,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:EQProtocol.Streams.World.CharacterSelectEntry"/> struct with the specified values.
            </summary>
        </member>
        <member name="M:EQProtocol.Streams.World.CharacterSelectEntry.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:EQProtocol.Streams.World.CharacterSelectEntry"/> struct from a byte array.
            </summary>
            <param name="data">The byte array containing the data.</param>
            <param name="offset">The offset in the array to start reading from.</param>
        </member>
        <member name="M:EQProtocol.Streams.World.CharacterSelectEntry.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the <see cref="T:EQProtocol.Streams.World.CharacterSelectEntry"/> struct from a <see cref="T:System.IO.BinaryReader"/>.
            </summary>
            <param name="br">The binary reader to read from.</param>
        </member>
        <member name="M:EQProtocol.Streams.World.CharacterSelectEntry.Unpack(System.Byte[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EQProtocol.Streams.World.CharacterSelectEntry.Unpack(System.IO.BinaryReader)">
            <inheritdoc/>
        </member>
        <member name="M:EQProtocol.Streams.World.CharacterSelectEntry.Pack">
            <inheritdoc/>
        </member>
        <member name="M:EQProtocol.Streams.World.CharacterSelectEntry.Pack(System.IO.BinaryWriter)">
            <inheritdoc/>
        </member>
        <member name="M:EQProtocol.Streams.World.CharacterSelectEntry.ToString">
            <summary>
            Returns a string representation of the <see cref="T:EQProtocol.Streams.World.CharacterSelectEntry"/>.
            </summary>
            <returns>A string describing the struct.</returns>
        </member>
    </members>
</doc>
