task update {
	doLast {
		def opcodes = new File("C:\\EQ\\eqemu\\opcodes.conf").newInputStream()
		def patch = new File("C:\\EQ\\eqemu\\patch_RoF2.conf").newInputStream()
		def csharp = new File("C:\\EQ\\eqmap\\eqprotocol\\Opcodes.cs").newInputStream()
		
		def codes = [:]
		
		opcodes.eachLine {
			if (it.startsWith("OP")) {
				def c = it 
				def t = c.replace("\t"," ")
				def s = t.indexOf(" ")
				if (s != -1) 
					c = c.substring(0,s)	
				def code = c.split("=")
				codes.put(code[0], code[1])
			}
		}

		patch.eachLine {
			if (it.startsWith("OP")) {
				def c = it 
				def t = c.replace("\t"," ")
				def s = t.indexOf(" ")
				if (s != -1) 
					c = c.substring(0,s)	
				def code = c.split("=")
				codes.put(code[0], code[1])
			}
		}

		def newcsharp = []
		csharp.eachLine {
			if (it.contains("=") && it.contains("0x")) {
				def k = it.split("=")[0].replace(" ","")
				def v = it.split("=")[1].replace(" ","").replace(",","")
				def newcode = codes["OP_$k"]		
				if (newcode == null) {				
					newcsharp.add("${it.padRight(50)} // Skipped as no code found")
				}
				else if (newcode == "0x0000") {
					newcsharp.add("${it.padRight(50)} // Skipped as code is 0x0000")
				} 
				else 
				{				
					newcsharp.add("${it.replace(v,newcode).padRight(50)} // Replaced")
				}
			} else {
				newcsharp.add(it)
			}
		}	
		
		newcsharp.each {
			println it
		}
	}
}